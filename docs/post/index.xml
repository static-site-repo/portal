<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Potioneer&#39;s Essays</title>
    <link>//william-yeh.net/post/</link>
    <description>Recent content in Posts on Potioneer&#39;s Essays</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 10 Mar 2020 23:00:00 +0800</lastBuildDate>
    
	<atom:link href="//william-yeh.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Idempotency Key：原理與實測</title>
      <link>//william-yeh.net/post/2020/03/idempotency-key-test/</link>
      <pubDate>Tue, 10 Mar 2020 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2020/03/idempotency-key-test/</guid>
      <description>&lt;p&gt;最近幾年，在微服務打滾的人，不時會遇到神祕的 &amp;ldquo;idempotency key&amp;rdquo; 字眼。本文爬梳 idempotency key 的技術背景，探討運作流程，並分析資料庫的實作選項。&lt;/p&gt;
&lt;h2 id=&#34;idempotency-冪等性&#34;&gt;Idempotency 冪等性&lt;/h2&gt;
&lt;p&gt;在 API 服務中，常常需要留意 idempotency（冪等性）。&lt;/p&gt;
&lt;p&gt;名詞：idempotency，形容詞：idempotent。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Idempotency&amp;rdquo; 這字眼源自數學。維基百科是這麼解釋 &amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Idempotence#Idempotent_functions&#34;&gt;idempotent function&lt;/a&gt;&amp;rdquo; 的：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>求職，別忘了突出你的亮點</title>
      <link>//william-yeh.net/post/2020/01/career-spotlight/</link>
      <pubDate>Wed, 08 Jan 2020 22:30:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2020/01/career-spotlight/</guid>
      <description>&lt;p&gt;在網路上看到 Joe 喟然&lt;a href=&#34;https://www.facebook.com/story.php?story_fbid=3000276969985335&amp;amp;id=100000091845448&#34;&gt;嘆曰&lt;/a&gt;：「今天重要功課：仔細看過明天 20 位&lt;a href=&#34;https://www.darencademy.com/activity/view/id/16419&#34;&gt;履歷課&lt;/a&gt;同學的履歷以及繳交的功課。說起來這堂課好像是我們最耗能的一堂課，完全是做功德的一堂課。」&lt;/p&gt;
&lt;p&gt;我，身為履歷表價值鏈另一端的面試官，也很能瞭解這番滋味。&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;近年來，履歷教戰守則廣傳，有專書，甚至還有專門課程。理論上，「不懂得 &lt;del&gt;包裝美化履歷&lt;/del&gt; 正確呈現履歷」的低級錯誤應該會越來越少見——其實不然。驚訝的是，即使是獵頭轉來的履歷也常無法倖免，真不知該怎麼說了。&lt;/p&gt;
&lt;p&gt;遇到比較多的反例，是沒有&lt;strong&gt;亮點&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2019 個人回顧</title>
      <link>//william-yeh.net/post/2019/12/2019-retrospective/</link>
      <pubDate>Thu, 26 Dec 2019 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/12/2019-retrospective/</guid>
      <description>&lt;p&gt;年初，告別服務五年的單位，走出舒適圈，歸零，重啟。&lt;/p&gt;
&lt;p&gt;如果說 &lt;a href=&#34;//william-yeh.net/post/2018/12/2018-retrospective/&#34;&gt;2018&lt;/a&gt; 是收攝靜觀的一年，那麼，2019 可謂驚滔駭浪了。做對了一些事，也犯下許多蠢事。&lt;/p&gt;
&lt;p&gt;到了年終，又開始要做個總回顧，再對來年許願。去除一些不便揭露的事情，以下是簡單的回顧。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/12/ippo.jpg&#34; alt=&#34;鷹村對幕之內畫的那條線，我要踏過去了。&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/12/ippo.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;鷹村對幕之內畫的那條線，我要踏過去了。&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>技術面試的小觀點</title>
      <link>//william-yeh.net/post/2019/12/tech-interview/</link>
      <pubDate>Wed, 04 Dec 2019 22:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/12/tech-interview/</guid>
      <description>&lt;p&gt;年底，人才流動的旺季。&lt;/p&gt;
&lt;p&gt;這陣子，經手一堆履歷，更面試超過十場，深深覺得，若多一點人懂得&lt;strong&gt;面試&lt;/strong&gt;的遊戲規則，甚至更廣義的&lt;strong&gt;職場&lt;/strong&gt;遊戲規則，將是賓主盡歡的美事。&lt;/p&gt;
&lt;p&gt;Bryan &lt;a href=&#34;https://www.facebook.com/bryan.yao.1/posts/2666223613434413&#34;&gt;說得好&lt;/a&gt;：「求職過程投入越多，越能理解這個遊戲規則，也對自己的目標更清晰！」&lt;/p&gt;
&lt;p&gt;我們或許都沒有前衛到像 Netflix《&lt;a href=&#34;https://www.books.com.tw/products/0010796709&#34;&gt;給力&lt;/a&gt;》那樣「鼓勵員工經常去面試別家公司的工作」，但說實話，多一些面試與被面試的經歷，的確能夠更掌握遊戲規則，也會衝擊到自己原先的浪漫幻想，降低美麗的錯誤，將自己導向更務實的定位。&lt;/p&gt;
&lt;p&gt;面試與被面試都經歷過不少的我，想針對這陣子的所見所聞，分享一些個人的觀點。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Volume Resizing Mechanism in Kubernetes</title>
      <link>//william-yeh.net/post/2019/07/k8s-vol-resizing/</link>
      <pubDate>Wed, 31 Jul 2019 13:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/07/k8s-vol-resizing/</guid>
      <description>&lt;p&gt;Non-stop storage scaling (vertical or horizontal scaling) is essential in a data-intensive system, database servers in particular.&lt;/p&gt;
&lt;p&gt;Is it possible in Kubernetes?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CKAD (Certified Kubernetes Application Developer) 相關資料</title>
      <link>//william-yeh.net/post/2019/07/ckad-materials/</link>
      <pubDate>Thu, 11 Jul 2019 17:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/07/ckad-materials/</guid>
      <description>&lt;p&gt;Linux Foundation 旗下的 &lt;a href=&#34;https://www.cncf.io/&#34;&gt;CNCF (Cloud Native Computing Foundation)&lt;/a&gt; 提供兩個與 Kubernetes 相關的個人技術檢定：偏維運的 &lt;a href=&#34;https://www.cncf.io/certification/cka/&#34;&gt;CKA (Certified Kubernetes Administrator)&lt;/a&gt;，以及偏研發的 &lt;a href=&#34;https://www.cncf.io/certification/ckad/&#34;&gt;CKAD (Certified Kubernetes Application Developer)&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;其中，CKAD 與我關注的範圍、與我設計的工作坊最接近，便想進一步瞭解它的細節。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:15em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/07/kubernetes-ckad-color.png&#34; alt=&#34;CKAD logo&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/07/kubernetes-ckad-color.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;CKAD logo&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Docker File Permissions on Windows</title>
      <link>//william-yeh.net/post/2019/06/docker-file-permissions/</link>
      <pubDate>Mon, 24 Jun 2019 12:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/06/docker-file-permissions/</guid>
      <description>&lt;p&gt;Currently Linux containers are still more popular than Windows containers. And Windows users often need to use Linux containers even from their Windows computers.&lt;/p&gt;
&lt;p&gt;Recently I&amp;rsquo;ve found something very strange about Linux-style file permissions when the Docker images are built from Windows hosts.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; Therefore, I&amp;rsquo;ve conducted a suite of test cases to investigate whether file permissions are preserved with Docker &amp;amp; &lt;a href=&#34;https://skaffold.dev/&#34;&gt;Skaffold&lt;/a&gt; toolchains. All experiment materials are available in the &lt;a href=&#34;https://github.com/William-Yeh/container-chmod&#34;&gt;container-chmod&lt;/a&gt; repo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Auto-Reload from ConfigMap</title>
      <link>//william-yeh.net/post/2019/06/autoreload-from-configmap/</link>
      <pubDate>Mon, 17 Jun 2019 17:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/06/autoreload-from-configmap/</guid>
      <description>My previous article &amp;ldquo;Inotify in Containers&amp;rdquo; has demonstrated that when ConfigMap is mounted as directories, any changes in the ConfigMap will propagate to related pods, and can be detected with inotify-like APIs.
A follow-up question might be: what should a well-behaved application react to this trigger accordingly? What if it&amp;rsquo;s a ill-designed application?
To clarify this I&amp;rsquo;ve conducted a series of experiments for 3 possible configmap-reloading strategies:
 Built-in auto-reloading apps External signals Pod rollout  In this article I&amp;rsquo;m going to explain the experiments and preliminary findings.</description>
    </item>
    
    <item>
      <title>Containers and Environment Variables</title>
      <link>//william-yeh.net/post/2019/06/containers-and-env/</link>
      <pubDate>Mon, 17 Jun 2019 14:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/06/containers-and-env/</guid>
      <description>My previous article &amp;ldquo;Inotify in Containers&amp;rdquo; has demonstrated that when ConfigMap is mounted as directories, any changes in the ConfigMap will propagate to related pods. A follow-up question might be: what if the ConfigMap is mounted as environment variables? Some said that the answer is NO in Kubernetes1; even in the old Docker world2. Therefore, I&amp;rsquo;d like to begin with a simple experiment to try to answer the question: After</description>
    </item>
    
    <item>
      <title>Inotify in Containers</title>
      <link>//william-yeh.net/post/2019/06/inotify-in-containers/</link>
      <pubDate>Mon, 10 Jun 2019 18:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/06/inotify-in-containers/</guid>
      <description>It is usually necessary to watch for any changes in file systems, both in development and in production modes. For example, in the development mode Webpack can watch files and recompile whenever they change; in the production mode Consul Template can watch runtime configs and invoke specific applications whenever they change. These are well-known scenarios in traditional pre-container world. How about the container world? Do they behave the same in</description>
    </item>
    
    <item>
      <title>Kubernetes 的入門認知與導入策略</title>
      <link>//william-yeh.net/post/2019/05/k8s-lab/</link>
      <pubDate>Fri, 17 May 2019 12:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/05/k8s-lab/</guid>
      <description>&lt;p&gt;前天我在 &lt;a href=&#34;https://cloudsummit.ithome.com.tw/&#34;&gt;2019 台灣雲端大會&lt;/a&gt;帶了兩個場次，一個是現場實作場次，一個是經驗分享演講：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lab / &lt;a href=&#34;https://github.com/William-Yeh/workshop-cloud2019&#34;&gt;給 RD 的 Kubernetes 初體驗&lt;/a&gt; (90 minutes)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speech / &lt;a href=&#34;https://www.slideshare.net/williamyeh/when-dotnetmeetskubernetes-145557464&#34;&gt;當 .NET 遇到 Kubernetes&lt;/a&gt; (30 minutes)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;兩個場次，一言以蔽之，都圍繞在 Kubernetes 的入門認知與導入策略上。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Next &#39;19 的 Istio 場次重點摘要</title>
      <link>//william-yeh.net/post/2019/04/next19-istio/</link>
      <pubDate>Fri, 19 Apr 2019 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/04/next19-istio/</guid>
      <description>&lt;p&gt;四月 9&amp;ndash;11 日去舊金山參加 Google Cloud 的 &lt;a href=&#34;https://cloud.withgoogle.com/next/sf/&#34;&gt;Next ’19&lt;/a&gt; 大會，收穫頗大。&lt;/p&gt;
&lt;p&gt;這場大會，同一時段就有近 30 場專題演講同時進行，議程滿滿，勢必得做取捨。基於工作需要及個人興趣，我主要選擇與容器相關的場次：service mesh、Windows containers、混合雲、資安實務。&lt;/p&gt;
&lt;p&gt;我發現，光是這些場次，就得花很大力氣去消化、實驗與應用。&lt;/p&gt;
&lt;p&gt;我們這些所謂的「台港團」會在 GCPUG Taipei 舉辦一場&lt;a href=&#34;https://www.meetup.com/GCPUG-Taipei/events/260555968/&#34;&gt;分享會&lt;/a&gt;。因為自己不克參加，便以這篇文章，針對我鎖定的核心議題：Istio，做一番重點摘要，以饗讀者。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 WSL 裡使用 Ansible &#43; Vagrant</title>
      <link>//william-yeh.net/post/2019/04/wsl-ansible-vagrant/</link>
      <pubDate>Thu, 18 Apr 2019 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/04/wsl-ansible-vagrant/</guid>
      <description>&lt;p&gt;既然要開始在 Windows 上沿用 Mac 及 Unix 的命令列工具習慣&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，免不了要處理 &lt;a href=&#34;https://github.com/ansible/ansible&#34;&gt;Ansible&lt;/a&gt; 及 &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;雖然這兩個軟體都有對應的 Windows 版本，但據我以前的經驗，卡卡的，有許多小地雷；畢竟這些發跡自泛 Unix 家族的軟體，不是那麼容易無縫移植到對命令列不友善的 Windows 家族。&lt;/p&gt;
&lt;p&gt;如今 Windows 已經有 &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/&#34;&gt;WSL (Windows Subsystem for Linux)&lt;/a&gt; 機制，是否可以更無痛享用 Ansible 及 Vagrant 呢？&lt;/p&gt;
&lt;p&gt;可以的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WSLtty &#43; tmux 組合技</title>
      <link>//william-yeh.net/post/2019/04/wsltty-tmux/</link>
      <pubDate>Wed, 17 Apr 2019 22:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/04/wsltty-tmux/</guid>
      <description>&lt;p&gt;在 Windows 10 上面使用 WSL 已經一個月了&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。小狀況也就罷了，但 &lt;a href=&#34;https://cmder.net/&#34;&gt;Cmder&lt;/a&gt; 不夠穩定的顯示邏輯卻最讓我頭痛，在視窗尺寸變化時，無法正確處理字元位置。更令人費解的是，即使是其他狀似更華麗（也更耗資源）的替代方案，也仍然有這些問題&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;既然酷炫的終端機競品問題多多，乾脆回歸極簡的 WSLtty&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，並混搭 tmux&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; 來彌補。可惜，畢竟是組合技，無法完全複製 Mac 的 iTerm2 使用經驗。&lt;/p&gt;
&lt;p&gt;此事古難全。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx Ingress 與 Ambassador 簡易性能比較</title>
      <link>//william-yeh.net/post/2019/03/ingress-vs-ambassador/</link>
      <pubDate>Fri, 29 Mar 2019 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/03/ingress-vs-ambassador/</guid>
      <description>&lt;p&gt;API gateway 是微服務環境，甚至 service mesh 的要角 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 上面，API gateway 選項眾多。有像 HAProxy 及 Nginx 這些石器時代老傢伙跨足過來，也有打從一開始就走 cloud native 路線的後起之秀。&lt;/p&gt;
&lt;p&gt;該如何選擇？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Windows 上復刻 Mac 使用習慣</title>
      <link>//william-yeh.net/post/2019/03/wsl-cmder-zsh/</link>
      <pubDate>Thu, 14 Mar 2019 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/03/wsl-cmder-zsh/</guid>
      <description>&lt;p&gt;改用 Mac 已經六年了。現在要再回頭碰 Windows，還真有點不習慣。&lt;/p&gt;
&lt;p&gt;這年頭，許多軟體其實都有 Mac 及 Windows 版了：Chrome、Firefox、Slack、Evernote、Dropbox、VSCode……最大的差別，應該是終端機命令列工具。&lt;/p&gt;
&lt;p&gt;上古時代，需要靠 &lt;a href=&#34;https://www.cygwin.com/&#34;&gt;Cygwin&lt;/a&gt; 或 &lt;a href=&#34;http://www.mingw.org/&#34;&gt;MinGW&lt;/a&gt; 方案，才能勉強湊出一點點 Unix 的命令列感覺，但地雷超級多，難以作為嚴肅用途。後來，到了 2015 年，從保哥那邊知道有 &lt;a href=&#34;https://cmder.net/&#34;&gt;Cmder&lt;/a&gt; 這個好物 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，微軟又於 2016 年推出 &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/&#34;&gt;WSL (Windows Subsystem for Linux)&lt;/a&gt; 機制，Windows 這邊似乎出現曙光，對 Unix 命令列愛好者展現出久違的吸引力。&lt;/p&gt;
&lt;p&gt;為了在 Windows 10 上面復刻我的 Mac 的體驗：&lt;a href=&#34;https://www.iterm2.com/&#34;&gt;iTerm2&lt;/a&gt; + &lt;a href=&#34;https://www.zsh.org/&#34;&gt;Zsh&lt;/a&gt; + &lt;a href=&#34;https://ohmyz.sh/&#34;&gt;Oh My ZSH&lt;/a&gt;，我試了幾天，把步驟整理如下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes Best Practices 資料</title>
      <link>//william-yeh.net/post/2019/02/k8s-best-practice/</link>
      <pubDate>Mon, 25 Feb 2019 12:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/02/k8s-best-practice/</guid>
      <description>&lt;p&gt;Kubernetes 演化速度令人驚訝。彈性之大，令人聯想到當年  Perl 圈子奉為圭臬的 &lt;a href=&#34;https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it&#34;&gt;TIMTOWTDI&lt;/a&gt; 口號。&lt;/p&gt;
&lt;p&gt;選擇過多也會帶來問題。發展到某個階段，也該適時沈澱收斂出較佳的實務建議準則。&lt;/p&gt;
&lt;p&gt;因此，我稍微搜尋一下相關資料，作為參考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>技術領導者微培訓</title>
      <link>//william-yeh.net/post/2019/01/tech-leader-reading/</link>
      <pubDate>Sat, 19 Jan 2019 10:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/01/tech-leader-reading/</guid>
      <description>&lt;p&gt;最近，我們研發組織有幅度不算小的變動，某些技術人會被要求承擔更多的技術領導責任。&lt;/p&gt;
&lt;p&gt;不過，正如&lt;a href=&#34;https://en.wikipedia.org/wiki/Gerald_Weinberg&#34;&gt;溫伯格&lt;/a&gt;大師在《&lt;a href=&#34;https://www.books.com.tw/products/0010467750&#34;&gt;領導者，該想什麼？&lt;/a&gt;》所說，技術人常會面臨天人交戰：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>年假可讀的軟體領域輕讀物</title>
      <link>//william-yeh.net/post/2019/01/soft-reading-list/</link>
      <pubDate>Thu, 17 Jan 2019 15:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/01/soft-reading-list/</guid>
      <description>中午時，非 RD 的同事請我推薦適合泛軟體產業從業人員的五份輕讀物，可在春節連續假期時好好補血。 年假，自然不方便啃太過於生硬艱澀、理論宏偉的讀物。</description>
    </item>
    
    <item>
      <title>Scrum 與《從 A 到 A&#43;》</title>
      <link>//william-yeh.net/post/2019/01/scrum-good-to-great/</link>
      <pubDate>Fri, 11 Jan 2019 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/01/scrum-good-to-great/</guid>
      <description>&lt;p&gt;最近重新溫習近二十年的老書《&lt;a href=&#34;https://www.books.com.tw/products/0010202911&#34;&gt;從 A 到 A+&lt;/a&gt;》，啟發頗多。&lt;/p&gt;
&lt;p&gt;《從 A 到 A+》作者們的實證研究方法很嚴謹 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。他們從 1965～1995 年名列 Fortune 500 的企業名單中，挑選「十五年累計股票報酬率」超越股市整體表現三倍以上，且不受產業循環影響的企業，研究這些績優公司從「優秀」到「卓越」的關鍵因素。最後，作者們提出「&lt;a href=&#34;https://www.jimcollins.com/concepts/the-flywheel.html&#34;&gt;飛輪效應&lt;/a&gt;」來統一解釋他們的發現：&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/01/flywheel.jpg&#34; alt=&#34;飛輪效應&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/01/flywheel.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;飛輪效應&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;某方面來說，軟體研發圈講究的 Scrum，還滿符合《從 A 到 A+》所講的飛輪效應。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>