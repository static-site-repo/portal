<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Potioneer&#39;s Essays</title>
    <link>//william-yeh.net/</link>
    <description>Recent content on Potioneer&#39;s Essays</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Thu, 08 Nov 2018 08:00:00 +0800</lastBuildDate>
    
        <atom:link href="//william-yeh.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>接班人計畫</title>
      <link>//william-yeh.net/post/2018/11/succession-planning/</link>
      <pubDate>Thu, 08 Nov 2018 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/11/succession-planning/</guid>
      
        <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/the-nigmatic-1068159-unsplash.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/the-nigmatic-1068159-unsplash.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;彼得・杜拉克説：經理人的基本任務，除了平衡長短期的需要外，最重要的就是培養下一代的經理人。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;諾爾・提區説：成功組織會贏，贏在它的領導人不斷栽培組織上下每個層級的其他領導人。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;其實我很早就在默默做這件事了。畢竟以長遠來看，&lt;strong&gt;堅實的中階主管層，決定一個組織能走得多久多遠&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;就像&lt;a href=&#34;https://www.jianshu.com/p/dc2f701c166e&#34;&gt;此文&lt;/a&gt;所說：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;只要组织内部没有足够数量的领导，一个庞大的组织是无法在短时间内发生改变的。国家也好，大企业也罢，要想进行改革，需要的不是一个具备卓越能力的明星领袖，而是具备领导能力的人超过一定的数量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;想要「具備領導能力的人，超過一定的數量」，是需要佈局的。&lt;/p&gt;

&lt;h2 id=&#34;佈局&#34;&gt;佈局&lt;/h2&gt;

&lt;p&gt;我 2017 年初就開始佈局了，先從共同語言開始&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;（2017 年）三月，自掏腰包，拿《&lt;a href=&#34;https://www.books.com.tw/products/0010641668&#34;&gt;三年後，你的工作還在嗎&lt;/a&gt;》及〈&lt;a href=&#34;http://drapplehuang.blogspot.com/2017/03/blog-post_23.html&#34;&gt;沒了名片你還剩下什麼？新書發表演講筆記&lt;/a&gt;〉當部門內的讀書會材料，激發大家的工匠魂及總管魂。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;非正式調查，大家對其中的〈&lt;a href=&#34;https://www.darencademy.com/article/view/id/15058&#34;&gt;職場自由之道：第一天就為離開做好準備&lt;/a&gt;〉觀點最有感——很合乎我的預期。&lt;/p&gt;

&lt;p&gt;共同語言有了，之後再推動一些事情，就名正言順多了。&lt;/p&gt;

&lt;p&gt;最近規模比較大的，是在部門內舉辦第一場 Open Space Technology (OST；開放空間會議) ，提煉大家對於 2019 年的部門願景：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/gogolook-server-ost.png&#34; alt=&#34;部門 OST 活動，一隅 (2018-10-19)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/gogolook-server-ost.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;部門 OST 活動，一隅 (2018-10-19)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;從活動過程及結論中，可看出某些人在心態上已經做好承接更大責任的準備。因此，我可以更積極進行這件事了。&lt;/p&gt;

&lt;p&gt;俗氣一點講，是副手計畫；吊書袋的講法，是接班人計畫 (succession planning)。&lt;/p&gt;

&lt;h2 id=&#34;一對一關懷式指導&#34;&gt;「一對一關懷式指導」&lt;/h2&gt;

&lt;p&gt;我所崇敬的作家 Marcus Buckingham 在&lt;a href=&#34;http://willowcreek.org.uk/product/gls-2017-team-edition-usb/&#34;&gt;2017 領導力研習會&lt;/a&gt;給的【重塑績效管理】演講中&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，提出很簡單卻很有效的 &amp;ldquo;frequent strengths-based check-ins&amp;rdquo; 建議：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is one silver bullet that forms the foundation of a great team: frequent strengths-based check-ins about near-term future work. Every week. One-on-One.&lt;/p&gt;

&lt;p&gt;In the one-on-one, managers should ask just two questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What are your priorities for the week?&lt;/li&gt;
&lt;li&gt;How can I help?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One year is made up of 52 little sprints. Your job is to make sure sprint #37 is as energized and focused as sprint #1.&lt;/p&gt;

&lt;p&gt;This is not feedback. There is all sorts of research that shows we go into “fight-or-flight mode” in the face of feedback. People don’t want feedback; they want attention and coaching.&lt;/p&gt;

&lt;p&gt;Leaders should not manage more people than they can honestly have a one-on-one check-in every week. This is leadership.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我想，這種近身的教練模式，正是接班人計畫所需要的落地作法。&lt;/p&gt;

&lt;h2 id=&#34;材料&#34;&gt;材料&lt;/h2&gt;

&lt;p&gt;原本是想直接套用現成的《&lt;a href=&#34;https://www.knack.com.tw/Event/ManagerSkill&#34;&gt;帶人的技術 │ 新手主管的必殺訣竅&lt;/a&gt;》線上課程內容。但稍微研究了一下，這線上課程比較適合自學，不太適合近身的教練模式——除非搭配適當的補充材料。&lt;/p&gt;

&lt;p&gt;因此，我還是回到自己慣用的方式：指定讀物，個案研討，行動，回饋。&lt;/p&gt;

&lt;p&gt;只是培育中階主管，所以我只選擇簡單易讀的，不那麼高大上的材料。&lt;/p&gt;

&lt;h4 id=&#34;基本職涯觀念&#34;&gt;基本職涯觀念&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010641668&#34;&gt;三年後，你的工作還在嗎&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;工具箱&#34;&gt;工具箱&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010681486&#34;&gt;不懂這些，別想加薪&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;領導&#34;&gt;領導&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010445840&#34;&gt;領導，不需要頭銜&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;指導&#34;&gt;指導&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010699844&#34;&gt;教出好幫手&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;問題解決&#34;&gt;問題解決&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010675840&#34;&gt;破解問題的技術&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;會議&#34;&gt;會議&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;繁體版《&lt;a href=&#34;https://www.taaze.tw/sing.html?pid=11100243769&#34;&gt;誰說我們不能一起做決定&lt;/a&gt;》(2/e)&lt;/li&gt;
&lt;li&gt;簡體版《&lt;a href=&#34;http://www.sanmin.com.tw/product/index/005689892&#34;&gt;結構化研討：參與式決策操作手冊&lt;/a&gt;》(3/e)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;人際&#34;&gt;人際&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;二日課程：【&lt;a href=&#34;https://shop.darencademy.com/product/view/id/28&#34;&gt;A101 職場大人學 - 職場人際關係與優勢策略&lt;/a&gt;】&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;規劃&#34;&gt;規劃&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;一日課程：【&lt;a href=&#34;https://shop.darencademy.com/product/view/id/1&#34;&gt;101 / 專案管理一日特訓班&lt;/a&gt;】&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;至於具體的培訓議題順序，則還在研究。或許也不是獨自研究就能成形的，應該要與接班人共同議定吧。&lt;/p&gt;

&lt;p&gt;嗯，就這麼辦。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Photo credit: &lt;a href=&#34;https://unsplash.com/photos/Y4kw_G_xhsQ&#34;&gt;https://unsplash.com/photos/Y4kw_G_xhsQ&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;〈&lt;a href=&#34;https://www.hbrtaiwan.com/article_content_AR0000924.html&#34;&gt;人才培育與傳承的策略思維&lt;/a&gt;〉，哈佛商業評論・中文版，2008 年 10 月號。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://www.managertoday.com.tw/columns/view/55866&#34;&gt;「接班人」培育計畫，該有的正確觀念&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;https://school.soft-arch.net/blog/8494/poogi-by-questions&#34;&gt;以提問角度看 TOC 聚焦五步驟&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;&lt;a href=&#34;http://treymcclain.com/gls-17-buckingham/&#34;&gt;Session notes&lt;/a&gt; of GLS 2017: Session 5 – &lt;em&gt;Reinventing Performance Management&lt;/em&gt; by Marcus Buckingham.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>從小提問看企業價值</title>
      <link>//william-yeh.net/post/2018/11/peak-at-enterprise-value/</link>
      <pubDate>Fri, 02 Nov 2018 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/11/peak-at-enterprise-value/</guid>
      
        <description>&lt;p&gt;如何選人？&lt;/p&gt;

&lt;p&gt;我有一篇舊文〈&lt;a href=&#34;//william-yeh.net/post/2016/07/professional-attitude/&#34;&gt;專業態度的養成&lt;/a&gt;〉是針對中低階領域的提問重點；善用這些切入點，可挖掘出人才潛力股。這也是年度績效面談時，我會提問的重點之一。&lt;/p&gt;

&lt;p&gt;那麼，中高階領域呢？如何選領導者，選團隊，或者更廣泛一點講：如何選公司？&lt;/p&gt;

&lt;p&gt;我有兩個私房切入點，剛好是兩本書教我的。&lt;/p&gt;

&lt;h2 id=&#34;改變的角度&#34;&gt;改變的角度&lt;/h2&gt;

&lt;p&gt;第一本書是《&lt;a href=&#34;https://bookzone.cwgv.com.tw/books/details/BCB313&#34;&gt;關鍵領導九十天&lt;/a&gt;》。這是我每隔幾個月就會重溫的書。&lt;/p&gt;

&lt;p&gt;改變，是中高階人士常會面對，甚至需要主導的議題。此書提出一套「STARS 模式」來分析所處的改善／改變／改革局勢，其中「界定你的學習程序」工具很實用：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;為了使你在學習上的投資獲得最高的報酬，就必須從眼前大量的資訊中，有效地汲取可行的洞見，才能集中力量，營造收集資訊、分析、假設、測試的良性循環。&lt;/p&gt;

&lt;p&gt;你該如何收集初期的引導問題清單？首先，要針對過去、現在、未來提出問題。事情為何會那麼做？那樣做的理由，今天是否仍站得住腳？狀況是否改變，是否未來該有不同的做法？以下針對這三方面，提供了問題範例。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以這套引導問題清單為基礎，再混搭下一本書的模型，可營造出絕佳的說故事時間。圍繞這類事例，正是了解這位領導者，這團隊，或者更廣泛一點講：這間公司的絕佳切入點。&lt;/p&gt;

&lt;h2 id=&#34;永續的角度&#34;&gt;永續的角度&lt;/h2&gt;

&lt;p&gt;第二本書是《&lt;a href=&#34;https://www.books.com.tw/products/0010780648&#34;&gt;投資前的精準判讀&lt;/a&gt;》。畢竟，針對領導者、團隊，甚至公司的價值判定洞見，誰能像價值投資教父華倫・巴菲特那樣經得起考驗呢？&lt;/p&gt;

&lt;p&gt;《投資前的精準判讀》歸納巴菲特的洞見，提出一個很重要的羅盤：&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/sustainable-business-model.jpg&#34; alt=&#34;永續事業模型 (model of a sustainable business)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/sustainable-business-model.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;永續事業模型 (model of a sustainable business)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這個永續事業模型 (model of a sustainable business)，連指數型基金之父 Jack Bogle 都稱許道：「這張圖像哥白尼一樣，顯示了太陽真正的位置。」&lt;/p&gt;

&lt;p&gt;有時候，連企業掌舵者也未必很清楚知道這一點，遑論各層級的負責人。&lt;/p&gt;

&lt;p&gt;搞懂這個，搞懂這間企業對這事業模型的立場，再談推動改善／改變／改革吧。你所推動的事情，若不和這間企業自己的永續事業模型對齊，你只是努力地在當另一個唐吉訶德。&lt;/p&gt;

&lt;p&gt;更極端的是，如果這間企業根本沒有自己的「永續」想法，那麼，你連唐吉訶德都不必去當了，直接跳船吧。畢竟，孫子兵法說：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;故校之以計，而索其情。曰：主孰有道，將孰有能，天地孰得，法令孰行，兵眾孰強，士卒孰練，賞罰孰明，吾以此知勝負矣。將聽吾計，用之必勝，留之；將不聽吾計，用之必敗，去之。&lt;/p&gt;

&lt;p&gt;夫未戰而廟算勝者，得算多也；未戰而廟算不勝者，得算少也。多算勝，少算不勝，而況無算乎！吾以此觀之，勝負見矣。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;尋找線索&#34;&gt;尋找線索&lt;/h2&gt;

&lt;p&gt;《投資前的精準判讀》的模型及分析角度很有用。&lt;/p&gt;

&lt;p&gt;這本書教我們如何從對話或各種一手資訊中尋找線索：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/culture-clue.jpg&#34; alt=&#34;尋找文化線索&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/culture-clue.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;尋找文化線索&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;也教我們如何從對話或各種一手資訊所體現的溝通風格中，洞悉難以言說的深層事物：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/comm-style.jpg&#34; alt=&#34;溝通風格&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/comm-style.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;溝通風格&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;好書像寶藏，看你怎麼轉化運用。&lt;/p&gt;

&lt;p&gt;譬如說，面談時，不要盡是在瑣碎的事情上面打轉。試著用具體的實例，探出深層的永續事業層面，這才是重點。&lt;/p&gt;

&lt;p&gt;譬如說，專案計畫書、產品路線圖、impact map、product backlog，亦可用這些角度去測出背後的永續事業理念；或者⋯⋯沒有永續可言的理念。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;兩本有趣的私房書，給大家參考。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Lean Startup 的判準</title>
      <link>//william-yeh.net/post/2018/11/lean-startup-criteria/</link>
      <pubDate>Thu, 01 Nov 2018 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/11/lean-startup-criteria/</guid>
      
        <description>

&lt;p&gt;《商業周刊》第 1615 期，有一篇總編輯的話〈&lt;a href=&#34;https://www.businessweekly.com.tw/magazine/Article_mag_page.aspx?id=68134&#34;&gt;拖鞋戰法，先做了再修！&lt;/a&gt;〉：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;網路時代的敏捷開發法，強調「先做了再修改」，中心思想不是「預測」(predict)，而是「順應」(adapt)，讓市場告訴你如何改變。因此「先做出可用、但不完美的產品」後，直接拿到市場測試，根據顧客意見，再回頭修改，反覆這個循環，直到產品上市。&lt;/p&gt;

&lt;p&gt;在快時代下，過去強調「凡事先想透徹」的戰法出現破綻，步伐顯得沉重，而「先做了再改」的敏捷戰法則相對靈活。講到這裡，快低頭看看，你穿的是皮鞋還是拖鞋？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這下子 PO/PdM 可高興了，拿此文所謂「拖鞋戰法」當立論基礎，向團隊臃腫的 Scrum/Kanban DoD 磨刀霍霍。這也在&lt;a href=&#34;https://www.facebook.com/groups/179345672472/&#34;&gt;台灣 Scrum 社群&lt;/a&gt;引發熱烈&lt;a href=&#34;https://www.facebook.com/groups/179345672472/permalink/10156032174387473/&#34;&gt;討論&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;我留的評論是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;其實，這仍然是方法論&lt;strong&gt;判準&lt;/strong&gt;的老問題。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;敏捷有許多流派，不是只有 Scrum 才叫正宗，不是只有 Kanban 才叫適用。&lt;/p&gt;

&lt;p&gt;某些 PO 心中所想的，其實既不是 Scrum 也不是 Kanban，而是 lean startup（精實創業）——儘管他們自己也不知道。&lt;/p&gt;

&lt;p&gt;選錯方法論，選錯判準，自然扞格不入。&lt;/p&gt;

&lt;p&gt;先搞清楚 PO 內心真正要的方法論，搞清楚這方法論背後的世界觀，搞清楚判準，才能進行&lt;del&gt;攻防&lt;/del&gt;對話。&lt;/p&gt;

&lt;h2 id=&#34;lean-startup-的源流&#34;&gt;Lean Startup 的源流&lt;/h2&gt;

&lt;p&gt;Lean startup 路線，比較正式的起源，據 Steve Blank 在哈佛商業評論〈&lt;a href=&#34;https://www.hbrtaiwan.com/article_content_AR0002324.html&#34;&gt;精實創業改變全世界&lt;/a&gt;〉所述：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2004 年，我投資一家由艾瑞克．萊斯 (Eric Ries) 和威爾．哈維 (Will Harvey) 成立的新創公司，並提出一個但書，我堅持他們必須上我的課，我才會投資。&lt;/p&gt;

&lt;p&gt;艾瑞克很快就發現，科技產業傳統採行的「瀑布式開發法」那種線性開發方式，應該改為反覆修正、敏捷回應的開發方式。艾瑞克也看出這套新創業準則，與大家耳熟能詳的、豐田「精實生產」系統之間的共同點，因此，將這套結合顧客開發與敏捷反應的方法稱為「精實創業」。&lt;/p&gt;

&lt;p&gt;這些工具因為一連串的暢銷書，而逐漸廣為人知。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2011 年，Eric Ries 總結自身及他人經驗，出版《&lt;a href=&#34;https://www.books.com.tw/products/0010768288&#34;&gt;精實創業&lt;/a&gt;》一書，替這種路線正式定調。身為教父，他也策展了一系列經典之作：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010580487&#34;&gt;精實執行&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010753559&#34;&gt;快成長時代&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.tenlong.com.tw/products/9787115405319&#34;&gt;精益客戶開發&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/CN11206479&#34;&gt;精益數據分析&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010756527&#34;&gt;精實 UX 設計&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lean startup 理念貌似常識，但若真的要有正確不偏頗的理解，這些輕薄短小的書都是必備讀物，勿等閒視之。&lt;/p&gt;

&lt;h2 id=&#34;lean-startup-的判準&#34;&gt;Lean Startup 的判準&lt;/h2&gt;

&lt;p&gt;Lean startup 在執行時，的確常會與 Scrum 或 Kanban 混搭。像《&lt;a href=&#34;https://www.books.com.tw/products/0010580487&#34;&gt;精實執行&lt;/a&gt;》第二版第 13 章如此建議：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;控制你的功能管線，限制同時間被處理的功能數量，並且僅於你已驗證過所部署之功能具有正面或負面的影響之後（亦即，產生經驗學習），才著手處理新功能。進行這項工作的好方法，就是運用 Kanban。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但在方法論層面，仍然該有所區辨，尤其會涉及到接下來要談的嚴肅話題：判準。&lt;/p&gt;

&lt;p&gt;Lean startup 理念貌似常識，但真正核心的判準，未必都被清楚地認知。&lt;/p&gt;

&lt;p&gt;我個人認為，lean startup 的判準，就是 Ash Maurya 在《&lt;a href=&#34;https://www.books.com.tw/products/0010580487&#34;&gt;精實執行&lt;/a&gt;》書中所勾勒的三大風險、四大階段。如果以 Ash Maurya 發明的精實畫布 (lean canvas) 攤開來看：&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/lean-startup-risk.jpg&#34; alt=&#34;《精實執行》有系統地消除三大風險&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/lean-startup-risk.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;《精實執行》有系統地消除三大風險&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;三大風險、四大階段，彼此的判讀基準如下：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;階段&lt;/th&gt;
&lt;th&gt;產品風險&lt;/th&gt;
&lt;th&gt;顧客風險&lt;/th&gt;
&lt;th&gt;市場風險&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1. 瞭解問題&lt;/td&gt;
&lt;td&gt;你在解決什麼問題？&lt;/td&gt;
&lt;td&gt;競爭對手是誰？&lt;/td&gt;
&lt;td&gt;誰感到痛苦？&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2. 定義解決方案&lt;/td&gt;
&lt;td&gt;誰感到痛苦？&lt;/td&gt;
&lt;td&gt;你將如何解決這些問題？&lt;/td&gt;
&lt;td&gt;定價模型為何？&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3. 定性驗證&lt;/td&gt;
&lt;td&gt;這項產品有什麼令人無法抗拒的地方嗎？&lt;/td&gt;
&lt;td&gt;你有足夠的顧客嗎？&lt;/td&gt;
&lt;td&gt;價格合適嗎？&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4. 定量驗證&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;至於 lean canvas 的各個空格，該如何制訂質性與量化的指標，就得量身定做了。&lt;/p&gt;

&lt;p&gt;看到這裡，你認為本文開頭所提到的「拖鞋戰法」，是落在 lean startup 哪一個格子呢？&lt;/p&gt;

&lt;h3 id=&#34;合乎現實嗎&#34;&gt;合乎現實嗎？&lt;/h3&gt;

&lt;p&gt;要走 lean startup 路線，就要弄清楚 lean startup 的判準，並致力於判準的實踐品質，這是將方法論落地實施的重要關鍵。&lt;/p&gt;

&lt;p&gt;問題是：這個判準，合乎現實嗎？更進一步的問題是：是怎樣的世界觀，才會催生如此的判準？&lt;/p&gt;

&lt;p&gt;Lean startup 的世界觀就是，我們對萬事萬物的認知，充斥仍待驗證的粗糙假設。能用最少的投入成本，降低最多的不確定性，就是最好的學習。&lt;/p&gt;

&lt;p&gt;認清這個判準，以及這個判準背後代表的方法論及世界觀，有助於你成為高性價比的策略執行家。&lt;/p&gt;

&lt;p&gt;或許更重要的是，你支持這種方法論，卻又得與一知半解者合作，你就應該在這些判準的層次上，盡一切努力守護這些判準的認知與實踐品質，並最大化這些判準的價值能見度。&lt;/p&gt;

&lt;p&gt;在判準的層次動工，比各自表述的爭辯更有力。&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      系列文章
    
  &lt;/div&gt;
  &lt;p&gt;❶ &lt;a href=&#34;//william-yeh.net/post/2018/10/methodology-and-criteria/&#34;&gt;軟體開發，除了方法論，還有⋯⋯&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❷ &lt;a href=&#34;//william-yeh.net/post/2018/10/agile-criteria/&#34;&gt;敏捷的判準&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❸ Lean Startup 的判準&lt;/p&gt;

&lt;/div&gt;

</description>
      
    </item>
    
    <item>
      <title>敏捷的判準</title>
      <link>//william-yeh.net/post/2018/10/agile-criteria/</link>
      <pubDate>Wed, 31 Oct 2018 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/10/agile-criteria/</guid>
      
        <description>&lt;p&gt;今年暑假，我第一次去台中的國美館，參觀 &lt;a href=&#34;https://www.ntmofa.gov.tw/information_1078_86836.html&#34;&gt;2018 年全國美術展&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;這年度盛會，分成油畫、水彩、版畫、水墨等十大類。大開眼界之餘，也不禁有個奇想：為什麼要分這麼多類別來競賽？為什麼不選出一個跨十大類別的首獎，就像武林盟主一樣？&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/nBlph7Vp92E&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;很外行吧！畢竟，油畫的美感判準，與版畫的美感判準、攝影的美感判準，本來就有很大不同，不能草率化約在同一把尺來衡量高下境界。&lt;/p&gt;

&lt;p&gt;把照片拍得像油畫，就能夠贏過油畫嗎？&lt;/p&gt;

&lt;p&gt;我們有選擇美術媒材的自由。一旦擇定媒材，就要正視及尊重該媒材的運用手法、該媒材營造的世界觀，以及該媒材表現境界的判準。&lt;/p&gt;

&lt;p&gt;軟體開發，亦然。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;//william-yeh.net/post/2018/10/methodology-and-criteria/&#34;&gt;前一篇文章&lt;/a&gt;初步提到&lt;strong&gt;方法論&lt;/strong&gt;與&lt;strong&gt;判準&lt;/strong&gt;之間的關係，這一篇文章，就來繼續探討幾種常見軟體研發方法的判準。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「多元典範的軟體開發取向」認為：我們可以視問題的性質，採取瀑布或敏捷軟體開發典範。&lt;/p&gt;

&lt;p&gt;然而，採取某種典範，不但要說明自己的&lt;strong&gt;方法論立場&lt;/strong&gt;，而且要採用該一典範的&lt;strong&gt;方法論判準&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;瀑布方法的判準&#34;&gt;瀑布方法的判準&lt;/h2&gt;

&lt;p&gt;敏捷三叔公 David Ko 在〈&lt;a href=&#34;http://kojenchieh.pixnet.net/blog/post/465054452-%E5%8E%9F%E4%BE%86%E7%80%91%E5%B8%83%E8%80%81%E7%A5%96%E6%98%AF%E6%83%B3%E5%81%9A%E6%95%8F%E6%8D%B7%E5%95%8A&#34;&gt;原來瀑布老祖是想做敏捷啊&lt;/a&gt;〉考古文章中指出，瀑布式開發始祖 Winston W. Royce 在 1970 年發表的&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=41801&#34;&gt;會議論文&lt;/a&gt;中，總共提出兩種想法，一種是後來被世人普遍稱為&lt;del&gt;萬惡的&lt;/del&gt; waterfall 的版本，另一種則是帶些更務實風格的修正版。&lt;/p&gt;

&lt;p&gt;兩種想法，背後的核心觀念，其實都是 &lt;a href=&#34;https://www.pmi.org/learning/library/phase-gate-processes-promising-complex-547&#34;&gt;phase gate&lt;/a&gt; 或 &lt;a href=&#34;https://wiki.mbalib.com/zh-tw/%E9%97%A8%E5%BE%84%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F&#34;&gt;stage gate&lt;/a&gt; 的 &amp;ldquo;&lt;strong&gt;gate&lt;/strong&gt;&amp;rdquo; 機制：&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/10/royce-1970.png&#34; alt=&#34;Royce 1970 - Managing the development of large software systems: concepts and techniques&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/10/royce-1970.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Royce 1970 - Managing the development of large software systems: concepts and techniques&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;以上圖來說，圓圈圈的部分，就是在各個階段 (phase/stage) 負責把關的守門員：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;PSR: Preliminary Software Review&lt;/li&gt;
&lt;li&gt;CSR: Critical Software Review&lt;/li&gt;
&lt;li&gt;FSAR: Final Software Acceptance Review&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;這就是瀑布方法論的判準。&lt;/p&gt;

&lt;h3 id=&#34;合乎現實嗎&#34;&gt;合乎現實嗎？&lt;/h3&gt;

&lt;p&gt;要走 waterfall 路線，就要弄清楚 waterfall 的判準，並致力於判準的實踐品質，這是將方法論落地實施的重要關鍵。&lt;/p&gt;

&lt;p&gt;問題是：這個判準，合乎現實嗎？更進一步的問題是：是怎樣的世界觀，才會催生如此的判準？&lt;/p&gt;

&lt;p&gt;Waterfall 的世界觀就是，萬事萬物，都有一個自然的、可預測的線性執行順序。在這些自然的線性順序當中，會有一些關鍵的控制點，或者像《&lt;a href=&#34;https://www.kingstone.com.tw/book/book_page.asp?kmcode=2014940760328&#34;&gt;利潤的故事&lt;/a&gt;》所用的「地景的控制點」妙喻：「有些地方，就是比其他地方重要」。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:20em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/10/control-point.jpg&#34; alt=&#34;地景的控制點&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/10/control-point.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;地景的控制點&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這些「地景的控制點」，就是瀑布方法 phase gate 判準之所在。&lt;/p&gt;

&lt;p&gt;不可否認，的確有人在這種方法論、世界觀、判準底下活得很好。認清這個判準，以及這個判準背後代表的方法論及世界觀，有助於你和這類人種互動。&lt;/p&gt;

&lt;p&gt;或許更重要的是，你不同意這種方法論，卻又得與這類人種合作，你就應該在這些判準的層次上，&lt;del&gt;挑戰&lt;/del&gt;關心對方對這些判準的認知與實踐品質。&lt;/p&gt;

&lt;p&gt;在判準的層次動工，比各自表述的爭辯更有力。&lt;/p&gt;

&lt;h2 id=&#34;scrum-的判準&#34;&gt;Scrum 的判準&lt;/h2&gt;

&lt;p&gt;儘管 Scrum 是很精簡的框架，但真正核心的判準，未必都被清楚地認知。&lt;/p&gt;

&lt;p&gt;我個人認為，Scrum 的判準，就在於 &lt;strong&gt;increment&lt;/strong&gt;，或者更具體一點講：&lt;strong&gt;PSPI&lt;/strong&gt; (potentially shippable product increment)。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.scrumguides.org/&#34;&gt;&lt;em&gt;The Scrum Guide&lt;/em&gt;&lt;/a&gt; (2017 版) 說：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scrum 使用迭代和逐步 increment 的方式，來最大化可預測性和控制風險。&lt;/p&gt;

&lt;p&gt;在 Sprint 結束時，increment 是一種可檢視，完成的工作實體，並可支持經驗主義。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;簡言之，Scrum 是以 increment 作為載具、「地景的控制點」，藉以反映出透明性、檢視性、調適性這三大主張，藉以最大化可預測性及控制風險。&lt;/p&gt;

&lt;p&gt;並不是隨隨便便任何一個軟體中間狀態都夠資格稱為 &amp;ldquo;increment&amp;rdquo;，而是有標準的。Scrum 是很精簡的框架，將這標準交由團隊來定義 (DoD; definition of done)，但能否嚴守這個承諾共識，決定了 Scrum 實踐的成敗：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scrum Teams 用迭代和逐步 increment 的方式交付產品，將回饋的機會最大化。用逐步
increment 的方式交付「完成」的產品，可以確保一直提供一個潛在可用的產品版本。&lt;/p&gt;

&lt;p&gt;真正執行的人員和檢視 increment 成果的人員，需要對「完成」之定義，有一個共同的認知。&lt;/p&gt;

&lt;p&gt;在 Sprint 的最後，新的 increment 必須是「完成」的，這意味著它必須是可用的狀態，並符合 Scrum Team 對於「完成」之定義。&lt;/p&gt;

&lt;p&gt;在 Sprint 過程中，對於品質的目標不可以降低。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;簡言之，Scrum 的判準，就在於 increment 的定義，以及能否在各個迭代過程中，捍衛並精進這個 increment 的整全狀態。&lt;/p&gt;

&lt;h3 id=&#34;合乎現實嗎-1&#34;&gt;合乎現實嗎？&lt;/h3&gt;

&lt;p&gt;要走 Scrum 路線，就要弄清楚 Scrum 的判準，並致力於判準的實踐品質，這是將方法論落地實施的重要關鍵。&lt;/p&gt;

&lt;p&gt;問題是：這個判準，合乎現實嗎？更進一步的問題是：是怎樣的世界觀，才會催生如此的判準？&lt;/p&gt;

&lt;p&gt;Scrum 的世界觀就是，萬事萬物，都有一個自然的生物成長順序。或嬰兒，或幼童，或成年，在每一個當下，必然都是整全的生命個體。&lt;/p&gt;

&lt;p&gt;認清這個判準，以及這個判準背後代表的方法論及世界觀，有助於你與其他物種分別為聖。&lt;/p&gt;

&lt;p&gt;或許更重要的是，你支持這種方法論，卻又得與反對者合作，你就應該在這些判準的層次上，盡一切努力守護這些判準的認知與實踐品質，並最大化這些判準的價值能見度。&lt;/p&gt;

&lt;p&gt;在判準的層次動工，比各自表述的爭辯更有力。&lt;/p&gt;

&lt;h2 id=&#34;kanban-的判準&#34;&gt;Kanban 的判準&lt;/h2&gt;

&lt;p&gt;Kanban 是極度精簡的框架，甚至連「框架」都不太能夠稱得上。因此，他的判準很容易辨識，也很容易衡量，那就是 Kanban 的核心規則：拉動系統 (pull)、WIP 限制。&lt;/p&gt;

&lt;p&gt;問題是：這個判準，合乎現實嗎？更進一步的問題是：是怎樣的世界觀，才會催生如此的判準？&lt;/p&gt;

&lt;p&gt;Kanban 的世界觀就是，萬事萬物，都有一個自然的流動順序。我們所該做的，就是讓這流動，以小批量的方式，毫無阻礙地順流而下。&lt;/p&gt;

&lt;p&gt;認清這個判準，以及這個判準背後代表的方法論及世界觀，有助於你掌握這個「入門毒藥」(gateway drug) &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 的殊勝之處，以及⋯⋯潛在的問題。 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;或許更重要的是，你支持這種方法論，卻又得與反對者或不可知論者合作，你就應該在這些判準的層次上，盡一切努力守護這些判準的認知與實踐品質，並最大化這些判準的價值能見度。&lt;/p&gt;

&lt;p&gt;在判準的層次動工，比各自表述的爭辯更有力。&lt;/p&gt;

&lt;h2 id=&#34;善用判準作為施力點&#34;&gt;善用判準作為施力點&lt;/h2&gt;

&lt;p&gt;判準，是將方法論落地實施的重要關鍵，也是方法論歧見的槓桿解。&lt;/p&gt;

&lt;p&gt;畢竟，方法論，甚至背後的世界觀，不是那麼容易就撼動得了。&lt;/p&gt;

&lt;p&gt;試問：你對自己採用的軟體開發方法論，了解它的判準嗎？&lt;/p&gt;

&lt;p&gt;試問：你對其他人採用的不一樣的軟體開發方法論，也了解它的判準嗎？&lt;/p&gt;

&lt;p&gt;理解別人的判準，善用判準作為施力點，在判準的層次動工，比起辯論不同方法論之間的優劣，更有建設性，也更能推動事情的前進。&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      系列文章
    
  &lt;/div&gt;
  &lt;p&gt;❶ &lt;a href=&#34;//william-yeh.net/post/2018/10/methodology-and-criteria/&#34;&gt;軟體開發，除了方法論，還有⋯⋯&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❷ 敏捷的判準&lt;/p&gt;

&lt;p&gt;❸ &lt;a href=&#34;//william-yeh.net/post/2018/11/lean-startup-criteria/&#34;&gt;Lean Startup 的判準&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://kojenchieh.pixnet.net/blog/post/386166536-%E7%9C%8B%E6%9D%BF%E6%98%AF%E5%85%A5%E9%96%80%E6%AF%92%E8%97%A5-(gateway-drug)&#34;&gt;看板是入門毒藥 (gateway drug)&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;http://teddy-chen-tw.blogspot.com/2017/06/blog-post_21.html&#34;&gt;為什麼看板方法適合控制與能力文化？&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>軟體開發，除了方法論，還有⋯⋯</title>
      <link>//william-yeh.net/post/2018/10/methodology-and-criteria/</link>
      <pubDate>Thu, 25 Oct 2018 12:22:16 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/10/methodology-and-criteria/</guid>
      
        <description>&lt;p&gt;在某些人眼中，「敏捷」是狂熱份子聚集的邪教。&lt;/p&gt;

&lt;p&gt;或許是被困在守舊勢力太久了，敏捷信徒不只有改變世界的熱情，更有捨我其誰的急迫感。不過，在傳播理念或推動改變時，若操之過急，忽略對方所處的情境、歷史及歷程，就很難有建設性對話。在這守舊勢力龐大的世界，自然很容易陣亡。&lt;/p&gt;

&lt;p&gt;但這還只是表象。歧見，單靠對話仍不足以化解，更需要在方法論層次達到理解，方可進退有據。&lt;/p&gt;

&lt;p&gt;尤其在看過《&lt;a href=&#34;https://www.books.com.tw/products/0010791756&#34;&gt;社會科學的理路&lt;/a&gt;》之後，我領悟到一些根源問題及槓桿解。&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/10/social-sci.jpg&#34; alt=&#34;圖一　《社會科學的理路》第一版 (2001) 及第四版 (2018)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/10/social-sci.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;圖一　《社會科學的理路》第一版 (2001) 及第四版 (2018)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;方法論形塑世界觀&#34;&gt;方法論形塑世界觀&lt;/h2&gt;

&lt;p&gt;我們都在採用&lt;strong&gt;方法論&lt;/strong&gt;，不管我們自覺或不自覺。&lt;/p&gt;

&lt;p&gt;瀑布模型是一種方法論，敏捷是一種方法論，Scrum 及 Kanban 則是敏捷方法論底下更具體的實踐作法。&lt;/p&gt;

&lt;p&gt;為什麼會決定採取某一種方法論？原因可能很多，本文不予探討。本文想談的是，採取某一種方法論，就會逐漸被該方法論所形塑的&lt;strong&gt;世界觀&lt;/strong&gt;所包圍，以及接下來的連鎖效應——不管我們自覺或不自覺。&lt;/p&gt;

&lt;p&gt;論到方法論及世界觀，我想要引述《&lt;a href=&#34;https://www.books.com.tw/products/0010791756&#34;&gt;社會科學的理路&lt;/a&gt;》的見解。&lt;/p&gt;

&lt;p&gt;本書作者黃光國教授，是台灣社會心理學界的大老。他花了將近十年的工夫寫成本書第一版 (2001 年)，析論二十世紀發展出來的五種科學哲學主要典範之間的關聯。退休後推出的第四版 (2018 年)，將原本具有歷史意義的第一章整個抽換掉，很可惜，所以我仍然留著第一版。&lt;/p&gt;

&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010791756&#34;&gt;社會科學的理路&lt;/a&gt;》，從科學哲學角度指出：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/10/paradigm.jpg&#34; alt=&#34;圖二　方法論與世界觀&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/10/paradigm.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;圖二　方法論與世界觀&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;看起來有點抽象，讓我們從「軟體開發流程」的角度來照樣造句，就會茅塞頓開：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;任何一種&lt;strong&gt;軟體開發流程&lt;/strong&gt;所主張的「&lt;strong&gt;本體論／認識論／方法論&lt;/strong&gt;」，構成了該一開發流程的「&lt;strong&gt;世界觀&lt;/strong&gt;」，它在性質上是一種&lt;strong&gt;形而上學的預設&lt;/strong&gt;，是由軟體開發團隊的&lt;strong&gt;基本信念&lt;/strong&gt;所決定的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一個&lt;strong&gt;軟體開發者&lt;/strong&gt;，對於方法論的回答，必然會受到其「本體論／認識論」立場的&lt;strong&gt;限制&lt;/strong&gt;，而不能隨意選擇。當他決定採用某種方法論的時候，他也必須同時接受其「本體論／認識論」&lt;strong&gt;預設&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，採取瀑布模式的人，採取敏捷模式的人，兩群人的世界觀，以及信念、預設，是非常不一樣的。&lt;/p&gt;

&lt;p&gt;想合作，或是想進一步改變對方，就得先認清這一點：你們的對話，是不同世界觀的對話。&lt;/p&gt;

&lt;h2 id=&#34;方法論之外-還有判準&#34;&gt;方法論之外，還有判準&lt;/h2&gt;

&lt;p&gt;瀑布模型是一種方法論，敏捷是一種方法論。&lt;/p&gt;

&lt;p&gt;不同方法論，有優劣之別嗎？&lt;/p&gt;

&lt;p&gt;或許有吧。但更常見的事實是：不同方法論，各有擅長的場域。&lt;/p&gt;

&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010791756&#34;&gt;社會科學的理路&lt;/a&gt;》第一版的第一章，從科學哲學角度指出：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/10/paradigm-criteria.jpg&#34; alt=&#34;圖三　典範的判準&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/10/paradigm-criteria.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;圖三　典範的判準&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;文中點出很重要的觀念：「&lt;strong&gt;判準&lt;/strong&gt;」。&lt;/p&gt;

&lt;p&gt;看起來有點抽象，讓我們再從「軟體開發流程」的角度來照樣造句吧！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我是贊同「敏捷運動」的。然而，我卻認為：「敏捷／不敏捷」不能夠作為軟體開發流程好壞的&lt;strong&gt;判準&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;我主張的「多元典範的軟體開發取向」認為：我們可以視問題的性質，採取瀑布或敏捷軟體開發典範。然而，採取某種典範，不但要說明自己的&lt;strong&gt;方法論立場&lt;/strong&gt;，而且要採用該一典範的&lt;strong&gt;方法論判準&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在我看來，軟體開發而沒有判準，是非常不可思議之事。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;判準，是將方法論落地實施的重要關鍵，也是方法論歧見的槓桿解。&lt;/p&gt;

&lt;p&gt;試問：你對自己採用的軟體開發方法論，了解它的判準嗎？&lt;/p&gt;

&lt;p&gt;試問：你對其他人採用的不一樣的軟體開發方法論，也了解它的判準嗎？&lt;/p&gt;

&lt;p&gt;先賣個關子。下一篇文章，再分別針對瀑布與敏捷取向，談談我所認為的方法論判準。&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      系列文章
    
  &lt;/div&gt;
  &lt;p&gt;❶ 軟體開發，除了方法論，還有⋯⋯&lt;/p&gt;

&lt;p&gt;❷ &lt;a href=&#34;//william-yeh.net/post/2018/10/agile-criteria/&#34;&gt;敏捷的判準&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❸ &lt;a href=&#34;//william-yeh.net/post/2018/11/lean-startup-criteria/&#34;&gt;Lean Startup 的判準&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>平凡人求生之道：別總是直球對決</title>
      <link>//william-yeh.net/post/2016/08/lifetime-keywords/</link>
      <pubDate>Mon, 29 Aug 2016 07:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/08/lifetime-keywords/</guid>
      
        <description>&lt;p&gt;我們的人生，都走了許多冤枉路。回頭來看，總是希望能有系統化的方法，及早認清局勢，預作準備，以求更無懼於永不停歇的變局。&lt;/p&gt;

&lt;p&gt;這是我常常在尋覓的思維方法。&lt;/p&gt;

&lt;p&gt;雖然 Joe 在【&lt;a href=&#34;https://shop.darencademy.com/product/view/id/66&#34;&gt;大人學講座12：別總是直球對決：人生難題的系統思考法&lt;/a&gt;】的文案自謙：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Joe，因為從小就不是功課好的學生、甚至在求學過程自國小開始就深覺不適應。所以很早他就理解，如果只是跟著大部分人走的道路，自己很可能毫無競爭力並終將一事無成。所以成長過程，一直就在思考並探索自己還有甚麼別的選擇？有沒有辦法避開人多的路線，而另闢蹊徑？&lt;/p&gt;

&lt;p&gt;透過 6 段故事、搭配 30 個人生關鍵字，讓你提升策略思考力、讓你更有能力面對後續的每個人生挑戰！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但許多時候，健步如飛、如履平地的天才，不見得容易被平凡人仿效；平凡人所跌的跤，及之後逆轉勝的經驗，反而更具參考價值。&lt;/p&gt;

&lt;p&gt;Joe，就有這麼值得參考的逆轉勝故事。&lt;/p&gt;

&lt;p&gt;當年的「平凡人 Joe」，已經變成「不平凡的 Joe」。箇中心路歷程，及面對種種困境、選擇的取捨標準，是我想好好觀摩體會的。加上身為 J&amp;amp;B 的鐵粉，自然不想錯過這晉升大人的重要思路。&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/s012-joe.jpg&#34; alt=&#34;S012 - 別總是直球對決&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/s012-joe.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;S012 - 別總是直球對決&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
整整三個小時的講座，環繞在這 30 個關鍵字：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-0.png&#34; alt=&#34;30 個關鍵字&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-0.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;30 個關鍵字&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
其中，前三個關鍵字，讓天真爛漫的生涯學童，及早面對沒有標準答案的現實世界。正確的認知，才能進一步激發跳出框架的動力：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-1-3.png&#34; alt=&#34;關鍵字 1~3&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-1-3.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;關鍵字 1~3&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
接下來四個關鍵字，讓我重溫之前在【&lt;a href=&#34;//william-yeh.net/post/2016/06/upgrade-adult-thinking-part2/&#34;&gt;A101 職場大人學：職場人際關係與優勢策略&lt;/a&gt;】課堂上受到的洗禮：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-4-7.png&#34; alt=&#34;關鍵字 4~7&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-4-7.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;關鍵字 4~7&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
接下來五個關鍵字，重點濃縮了 Joe &amp;amp; Bryan 在許多文章及課程一再強調的「認清局勢」觀點：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-8-12.png&#34; alt=&#34;關鍵字 8~12&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-8-12.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;關鍵字 8~12&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
接下來三個關鍵字，讓我回想起 Bryan 那仍令人回味不已的【&lt;a href=&#34;https://shop.darencademy.com/product/view/id/57&#34;&gt;大人學講座03 : 尋找天賦與熱情的系統化做法&lt;/a&gt;】（我要回去複習一下 Bryan 講的「礦場主人的矩陣」了）：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-13-15.png&#34; alt=&#34;關鍵字 13~15&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-13-15.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;關鍵字 13~15&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
接下來四個關鍵字，很像《&lt;a href=&#34;http://www.books.com.tw/products/0010641668?loc=P_asb_001&#34;&gt;三年後，你的工作還在嗎？&lt;/a&gt;》的重點濃縮：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-16-19.png&#34; alt=&#34;關鍵字 16~19&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-16-19.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;關鍵字 16~19&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
接下來六個關鍵字，對我來說，是很重的當頭棒喝。多少次我們都陷在競逐的潮流裡，忘卻某些似拙實巧的道理？有些事，欲速則不達呀！&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-20-25.png&#34; alt=&#34;關鍵字 20~25&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-20-25.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;關鍵字 20~25&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;
聽著這五段 Joe 從小到大的故事，提煉出來的 25 個關鍵字，可能會誤以為這只是心靈雞湯（不過，就算是心靈雞湯，也是熬了四十年的原汁原味上等雞湯喔）。不過，更神奇的是，Joe 緊接著用第六段故事，現身說法，證明這 25 個關鍵字，不只是用在個人生涯成長，居然還可以用來搶下一個大型的系統導入案！&lt;/p&gt;

&lt;p&gt;真是太不可思議了！這豈不正像周星馳電影《食神》裡面的摺凳一樣嗎？「好摺凳！摺凳的奧妙之處，它可以藏在民居之中，隨手可得，還可以坐著它來隱藏殺機，就算被警察抓了也告不了你，真不愧為七大武器之首！」&lt;/p&gt;

&lt;p&gt;這摺凳，和我之前看的 Joe &amp;amp; Bryan 部落格文章、專書、大人學及專案管理課程，相互呼應，容易消化。心中更隱隱覺得，這與我這陣子研究取材的「變革」主題，有許多可相互參酌之處。好的心智框架，委實妙用無窮。&lt;/p&gt;

&lt;p&gt;這 25 枚關鍵字，我收下了。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&amp;hellip; &amp;hellip;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;最後五個關鍵字，是整段講座的總結。看似單純，甚至古板蠢笨，但卻是非常踏實的人生哲學，寧靜而致遠。&lt;/p&gt;

&lt;p&gt;尤其是最後一個關鍵字，一秀出來，所有的人都驚呆了：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-26-30.png&#34; alt=&#34;關鍵字 26~30&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-26-30.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;關鍵字 26~30&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;如果直接把這個字端出來，大概百分之兩百的觀眾都會當場大喊：「我又不是來這裡聽心海羅盤的⋯⋯」。不過，花了 180 分鐘，聽了六段故事，蒐集了 30 個「別總是直球對決」的關鍵字，就會覺得這是肺腑之言。沒有置身現場，很難體會這種久違的感動。&lt;/p&gt;

&lt;p&gt;回頭來看，這 30 個關鍵字，的確都是從「心存善念」為出發點，沒有什麼鑽營算計他人的成分，的的確確都是王道、正道。&lt;/p&gt;

&lt;p&gt;我們有多久沒有相信單純的「善」的力量，而競逐於鑽營取巧？&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;收下這 30 枚關鍵字，以後遇到自己或他人的人生難題，我會回想這六段故事裡面的主人翁 Joe，是如何痛苦掙扎、如何認清局勢、如何壯士斷腕、如何砍掉重練、如何潛龍勿用利見大人終日乾乾，相信一定能夠喚起沈睡已久的變化球、慢速球、伸卡球、曲球。&lt;/p&gt;

&lt;p&gt;人生，除了「直球對決」之外，其實還有更好的選擇呀。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>精讀 vs 泛讀</title>
      <link>//william-yeh.net/post/2016/08/reading-vs-extensive-reading/</link>
      <pubDate>Tue, 02 Aug 2016 23:30:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/08/reading-vs-extensive-reading/</guid>
      
        <description>&lt;p&gt;每隔一陣子，就有「精讀」與「泛讀」孰優孰劣之辯論。&lt;/p&gt;

&lt;p&gt;其實，就像陳年經典《&lt;a href=&#34;http://www.books.com.tw/products/0010226097&#34;&gt;如何閱讀一本書&lt;/a&gt;》所說，兩種技巧都很需要：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;閱讀的速度並非只有單一的一種，重點在如何讀出&lt;strong&gt;不同的速度感&lt;/strong&gt;，知道在閱讀某種讀物時該用什麼樣的速度。&lt;/p&gt;

&lt;p&gt;更好的秘方是：在閱讀一本書的時候，&lt;strong&gt;慢不該慢到不值得，快不該快到有損於滿足與理解。&lt;/strong&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;快或慢，端看閱讀的當下，自我定位是在哪一層次：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;基礎閱讀 (elementary reading)&lt;/li&gt;
&lt;li&gt;檢視閱讀 (inspectional reading)、系統化略讀 (skimming systematically)&lt;/li&gt;
&lt;li&gt;分析閱讀 (analytical reading)&lt;/li&gt;
&lt;li&gt;主題閱讀 (syntopical reading)、比較閱讀 (comparative reading)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;此書主張，主動的讀者，至少要掌握到「檢視閱讀」的層次：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;檢視閱讀永遠是充滿&lt;strong&gt;主動&lt;/strong&gt;的，那是需要努力，而非毫不費力的閱讀。&lt;/p&gt;

&lt;p&gt;只要是超越「基礎閱讀」的層次，閱讀的藝術，就是要&lt;strong&gt;以適當的順序，提出適當的問題&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;提出什麼問題呢？至少有四個主要問題：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;整體來說，這本書到底在談些什麼？&lt;/li&gt;
&lt;li&gt;作者細部說了什麼，怎麼說的？&lt;/li&gt;
&lt;li&gt;這本書說得有道理嗎？是全部有道理，還是部分有道理？&lt;/li&gt;
&lt;li&gt;這本書跟你有什麼關係？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;《如何閱讀一本書》這本 1940 年初版、1972 年增訂再版的陳年經典，的確配得「經典」之名。這些論述，不正是後來許許多多讀書方法的書籍反覆闡釋的閱讀角度嗎？&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/on-reading.jpg&#34; alt=&#34;書籍閱讀法的書單&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/on-reading.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;書籍閱讀法的書單&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;泛讀&#34;&gt;泛讀&lt;/h2&gt;

&lt;p&gt;十倍速時代，資訊大爆炸。近年來，泛讀的聲勢高漲，不乏重量級人士站台背書。&lt;/p&gt;

&lt;p&gt;像 Zen大 在〈&lt;a href=&#34;https://zen1976.com/post-1367640680/&#34;&gt;讀書真的重質不重量嗎？&lt;/a&gt;〉提到：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;精讀派的朋友總是愛說，讀書重質不重量，但沒有量的累積，其實質變是發生不了的，因為你用來理解書中知識的基本能力都不具備！&lt;/p&gt;

&lt;p&gt;舉個例子好了，要讀懂海德格或胡賽爾，得先讀多少東西當預備知識？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;他甚至還開了一門「&lt;a href=&#34;https://zen1976.com/post-1360633850/&#34;&gt;超快速讀書法：教你一年輕鬆讀完三百本書&lt;/a&gt;」公開班呢！&lt;/p&gt;

&lt;h3 id=&#34;泛讀流派&#34;&gt;泛讀流派&lt;/h3&gt;

&lt;p&gt;泛讀也有許多流派。&lt;/p&gt;

&lt;p&gt;傳統的速讀派，最核心的技術就是革除默唸、眼腦直映。這是與傳統語文教育大相逕庭（如果稱不上「牴觸」的話）的方法。記得國中的我，被廣告吸引，主動報名楊氏速讀。一個暑假，換得終身受用的技能，很值得。&lt;/p&gt;

&lt;p&gt;體會到實用性，我也一直持續關注新的泛讀流派。我發現，許多泛讀流派都以《&lt;a href=&#34;http://www.books.com.tw/products/0010226097&#34;&gt;如何閱讀一本書&lt;/a&gt;》的「主題閱讀」為目標，但實施過程則改以「檢視閱讀」、「系統化略讀」之類的手法為之。以本田直之《&lt;a href=&#34;http://www.books.com.tw/products/0010378503&#34;&gt;槓桿閱讀術&lt;/a&gt;》為例：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;本書所強調的是「&lt;strong&gt;累積效果&lt;/strong&gt;」。在我常光顧的書店裡，據說一個月重新排列上架的商業類新書超過五百本。當然，也有大量之前出版過的舊書刊。雖然要追上全部的書籍，是不可能的，但是，靠著讀幾本同樣主題的書籍，常常從新書中取得資訊，你就&lt;strong&gt;漸漸&lt;/strong&gt;能掌握各種作者的想法。從這樣的過程中，你將會選出適合自己的讀物，這也是多讀的優點所在。&lt;/p&gt;

&lt;p&gt;你一旦這麼想，縱然對於現在所讀的書的內容還不能融會貫通，但這些內容的&lt;strong&gt;累積&lt;/strong&gt;會變成你的個人資產。接著，可自由運用的時間逐漸增加，最後得到一百倍的回報，並和你的「金融資產」增加連結在一起。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;也有像神田昌典、勝間和代等人大力提倡的，乍看之下頗為詭異的「&lt;a href=&#34;http://www.books.com.tw/products/0010560460&#34;&gt;影像閱讀法&lt;/a&gt;」。因為太詭異了，甚至有點違反直覺，值得獨立挑出來談。&lt;/p&gt;

&lt;h3 id=&#34;影像閱讀法&#34;&gt;影像閱讀法&lt;/h3&gt;

&lt;p&gt;Paul R. Scheele 研發的影像閱讀法 (&lt;a href=&#34;https://www.amazon.com/dp/0925480681/ref=cm_sw_r_tw_dp_x_3HA5yb4M62972&#34;&gt;Photo Reading&lt;/a&gt;)，訴求是：我們可以像照相機一樣，將任何讀物內容快速地攝入腦袋中。&lt;/p&gt;

&lt;p&gt;前提是，請遵照影像閱讀法的五大步驟：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/photo-reading.jpg&#34; alt=&#34;影像閱讀法的五大步驟&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/photo-reading.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;影像閱讀法的五大步驟&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;即使你不信這一整套方法，也可以只把它當成工具箱，擇優取用。譬如說，我雖然並未練出所謂的「懸頁」、「軟視」、「攝像焦點」狀態，但其他技巧，卻是十分受用。&lt;/p&gt;

&lt;p&gt;就我有限的經驗來說，影像閱讀法的&lt;strong&gt;提問&lt;/strong&gt;及&lt;strong&gt;活化&lt;/strong&gt;方法很管用：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;用影像閱讀看選擇的書。在閱讀之前，一定要明確說出&lt;strong&gt;目的&lt;/strong&gt;。閱讀之後，請進行結束時的&lt;strong&gt;自我肯定&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;優秀的閱讀者總是會抱持著&lt;strong&gt;目的意識&lt;/strong&gt;，&lt;strong&gt;向作者提出問題&lt;/strong&gt;，而且在閱讀時保持高度的&lt;strong&gt;精神集中&lt;/strong&gt;。「精神集中」是積極閱讀者的必要條件。&lt;/p&gt;

&lt;p&gt;要誘導腦部把新的技能反映在行動上。型態療法的治療師把它稱為「&lt;strong&gt;意想遊戲&lt;/strong&gt;」，也就是在心裡面模擬該項行為，而那會成為傳送給腦部的信號，引發所要的行動。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;影像閱讀式的&lt;strong&gt;主題閱讀&lt;/strong&gt;也很有意思：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;阿德勒在《如何閱讀一本書》表示，進行同主題閱讀時使用的思考技巧，是閱讀者的終極目標。因此我們把十倍速影像閱讀法的技巧融入他們的技巧中，讓各式各樣的想法可以在更短的時間內有效整合。&lt;/p&gt;

&lt;p&gt;每次進行同主題閱讀時，都有幾百個或幾千個頭腦，累積幾萬個小時的努力和經驗來幫助你達成目標。當你感覺到這種強大的力量時，就能夠深深體會到同主題閱讀的美妙滋味。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;從這裡可看出，影像閱讀法也是在對《如何閱讀一本書》致敬，儘管細部手法不同。&lt;/p&gt;

&lt;h2 id=&#34;精讀&#34;&gt;精讀&lt;/h2&gt;

&lt;p&gt;其實我最喜歡的是精讀。對我來說，泛讀是不得已的；是找不到值得精讀的對象，或是還沒把自己拉拔到足以精讀的程度，才做的權宜之計。&lt;/p&gt;

&lt;p&gt;找到值得的對象，也自我裝備好了，我往往直接切換成精讀模式。&lt;/p&gt;

&lt;p&gt;就以我的本職學能「軟體開發」為例吧。&lt;em&gt;Ｎ&lt;/em&gt; 年前那本《資訊游俠列傳》的專訪文中就指出：我的電腦書不多，或者說，相對於非電腦書，其實比例不算高。&lt;/p&gt;

&lt;p&gt;怎・麼・可・能？&lt;/p&gt;

&lt;p&gt;答案很簡單，對於電腦專業，我是精讀取向。&lt;/p&gt;

&lt;p&gt;從高中時代愛不釋手的 &lt;a href=&#34;https://en.wikipedia.org/wiki/The_C_Programming_Language&#34;&gt;K&amp;amp;R 第二版&lt;/a&gt;，到研究所時代翻譯的 C++ FAQ、&lt;a href=&#34;http://www.books.com.tw/products/0010181914&#34;&gt;&lt;em&gt;The C++ Programming Language&lt;/em&gt;&lt;/a&gt;、&lt;a href=&#34;http://www.tenlong.com.tw/items/9572054112?item_id=997944&#34;&gt;GoF&lt;/a&gt;，莫不是硬上加硬的原典磚頭。&lt;/p&gt;

&lt;p&gt;磚頭書，不必以多取勝。&lt;/p&gt;

&lt;p&gt;為什麼會選擇濃縮原汁，不選擇稀釋飲品？或許是深受王鼎鈞《&lt;a href=&#34;http://www.books.com.tw/products/0010043322&#34;&gt;開放的人生&lt;/a&gt;》的影響吧：「以大為貴／&lt;strong&gt;看山要看大山。看書要看大書&lt;/strong&gt;。」&lt;/p&gt;

&lt;p&gt;這並不容易，是理解力與意志力的考驗；但攻克之後，為目四顧，登泰山而小天下。反觀坊間書肆一大堆稀釋品，高下立判。（而且，引經據典回答別人的問題，格外有成就感⋯⋯）&lt;/p&gt;

&lt;p&gt;會當凌絕頂，一覽眾山小。有為者，亦若是。&lt;/p&gt;

&lt;p&gt;陸象山說得好：「學苟知本，六經皆我註腳。」&lt;/p&gt;

&lt;h2 id=&#34;泛讀高手-其實也是精讀高手&#34;&gt;泛讀高手，其實也是精讀高手&lt;/h2&gt;

&lt;p&gt;其實，即使是鼓吹大量閱讀、主題閱讀的人，也不敢忽視精讀的重要性。&lt;/p&gt;

&lt;p&gt;他們懂得把精讀的能量放在刀口上。&lt;/p&gt;

&lt;p&gt;像《&lt;a href=&#34;http://www.books.com.tw/products/0010534848&#34;&gt;40歲，好日子才開始&lt;/a&gt;》在推薦主題式讀書法之後，下一頁旋即話鋒一轉：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;很多年長一輩的人後悔當初沒有好好看些書，最多的理由就是「忙得找不出時間」。不想讓人瞧不起，可是沒有時間讀書的人，我建議使用「經典式閱讀法」。&lt;/p&gt;

&lt;p&gt;先找到自己認為最「經典」的書，有空隨手就拿起來讀，以這本書為「基本參考書」，專讀這一本。&lt;/p&gt;

&lt;p&gt;找到自己的「經典」書籍，反覆閱讀到&lt;strong&gt;幾乎將這本書熟記&lt;/strong&gt;的程度。到自己可以&lt;strong&gt;以這本書做演講&lt;/strong&gt;的地步，這樣的熟讀方式有其意義在。&lt;/p&gt;

&lt;p&gt;讀書量多少當然有其影響力。可是如果沒有時間讀很多書的人，可以試試讀熟一本書，熟到幾乎可以背出來的方式，內容確確實實可以完全被自己吸收。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就連大力鼓吹影像閱讀法的勝間和代，在《&lt;a href=&#34;http://www.books.com.tw/products/0010434249&#34;&gt;新．知識生產術&lt;/a&gt;》中，也鼓勵挑戰一些磚頭書：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;最近，大家愈來愈不看書了，太厚的書、字太小的書、太貴的書，幾乎都賣不掉。&lt;/p&gt;

&lt;p&gt;但正因為如此，才更要挑戰那些大家不去看的書，這樣才能建立起與不挑戰的人之間的差異。&lt;/p&gt;

&lt;p&gt;讀書時，如果只讀暢銷書，可能會變成只吃精緻的加工食品一樣，因此希望各位偶爾也要像吃吃略微澀口的新鮮蔬菜一樣，挑戰一下難讀的書籍。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就連大力鼓吹影像閱讀法的神田昌典，在《&lt;a href=&#34;http://www.books.com.tw/products/0010473958&#34;&gt;10 年後會留在書架上的 100 本書&lt;/a&gt;》中，出人意料的對宅急便之父&lt;a href=&#34;http://www.books.com.tw/products/0010675380&#34;&gt;小倉昌男的書&lt;/a&gt;推崇備至。評價高到，不僅要用眼睛看這本書，甚至還要&lt;strong&gt;用嘴巴唸出聲音來&lt;/strong&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;這本書簡直就是訂定經營戰略的最佳教科書，我很想要各位在閱讀各種經營戰略的理論書之前，先拿起本書「讀出聲音來」。&lt;/p&gt;

&lt;p&gt;一字一句讀出聲音，每天早上起床後先花十分鐘讀出來。這本書甚至於到了「只要你能夠到達流利讀出來的地步，自然就能夠體會到如何制定經營戰略」的層次。&lt;/p&gt;

&lt;p&gt;如果想成為他那樣的商業人，就把姿勢坐正、讀出聲音來！&lt;/p&gt;

&lt;p&gt;讀出聲音，可以把它的經營者魂，刻畫在我們的血肉上。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我想，一個人一生中，總要有幾本值得讓我們「把姿勢坐正、讀出聲音來」的精讀書籍呀。&lt;/p&gt;

&lt;h2 id=&#34;最好的記憶&#34;&gt;最好的記憶&lt;/h2&gt;

&lt;p&gt;好書的營養成分，要銘刻在內心。&lt;/p&gt;

&lt;p&gt;唐諾在《&lt;a href=&#34;http://www.books.com.tw/products/0010286827&#34;&gt;閱讀的故事&lt;/a&gt;》如是說：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;最好的記憶，不是一個單獨的、孤立無援的點或原子。最好的記憶，不管是經由刻意地背誦或自然而然的記得，總有它和我們內心&lt;strong&gt;共鳴共振&lt;/strong&gt;的所謂&lt;strong&gt;印象深刻成分&lt;/strong&gt;，它對我們而言總是有線索、有來歷甚至是有（暫時）秩序的，你知道該把它安置在自己記憶的哪個「櫃子」裡，他日要用時你也大概知道存放何處可以把它找出來。&lt;/p&gt;

&lt;p&gt;而因應著如此觸及內心的美好共鳴，通常在那相遇的驚心動魄一刻，你總會要自己&lt;strong&gt;暫時放緩腳步&lt;/strong&gt;甚至停下來。&lt;/p&gt;

&lt;p&gt;嚴格來說，惟有通過如此的記憶過程，那東西才完完全全變成「你的」，甚至它不再只是記憶了，而是你生命的一部份、身體的一部份，彷彿已從抽象的訊息，轉變成實體的筋骨肌理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;值此境界，泛讀或精讀，已不再重要。物我交融，得意而忘言。&lt;/p&gt;

&lt;p&gt;在到達此境界之前，還是先乖乖修煉閱讀的技術吧。&lt;/p&gt;

&lt;p&gt;這是一生受用不盡的技術。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>專業態度的養成</title>
      <link>//william-yeh.net/post/2016/07/professional-attitude/</link>
      <pubDate>Sat, 30 Jul 2016 17:35:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/07/professional-attitude/</guid>
      
        <description>&lt;p&gt;最近在面試資深軟體工程師。幾次下來，對幾家公司培養出來的員工素質，有個概括印象了（或許也帶點偏見）。&lt;/p&gt;

&lt;p&gt;一個最顛覆既定印象的心得是：不是在大公司就一定學得深，不是在新創就一定學得廣。&lt;/p&gt;

&lt;p&gt;重點仍在於自己。在於自己有沒有「&lt;strong&gt;系統思考&lt;/strong&gt;及&lt;strong&gt;換位思考&lt;/strong&gt;的&lt;strong&gt;自覺&lt;/strong&gt;及&lt;strong&gt;行動&lt;/strong&gt;」。&lt;/p&gt;

&lt;p&gt;或者再濃縮成：在於「&lt;strong&gt;專業態度&lt;/strong&gt;」。&lt;/p&gt;

&lt;h2 id=&#34;專業-技能-vs-態度&#34;&gt;專業：技能 vs 態度&lt;/h2&gt;

&lt;p&gt;專業，有技能面及態度面。&lt;/p&gt;

&lt;p&gt;「專業技能」的成長，只要選對適性的方向，早晚都功不唐捐，尤其在學習資源既廣且深的今天。&lt;/p&gt;

&lt;p&gt;但「專業態度」的成長，除了操之於人的機運（天降的好運氣，或天殺的壞運氣），更多是取決於個人的&lt;strong&gt;自覺&lt;/strong&gt;及&lt;strong&gt;行動&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;專業技能固然重要，但是，能夠讓自己從流水帳的制式履歷表欄位中脫穎而出的，終究是專業態度。&lt;/p&gt;

&lt;p&gt;很準。只要針對每一份履歷表，個別客製化追問幾句，幾乎就能分辨出哪些人有下意識追求專業態度的成長。&lt;/p&gt;

&lt;h2 id=&#34;自覺&#34;&gt;自覺&lt;/h2&gt;

&lt;p&gt;專業態度的層面非常多，我最在意的是「&lt;strong&gt;系統思考&lt;/strong&gt;及&lt;strong&gt;換位思考&lt;/strong&gt;的&lt;strong&gt;自覺&lt;/strong&gt;及&lt;strong&gt;行動&lt;/strong&gt;」。&lt;/p&gt;

&lt;p&gt;這類專業態度，由誰來教？&lt;/p&gt;

&lt;p&gt;這不是公司能夠主動教你的。大公司不見得會主動教你，也未必所有公司都有像杜書伍、何飛鵬、稻盛和夫這樣的 mentor，不斷為文內訓（還集結出書）。資源有限的小公司，更是如此。&lt;/p&gt;

&lt;p&gt;如果公司沒有這樣的 mentor，就自己往外找吧。從優質社群找，從有信譽的名師、課程找，或者，從書本找。&lt;/p&gt;

&lt;p&gt;其實，許多情況，回頭讀讀幾本好書，並實踐，你就有許多 mentor 加持了。&lt;/p&gt;

&lt;p&gt;試想：有 Andrew Grove、Peter Drucker、Stephen Covey 當你的私人 mentor，是不是更靠譜？&lt;/p&gt;

&lt;p&gt;少了自覺，就會像我某篇舊文〈南柯一夢二十年〉講的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;遇到這樣的個案。&lt;/p&gt;

&lt;p&gt;第一堂課：「我有 20 年的工作經驗。」&lt;/p&gt;

&lt;p&gt;最後一堂：「現在我才發現，我只有 1 年的工作經驗，只不過重複了 20 年。」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要避免 20 年後發出這樣的喟嘆，就請立刻開始自覺培養起「&lt;strong&gt;系統思考&lt;/strong&gt;」及「&lt;strong&gt;換位思考&lt;/strong&gt;」的專業態度吧。&lt;/p&gt;

&lt;h2 id=&#34;行動&#34;&gt;行動&lt;/h2&gt;

&lt;p&gt;如果工作場域沒有專業態度的學習對象（不要以為大公司就一定有這樣足以學習的對象），可以改從優質社群學，可以從有信譽的名師、課程學，或者，從書本學。&lt;/p&gt;

&lt;p&gt;其實我一直覺得，學生時代講究的預習、複習、作業、考試循環，進了職場，一樣要有這種自我進修意識。&lt;/p&gt;

&lt;p&gt;學生時代，有定期的作業及考試督促你複習及活用；進了職場，沒人出作業練習題給你，該如何&lt;strong&gt;預習&lt;/strong&gt;＋&lt;strong&gt;複習&lt;/strong&gt;＋&lt;strong&gt;活用&lt;/strong&gt;？這就是身為在職場上打滾的成年人，該發揮創意及意志力的地方。像「換位思考」，就是一種在&lt;strong&gt;想像層面&lt;/strong&gt;的預習＋複習。&lt;/p&gt;

&lt;p&gt;新思惟他們有一句我很喜歡的 slogan：「&lt;a href=&#34;http://speak2015.innovarad.tw/create_your_stage/&#34;&gt;沒有機會，製造機會；沒有舞台，搭起舞台！&lt;/a&gt;」這也算是一種主動搭起的&lt;strong&gt;活用&lt;/strong&gt;機會。&lt;/p&gt;

&lt;p&gt;自己搭起實體的或想像的舞台，行動，操練，更有機會變成習慣，變成自覺。&lt;/p&gt;

&lt;h2 id=&#34;問與答&#34;&gt;問與答&lt;/h2&gt;

&lt;p&gt;網路上充斥著「成長」及「求職」的問與答。主動分享成長經驗者有之，但更多的是發問。&lt;/p&gt;

&lt;p&gt;發問是好事，但也要留意在網路上發問的局限性。就像 Joe 的〈&lt;a href=&#34;https://www.darencademy.com/article/view/id/7214&#34;&gt;如何問個好問題&lt;/a&gt;〉一文所說，要提問時，請把握下面五大重點：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;背景故事提供清楚。&lt;/li&gt;
&lt;li&gt;自己要先想一下自己要甚麼，這是別人無法幫你判斷的。&lt;/li&gt;
&lt;li&gt;不要問主觀判斷很重的問題，除非你只是想聊天與抱怨。&lt;/li&gt;
&lt;li&gt;不要讓問題過度開放，列出「選項」才能聽到客觀分析。&lt;/li&gt;
&lt;li&gt;問題討論要自行收斂。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;否則，討論串很容易一下子樓就歪了。&lt;/p&gt;

&lt;p&gt;正因網路問答有如此高的侷限，有時候，回頭讀讀幾本好書，並實踐，會比支離破碎又缺乏背景脈絡的網路問答，更有效。&lt;/p&gt;

&lt;h2 id=&#34;讀書&#34;&gt;讀書&lt;/h2&gt;

&lt;p&gt;網路上充斥著「成長」及「求職」的問與答。真心建議：何不回過頭來，好好讀讀幾本書？築起合適的&lt;strong&gt;心智框架&lt;/strong&gt;，就能在許多狀況下不假外求。&lt;/p&gt;

&lt;p&gt;聚焦於個人專業態度的成長，是值得的自我投資。&lt;/p&gt;

&lt;p&gt;在我的書架上，總是有一塊精華地帶，專門擺放這類專業態度的書籍。遇到疑惑，就來此寶地諮詢或印證。有時候，甚至只要把這幾本書的目錄瀏覽過一遍，就有吃下一顆定心丸的效果。&lt;/p&gt;

&lt;p&gt;沒騙你，真的光是目錄，就足以讓自己「低回留之，不能去云」。&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/07/prof-attitude-books.jpg&#34; alt=&#34;專業態度的書籍&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/07/prof-attitude-books.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;專業態度的書籍&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這類書籍，務實，不打高空，很容易套用在自己的工作場域，操練「&lt;strong&gt;系統思考&lt;/strong&gt;」及「&lt;strong&gt;換位思考&lt;/strong&gt;」的專業態度。&lt;/p&gt;

&lt;p&gt;你我的書單未必有交集，但重點是：取法乎上，請儘早讓自己有「&lt;strong&gt;系統思考&lt;/strong&gt;及&lt;strong&gt;換位思考&lt;/strong&gt;的&lt;strong&gt;自覺&lt;/strong&gt;及&lt;strong&gt;行動&lt;/strong&gt;」。&lt;/p&gt;

&lt;p&gt;這是預習，也是複習。&lt;/p&gt;

&lt;h2 id=&#34;給不愛看書的人&#34;&gt;給不愛看書的人⋯⋯&lt;/h2&gt;

&lt;p&gt;如果實在懶得啃書，比較想上課的話，以下幾門課，都是大補帖！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;關於換位思考：&lt;a href=&#34;https://www.darencademy.com/activity/view/id/15533&#34;&gt;A101 職場大人學&lt;/a&gt; （推薦文：&lt;a href=&#34;//william-yeh.net/post/2015/09/upgrade-adult-thinking/&#34;&gt;升級成大人版的思維作業系統&lt;/a&gt; &amp;amp; &lt;a href=&#34;//william-yeh.net/post/2016/06/upgrade-adult-thinking-part2/&#34;&gt;轉大人，Part 2&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;關於系統思考：&lt;a href=&#34;https://www.projectup.net/activity/view/id/7689&#34;&gt;102 流程設計與跨部門溝通&lt;/a&gt; （推薦文：&lt;a href=&#34;http://school.soft-arch.net/blog/112281/learn-process-mgmt-by-game&#34;&gt;向遊戲學習&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;關於職涯：&lt;a href=&#34;https://www.darencademy.com/activity/view/id/16419&#34;&gt;A103 履歷優化實戰班&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⋯⋯但是，良心建議，上完課，灌完頂之後，還是該回頭看看書的啦⋯⋯&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>轉大人，Part 2</title>
      <link>//william-yeh.net/post/2016/06/upgrade-adult-thinking-part2/</link>
      <pubDate>Sat, 04 Jun 2016 09:54:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/06/upgrade-adult-thinking-part2/</guid>
      
        <description>

&lt;p&gt;在我所處的軟體研發圈中，最近也流行起「&lt;a href=&#34;http://www.gigihuang.com/2016/05/22/agile_meetup_show_dont_tell/&#34;&gt;18+ Adult Manifesto&lt;/a&gt;」這種話題。&lt;/p&gt;

&lt;p&gt;這就不得不佩服 J&amp;amp;B 取的「大人學」品牌名字，是多麼有遠見呀！&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/child-vs-adult.jpg&#34; alt=&#34;小孩 vs 大人&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/child-vs-adult.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;小孩 vs 大人&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;自從九個月前參加【&lt;a href=&#34;https://shop.darencademy.com/product/view/id/28&#34;&gt;A101 職場大人學：職場人際關係與優勢策略&lt;/a&gt;】之後，不僅在 Facebook 私密社團繼續交流，我們同梯更舉辦自發性聚會，定期交換彼此的職場及閱讀心得。算是重要的&lt;strong&gt;族人&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;這陣子，旁觀別人形形色色的遭遇，不禁深自慶幸：用 14 PDU 換來 Bryan 積蓄 15 年的內功，何等划算！雖不敢說從此就無風無浪，但至少開了眼、醒了腦，懂得用更系統化、更跳離本位的角度來審視事情／世情，從那張表格的「苦主」晉升到⋯⋯自認進入前三個等級了（雖然偶爾還是會退化到第四等級⋯⋯）。&lt;/p&gt;

&lt;p&gt;箇中關鍵，真的就像 Bryan 反覆叮嚀的那「xx力」三字訣。&lt;/p&gt;

&lt;h2 id=&#34;內化&#34;&gt;內化&lt;/h2&gt;

&lt;p&gt;對老師最大的回饋，就是確實將老師所傳授的東西，反覆演練、運用，從思考及實踐中，努力內化成本能反應。&lt;/p&gt;

&lt;p&gt;如何確認自己內化的程度呢？&lt;/p&gt;

&lt;p&gt;這門課有學長姐回訓機制。回鍋再當一次學生，再度面對寫實案例，看看自己是否比第一次上課時更有身為「大人」的自覺，更能在所謂「關鍵四秒」中，迅速勾勒「局」與「勢」的關係，不啻是一場刺激的實境挑戰。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/a101-handouts.jpg&#34; alt=&#34;回訓&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/a101-handouts.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;回訓&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;我還偷偷給自己設限。&lt;/p&gt;

&lt;p&gt;老子曰：「五色令人目盲，五音令人耳聾。」&lt;/p&gt;

&lt;p&gt;因此，最近在思考問題、演講授課時，越來越喜歡從原始定義或目標下手。我認為，原理通了，邏輯通了，再加一點點創意及想像力，很多東西都是順理成章就推導得出來。&lt;/p&gt;

&lt;p&gt;於是，我想給自己一個挑戰：在回訓課堂上，要先自我歸零，就當自己是第一次來上課的學生；要自我克制，不要直接偷拿 Bryan 以前開釋過的大絕招來應付考古題。&lt;/p&gt;

&lt;p&gt;重點是思維角度，不是招數。&lt;/p&gt;

&lt;p&gt;結果呢？&lt;/p&gt;

&lt;p&gt;回訓，仍然感受到強烈的衝擊，仍然是點頭如搗蒜（所以，Bryan 的 15 年功力，真是超強！再聽一次，仍然收穫滿滿）。&lt;/p&gt;

&lt;p&gt;也很欣慰，原來自己已經不知不覺內化了某些部分。我沒有辜負去年在〈&lt;a href=&#34;//william-yeh.net/post/2015/09/upgrade-adult-thinking/&#34;&gt;升級成大人版的思維作業系統&lt;/a&gt;〉做的自我期許。&lt;/p&gt;

&lt;h2 id=&#34;訴求-vs-需求-vs-目標&#34;&gt;訴求 vs 需求 vs 目標&lt;/h2&gt;

&lt;p&gt;回訓，不是乖乖聽課就好，還要協助&lt;del&gt;小鮮肉&lt;/del&gt;學弟妹進行小組討論。面對組員，就像面對去年的自己，有趣之餘，也附帶了些引導（但不過度介入）的責任。&lt;/p&gt;

&lt;p&gt;為了因應可能被組員提出的問題，也為了自我成長，我也挑選想再深度探索的主題：&lt;a href=&#34;https://en.wikipedia.org/wiki/Evaporating_Cloud&#34;&gt;衝突圖&lt;/a&gt;，在課前先自我延伸學習。&lt;/p&gt;

&lt;p&gt;不過，在&lt;a href=&#34;https://en.wikipedia.org/wiki/Eliyahu_M._Goldratt&#34;&gt;高德拉特&lt;/a&gt;的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Theory_of_constraints&#34;&gt;TOC (Theory of Constraints)&lt;/a&gt; 發展史中，&lt;a href=&#34;https://en.wikipedia.org/wiki/Evaporating_Cloud&#34;&gt;衝突圖&lt;/a&gt;其實是隸屬於更大的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Thinking_processes_(theory_of_constraints)&#34;&gt;Thinking Process&lt;/a&gt; 當中的一環。為了更充分掌握這項思考方式，便將書架上擺了超過十年的高德拉特系列書籍：《目標》、《絕不是靠運氣》、《關鍵鏈》拿出來重讀一次，順便也讀一讀岸良裕司的兩本詮釋書籍。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/cloud-books.jpg&#34; alt=&#34;岸良裕司的書&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/cloud-books.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;岸良裕司的書&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;學了 TOC 的 Thinking Process 之後，不知不覺很喜歡思辨幾個層次的區別：「想要 vs 需要」、「訴求 vs 需求 vs 目標」。這也逐漸內化成我的思考工具。&lt;/p&gt;

&lt;p&gt;在此也要非常感謝 Bryan 在這門課指導的 TOC 衝突圖，算是我聽過最簡潔、最生動的詮釋。這次回頭再看那堆書，就懊惱：怎麼自己當年讀不出味道呢？&lt;/p&gt;

&lt;p&gt;好的引導，真的很重要。聽君一席話，勝讀十年書！&lt;/p&gt;

&lt;h2 id=&#34;集點卡&#34;&gt;集點卡&lt;/h2&gt;

&lt;p&gt;這次回訓，某些地方給了我另一個層次的衝擊。「集點卡」是其中之一。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/loyalty-card.jpg&#34; alt=&#34;Bryan 集點卡&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/loyalty-card.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Bryan 集點卡&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;看了這張集點卡，我相信 Bryan 所說的「我從 15 年前就在準備這門課了！」真實不虛。&lt;/p&gt;

&lt;p&gt;每當面臨職涯抉擇時，多少人腦海中，有這麼一張清晰的集點卡呢？&lt;/p&gt;

&lt;p&gt;這是很值得嚴肅面對的問題。&lt;/p&gt;

&lt;p&gt;去年上了這門課之後，我的確開始逐漸自我裝備，但不夠清晰。這次回訓，再度看到這張圖，也再度點燃集點的熱誠。&lt;/p&gt;

&lt;h2 id=&#34;做自己&#34;&gt;做自己&lt;/h2&gt;

&lt;p&gt;即使是同一位老師講同一門課，但只要學生組成不同，就會有不同的氣場及火花。&lt;/p&gt;

&lt;p&gt;這次回訓，有幾位同學針對「做自己」這一點，展開一連串的熱烈提問。&lt;/p&gt;

&lt;p&gt;現場激起的火花，真的很過癮！連 Bryan 都有感而發，隔天就寫出了〈&lt;a href=&#34;https://www.darencademy.com/article/view/id/16421&#34;&gt;所謂做自己，就是用自己的意志扮演自己想要的角色&lt;/a&gt;〉這篇文章。&lt;/p&gt;

&lt;p&gt;某些觀念，如果是不約而同被我私淑對象提到，那就一定值得我認真對待。&lt;/p&gt;

&lt;p&gt;其一，Bryan 課堂闡述的職場人際基礎：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/job-view.jpg&#34; alt=&#34;關於職場這個局&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/job-view.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;關於職場這個局&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;其二，阿德勒的「課題分離」原則。&lt;/p&gt;

&lt;p&gt;或許是這陣子被不同種族的&lt;strong&gt;族人&lt;/strong&gt;間接推坑（像&lt;a href=&#34;https://i-chentsai.innovarad.tw/2015/05/alfred_adler.html&#34;&gt;這位&lt;/a&gt;及&lt;a href=&#34;http://teddy-chen-tw.blogspot.com/2015/07/blog-post_30.html&#34;&gt;這位&lt;/a&gt;），讀了《&lt;a href=&#34;http://i-chentsai.innovarad.tw/2015/05/alfred_adler.html&#34;&gt;被討厭的勇氣&lt;/a&gt;》，知道適度的「課題分離」是件好事，所以，腦袋中已經埋下這些種子：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我們必須站在「這是誰的課題？」的觀點，將自己和他人的課題切割開來。&lt;/p&gt;

&lt;p&gt;所有人際關係中的紛爭，差不多都是因為一腳踩進人家的課題裡，或是自己的課題遭到干涉所引起的。&lt;/p&gt;

&lt;p&gt;要區分是誰的課題，方法很簡單，請想一想「因為這個決定而帶來的結果，最後會由誰來承受」？&lt;/p&gt;

&lt;p&gt;別人不是為了滿足你的期望而活。&lt;/p&gt;

&lt;p&gt;關於自己的人生，你所能做的只有「選擇一條自認為最好的路」。別人要對你的選擇做出什麼樣的評論，這是別人的課題，你是無法干預的。&lt;/p&gt;

&lt;p&gt;如果你無法不在意他人的評價、無法不害怕被人討厭，也不想付出可能得不到認同的代價，就無法貫徹自己的生活方式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其三，高德拉特的「清晰思考」觀點：&lt;/p&gt;

&lt;p&gt;

&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/toc-thinking-1.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/toc-thinking-1.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/toc-thinking-2.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/toc-thinking-2.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;從 ‪#‎A101職場大人學‬ 到《被討厭的勇氣》到高德拉特 TOC 系列，覺得腦袋整個被翻轉。&lt;/p&gt;

&lt;p&gt;誠如上面《抉擇》導讀文章所說：這是一段「不斷探索、實踐和學習」的道路。&lt;/p&gt;

&lt;p&gt;大人之路，就是一段華麗的冒險呀！&lt;/p&gt;

&lt;h2 id=&#34;觸類旁通的新眼光&#34;&gt;觸類旁通的新眼光&lt;/h2&gt;

&lt;p&gt;最近，為了準備幾場專題演講，我開始重讀《&lt;a href=&#34;http://www.amazon.com/dp/0988262592/ref=cm_sw_r_tw_dp_a4p3wb0PSYY97&#34;&gt;鳳凰專案&lt;/a&gt;》這本 IT 界 DevOps 的經典小說（關於這本小說，請見我在〈&lt;a href=&#34;http://school.soft-arch.net/blog/92616/origin-of-devops-elements&#34;&gt;DevOps 核心元素的考古溯源&lt;/a&gt;〉及〈&lt;a href=&#34;http://school.soft-arch.net/blog/115652/devops-a-lean-perspective&#34;&gt;有了 Agile，為什麼還要有 DevOps？&lt;/a&gt;〉的介紹）。&lt;/p&gt;

&lt;p&gt;許多 IT 人，都是用工具主義的角度，求仙丹，求銀彈，想趕快翻到特效藥的章節；誰叫這本書故事內容，就是在宣傳「三個月就能將瀕危專案起死回生」的「一個 IT 運維的傳奇故事」呢？（其實《目標》及《絕不是靠運氣》兩本書的主角羅哥，不也是在短短三個月內就創下奇蹟嗎？）&lt;/p&gt;

&lt;p&gt;可是，這類小說，就像推理小說一樣，本來就不應該直接翻到兇手揭曉的那一頁呀。&lt;/p&gt;

&lt;p&gt;對於這陣子已經把《目標》、《絕不是靠運氣》、《關鍵鏈》重看一次的我，再回頭重看《鳳凰專案》，開始萌生另一種閱讀角度。&lt;/p&gt;

&lt;p&gt;人性的角度。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/surf.jpg&#34; alt=&#34;衝浪者的哲學&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/surf.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;衝浪者的哲學&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這次回訓，一席「衝浪者的哲學」，感覺好像把《鳳凰項目》裡面的許多情境，找到對應的鑰匙。許多推理過程，也隨之清晰起來。&lt;/p&gt;

&lt;p&gt;有夠神奇的。&lt;/p&gt;

&lt;p&gt;可見，有些東西，真的是跨產業的。尤其是人性。&lt;/p&gt;

&lt;p&gt;現在重讀《鳳凰專案》時，私底下也在替每一章取個私房標題。接下來，會再加把勁兒，自我要求：練習用 Bryan 課堂上教的分析手法，重新分析箇中情節。&lt;/p&gt;

&lt;p&gt;有一本書叫做《&lt;a href=&#34;https://shop.campus.org.tw/ProductDetails.aspx?ProductID=000401708&#34;&gt;聖經好好吃&lt;/a&gt;》，我這種做法，也算是另一種「大人學角度」的「鳳凰專案好好吃」嗎？&lt;/p&gt;

&lt;h2 id=&#34;以終為始&#34;&gt;以終為始&lt;/h2&gt;

&lt;p&gt;上完兩次課，不知不覺會變得雞婆起來，遇到親朋好友的狀況，就會推坑這門課。&lt;/p&gt;

&lt;p&gt;不過，誠如 Joe 在〈&lt;a href=&#34;https://www.darencademy.com/article/view/id/15791&#34;&gt;為何我們很難改變周圍那些愛抱怨的朋友？&lt;/a&gt;〉及〈&lt;a href=&#34;https://www.darencademy.com/article/view/id/16420&#34;&gt;怎麼才能有效安撫找你抱怨的朋友？&lt;/a&gt;〉兩篇文章的善意提醒：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;時常抱怨的人，其實抱怨的目的往往已經不是為了找到解答，而是某種隱含的自豪與炫耀。 而悲慘的境界，則是他自豪的理由！&lt;/p&gt;

&lt;p&gt;當你有朋友不斷來找你抱怨時，如果你很確定他壓根沒打算要跨出安適圈、沒打算做些自我根本上的改變，那你能帶給他最好的幫助，就是給他一個更慘的故事。 讓他們有種「原來我的人生還好」的感覺，進而會因此感覺舒坦。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;許多困境，不是訴諸簡單的自我轉念，就能解決的。這需要看懂局，也認清自己要的到底是什麼；這些都是需要高度理性的運作。&lt;/p&gt;

&lt;p&gt;自我轉念，很多人都這麼說、也這麼建議他人；可是，往往只是淪為自我催眠。最後，還是走回新亭對泣的迴圈。&lt;/p&gt;

&lt;p&gt;改變，是有方法的；但首先要先自問：自己真的想改變嗎？&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/career-goals.jpg&#34; alt=&#34;三大目的&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/career-goals.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;三大目的&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;相隔九個月，課堂一開始的「三大目的」便利貼，居然沒有變化。&lt;/p&gt;

&lt;p&gt;我相信，這應該就是我想要的。&lt;/p&gt;

&lt;p&gt;以終為始，莫忘初衷。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>從「改變」角度看《魔戒》</title>
      <link>//william-yeh.net/post/2016/05/change-viewpoint-on-lord-of-rings/</link>
      <pubDate>Wed, 25 May 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/05/change-viewpoint-on-lord-of-rings/</guid>
      
        <description>&lt;p&gt;今年一月，參加 &lt;a href=&#34;http://kojenchieh.pixnet.net/blog&#34;&gt;David Ko&lt;/a&gt; 舉辦的一場敏捷轉型活動，從中學到了一個有趣的分析工具：Lean Change Canvas。&lt;/p&gt;

&lt;p&gt;知道了一個好東西，自然要追本溯源，加深加廣。便研讀相關資料：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kojenchieh.pixnet.net/blog/post/441018775-%E7%B2%BE%E5%AF%A6%E6%94%B9%E8%AE%8A%E7%95%AB%E5%B8%83&#34;&gt;精實改變畫布&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kojenchieh.pixnet.net/blog/post/442550432-firstthing_of_agile_promotion&#34;&gt;推廣敏捷的第一要務是什麼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://leankit.com/blog/2015/02/lean-change-method/&#34;&gt;Lean Change Method: Enabling Lean and Agile Transformations at Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.safaribooksonline.com/library/view/lean-change-livelessons/9780133443912/&#34;&gt;Lean Change LiveLessons (Video Training): Achieving Agile Transformation with Kanban, Kotter, and Lean Startup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此外，也要找機會多演練、多思考，才會內化。於是，隔天我就在公司帶領小組討論任務時，現學現賣。數日後，也順便用在第二梯次 &lt;a href=&#34;http://get.soft-arch.net/ansible&#34;&gt;Ansible Workshop&lt;/a&gt; 課堂上：&lt;/p&gt;

&lt;p&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/05/lord-of-rings-example.jpg&#34; alt=&#34;Ansible Workshop 第二梯次&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/05/lord-of-rings-example.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Ansible Workshop 第二梯次&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

Quote: &lt;a href=&#34;https://twitter.com/brecht/status/686004657085231104&#34;&gt;Brecht&amp;rsquo;s Tweet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;之後，再歷經第三、四、五梯次的 Ansible Workshop 的演練引導，不僅更了解 Lean Change Canvas 適用時機，也發展出有助於聚焦的配套措施：說故事、&lt;a href=&#34;http://www.books.com.tw/products/0010463047&#34;&gt;ORID&lt;/a&gt; 及 &lt;a href=&#34;https://en.wikipedia.org/wiki/Theory_of_constraints&#34;&gt;TOC&lt;/a&gt;。畢竟 Lean Change Canvas 只是個框架，只建議出九個思考面向，但並未具體說明個別面向該如何發想及收斂——這都有待自己再融入其他更針對性的思考工具。&lt;/p&gt;

&lt;p&gt;我的方法是：先用某個耳熟能詳的故事，引介 Lean Change Canvas 九個格子的意涵。此處，我選擇大部分的人都看過電影版或小說版的《魔戒》為引子（應該是吧！），以求連結經驗。接著再拿真正要大家研討的案例，請大家各自照著 Lean Change Canvas 的九個面向去分析。最後的討論高潮，則以 ORID 的焦點討論法，及 TOC 的現況與衝突思辨手法，提煉出改變的共識。&lt;/p&gt;

&lt;p&gt;在可預見的未來，我大概不太會在課堂上，慢慢引導 Lean Change Canvas 的分析流程。因此，我把剛結束的第五梯次 Ansible Workshop 課堂錄影，擷取其中第一段【&lt;strong&gt;從「改變」角度看《魔戒》&lt;/strong&gt;】的引介內容，公開出來，給有興趣進行團隊引導的人參考。&lt;/p&gt;

&lt;p&gt;最後，要感謝 &lt;a href=&#34;http://kojenchieh.pixnet.net/blog&#34;&gt;David Ko&lt;/a&gt; 介紹 Lean Change Canvas 這麼有趣的分析框架，也要感謝過去四個梯次的 Ansible Workshop 學員，讓我有機會實際演練，反芻箇中細節。&lt;/p&gt;

&lt;p&gt;影片全長約 11 分鐘，請慢用。&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Ug5wKl8J2Ng&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>有了 Agile，為什麼還要有 DevOps？</title>
      <link>//william-yeh.net/post/2016/05/devops-a-lean-perspective/</link>
      <pubDate>Tue, 03 May 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/05/devops-a-lean-perspective/</guid>
      
        <description>&lt;p&gt;今晚，受 Agile Community Taiwan 之邀，在 &lt;a href=&#34;https://www.accupass.com/event/1604251622311845219210&#34;&gt;Agile Meetup Taipei&lt;/a&gt; 給了一場演講：【&lt;a href=&#34;http://www.slideshare.net/williamyeh/agile-devops&#34;&gt;有了 Agile，為什麼還要有 DevOps？&lt;/a&gt;】&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/05/devops-speech-cover.jpg&#34; alt=&#34;演講現場自拍&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/05/devops-speech-cover.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;演講現場自拍&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;之所以會給這場演講，是因為之前在討論區、演講、講課時，總是會收到這類的 Q&amp;amp;A：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DevOps 是不是在花大錢搞新技術？商業噱頭？&lt;/li&gt;
&lt;li&gt;DevOps 只是大雜燴？&lt;/li&gt;
&lt;li&gt;DevOps 只與 Agile 有關？&lt;/li&gt;
&lt;li&gt;DevOps 就是 Dev 把魔爪伸到 Ops 嗎？&lt;/li&gt;
&lt;li&gt;DevOps 需要改變文化嗎？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;林林總總，不是三言兩語就能回答得完整。雖然之前也寫了幾篇文章試著回答部分問題，但總是不夠全面。&lt;/p&gt;

&lt;p&gt;為了一勞永逸，我試著用以下的角度，完整闡釋個人觀點：&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      演講簡介
    
  &lt;/div&gt;
  &lt;p&gt;敏捷運動與 DevOps，有某些共同的淵源，但也有不同的偏重取向。&lt;/p&gt;

&lt;p&gt;Agile 陣營的人，常會有個疑問：「聽起來，DevOps 好像只是把 Agile 觸角從 Dev 伸到 Ops 端，只是舊瓶裝新酒？」&lt;/p&gt;

&lt;p&gt;Waterfall 陣營的人，也常會有個疑問：「聽起來，DevOps 好像只是 Agile 那一票人搞出來的；我們 Waterfall 陣營是不玩這一套的。」&lt;/p&gt;

&lt;p&gt;真的是這樣嗎？&lt;/p&gt;

&lt;p&gt;本次活動會以一些小活動、一些小短片，帶領大家從 Lean Thinking 角度，重新審視軟體研發的 value stream。回歸 DevOps 的原點，你將能夠自己給出上述問題的答案。&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;個人觀點，或許主觀，但至少給了一個出發點。尤其台灣似乎還沒有以較核心的 Lean Thinking 角度，好好探討 DevOps，乃至 Agile 的論述。看得到的，多半集中在「&lt;a href=&#34;http://wiki.mbalib.com/zh-tw/%E4%B8%83%E5%A4%A7%E6%B5%AA%E8%B4%B9&#34;&gt;消除七大浪費&lt;/a&gt;」這種角度；但 Lean Thinking 的核心原則，並不只有這個而已。&lt;/p&gt;

&lt;p&gt;我認為，軟體從業人員，有必要好好認識 Lean Thinking 的五大原則：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Value&lt;/li&gt;
&lt;li&gt;Value stream&lt;/li&gt;
&lt;li&gt;Flow&lt;/li&gt;
&lt;li&gt;Pull&lt;/li&gt;
&lt;li&gt;Perfection&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;認識這五大原則，會打通 agile、Scrum、Kanban、DevOps 等新潮名詞的任督二脈。&lt;/p&gt;

&lt;p&gt;不過，Lean Thinking 有些地方，硬是直接說理，言者諄諄，聽者藐藐；最好的方法，還是從遊戲中親身體會。所以在演講現場，我也帶大家玩一場 The Dot Game 的「William 式變形版」。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;演講的投影片在此，希望對大家有所幫助：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/williamyeh/agile-devops&#34;&gt;有了 Agile，為什麼還要有 DevOps？&lt;/a&gt;&lt;/strong&gt;
&lt;iframe
  style=&#34;width: 100%; height: 500px;&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;
  src=&#34;https://www.slideshare.net/slideshow/embed_code/61628527&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;現場實況錄影在此，全長整整 2 小時，請享用：&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/2j3eP55Oygw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>向遊戲學習</title>
      <link>//william-yeh.net/post/2016/04/learn-process-mgmt-by-game/</link>
      <pubDate>Sat, 23 Apr 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/04/learn-process-mgmt-by-game/</guid>
      
        <description>&lt;p&gt;前一篇文章〈&lt;a href=&#34;//william-yeh.net/post/2016/04/learn-from-plant-mgmt/&#34;&gt;向工廠管理致敬&lt;/a&gt;〉提到，最近為了準備一場 Agile/DevOps 演講，我特地研讀了數本原典，希望能對某些核心的思考元素來一場溯源之旅。&lt;/p&gt;

&lt;p&gt;啃原典，其實還有另一個原因：為了好好替今天要去大玩特玩的&lt;strong&gt;小火車遊戲&lt;/strong&gt;⋯⋯喔，不，是為了替今天要專程去上的一門【&lt;a href=&#34;https://www.projectup.net/activity/view/id/7689&#34;&gt;102 流程設計與跨部門溝通&lt;/a&gt;】課程預作準備。&lt;/p&gt;

&lt;p&gt;盯上這門課，其實已經很久了。只是這門課⋯⋯摘錄一段課程文案：「只有二十二個席次，因為道具很多，所以約每半年才開設一次公開班，錯過就要等很久了喔！」這是真的，上一梯次我時間不允許，所以後來緊盯著這一梯次開放報名的風吹草動，委實不易呀！&lt;/p&gt;

&lt;p&gt;上含金量這麼高的實作課程，不事先自我裝備一下，就太浪費了。&lt;/p&gt;

&lt;p&gt;當然啦，上課時，我還是盡量提醒自己要心態歸零，避免那些偷練的知識變成先入為主的反射思考，這樣才有更多 unknown unknown 可學。&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/04/102-opening.jpg&#34; alt=&#34;102 - 開場白&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/04/102-opening.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;102 - 開場白&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這門課，從實際的小火車遊戲中，讓我結結實實體會到書中講的一堆觀念：&lt;/p&gt;

&lt;p&gt;《&lt;a href=&#34;http://www.books.com.tw/products/0010562789&#34;&gt;目標&lt;/a&gt;》書中講的 &lt;a href=&#34;https://www.projectup.net/article/view/id/3124&#34;&gt;TOC 聚焦五步驟&lt;/a&gt;，是真的。&lt;/p&gt;

&lt;p&gt;《&lt;a href=&#34;http://www.books.com.tw/products/0010662172&#34;&gt;精實革命&lt;/a&gt;》書中講的&lt;a href=&#34;http://www.cardiff.ac.uk/lean/principles/&#34;&gt;精實思考五原則&lt;/a&gt;，是真的。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Toyota_Production_System&#34;&gt;豐田生產系統&lt;/a&gt;所講究的現地現物、自働化、看板、防呆、5S、反省⋯⋯，是真的。&lt;/p&gt;

&lt;p&gt;甚至連以前上 PMBOK 課程看到的一堆令人生厭的 &lt;a href=&#34;http://www.pmexamsmartnotes.com/how-to-remember-ittos-of-all-47-pmbok-processes/&#34;&gt;ITTO&lt;/a&gt;，也看到在組織執掌分工下的真義。&lt;/p&gt;

&lt;p&gt;所以，不要小看小孩子玩的小火車；道在屎溺，不可不察也！&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/04/102-scene-1.jpg&#34; alt=&#34;102 - 第一回合&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/04/102-scene-1.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;102 - 第一回合&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;整天課程分兩回合進行。第一回合是由學生自己構思方法、執行，並自行檢討；這一回合，講師都先不予提示。&lt;/p&gt;

&lt;p&gt;好精彩的第一回合！和一群各行各業臥虎藏龍的 22 名高手合作，過癮！&lt;/p&gt;

&lt;p&gt;儘管差一點點就達標，但我已經從過程中體會到 lean &amp;amp; TOC 的某些原則。&lt;/p&gt;

&lt;p&gt;這的確是一場和高手合作，很能激盪出火花的體驗活動。也很高興自己貢獻的幾個流程及防呆手法，有派上用場。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/04/102-scene-2.jpg&#34; alt=&#34;102 - 第二回合&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/04/102-scene-2.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;102 - 第二回合&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;等大家都提出檢討報告之後，講師才根據現場觀察，給予精準的提示。此刻，才端出這門課的壓箱寶：品質流程六大手法。&lt;/p&gt;

&lt;p&gt;醍醐灌頂後，大家再度自發地提出改善計畫，重新規劃流程，再進行第二回合：目標不只是達標，更要追求卓越，挑戰加分項目！&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/04/102-certificate.jpg&#34; alt=&#34;102 - 證書&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/04/102-certificate.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;102 - 證書&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;玩了一天小火車，收穫滿滿。&lt;/p&gt;

&lt;p&gt;正題有收穫，也趁機向 Joe &amp;amp; Bryan 請教一些近日思考的疑點。我將把體驗到的思維角度運用在職場上（DevOps 其實非常需要這種綜觀全局的思考方式及流程改善）。&lt;/p&gt;

&lt;p&gt;除了正題收穫之外，也更確定了另一件事：如果想傳達的要點很多，那麼，設計活動時，要選擇在依存關係及統計波動上有某種複雜度的模擬案例（這也是《&lt;a href=&#34;http://www.books.com.tw/products/0010562789&#34;&gt;目標&lt;/a&gt;》書中所提出的切入點）。&lt;/p&gt;

&lt;p&gt;敏捷陣營素以愛玩遊戲著稱。從今天的小火車遊戲中，我也偷學了一些遊戲設計的訣竅，希望以後能運用在團隊身上。&lt;/p&gt;

&lt;p&gt;最後，給一個 call to action：如果你也想親身體驗這麼好玩的遊戲，&lt;a href=&#34;http://www.accupass.com/event/register/1602250738221767316794&#34;&gt;最新梯次 &lt;sup&gt;9&lt;/sup&gt;&amp;frasl;&lt;sub&gt;03&lt;/sub&gt; 已經開放報名&lt;/a&gt;。&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/DmG8VLQTobQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>向工廠管理致敬</title>
      <link>//william-yeh.net/post/2016/04/learn-from-plant-mgmt/</link>
      <pubDate>Fri, 22 Apr 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/04/learn-from-plant-mgmt/</guid>
      
        <description>&lt;p&gt;身為徹頭徹尾的軟體人，在軟體產業待久了，總會對「硬」一點的產業，尤其是製造業，有莫名的成見，以為他們是僵固的、反人性的。從 1972 年「&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_crisis&#34;&gt;軟體危機&lt;/a&gt;」引發的論述當中，更加深軟體人的印象：製造業的經驗，是無法直接套用到軟體界的；我們是截然不同的國度。&lt;/p&gt;

&lt;p&gt;不過，近十年來許多軟體界的流程改革，尤其是同屬 Agile 陣營的 Scrum 及 Kanban，居然有許多元素是從製造業&lt;del&gt;偷竊&lt;/del&gt;學習而來。譬如說，由 Toyota 引領風潮的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Lean_manufacturing&#34;&gt;Lean Production&lt;/a&gt; 及 &lt;a href=&#34;https://en.wikipedia.org/wiki/Just-in-time_manufacturing&#34;&gt;JIT&lt;/a&gt;、從 &lt;a href=&#34;https://en.wikipedia.org/wiki/Theory_of_constraints&#34;&gt;TOC（限制理論）&lt;/a&gt; 學來的流程分析及改善手法，都是相關文獻最常引述的。&lt;/p&gt;

&lt;p&gt;最近為了準備一場 Agile/DevOps 演講，特地研讀數本原典，對核心元素來一場溯源之旅：&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/04/book-the-goals.jpg&#34; alt=&#34;目標&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/04/book-the-goals.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;目標&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;




&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/04/book-lean-revolution.jpg&#34; alt=&#34;精實方面的書籍&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/04/book-lean-revolution.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;精實方面的書籍&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;溯源之旅，很充實，也很有趣。&lt;/p&gt;

&lt;p&gt;一個有趣的觀察是，儘管 TOC 及 Lean/JIT 兩者有許多交集，合併服用的人也很多，但雙方的&lt;del&gt;本位主義者&lt;/del&gt;熱情擁護者卻常常各持己見。譬如說，《&lt;a href=&#34;http://www.books.com.tw/products/0010562789&#34;&gt;目標&lt;/a&gt;》審訂者在導讀中批評 JIT 的效用：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;八十年代，日本的「及時生產觀念」(JIT, Just In Time) 令日本製造業面貌一新，帶給美國莫大的威脅，一時間，美國企業在濃烈的危機感下，紛紛學習，並如法炮製，但效果始終有限。&lt;/p&gt;

&lt;p&gt;作者高德拉特博士強烈地認為，單靠抄襲沒有用，一定要闖出一條優於 JIT 的路才行，況且，絕大部分企業根本沒有條件和資源作 JIT 所需的巨額投資。本書所描述的「鼓—緩衝—繩子」(drum—buffer—rope)、「緩衝管理」(buffer management) 及 TOC 的各種觀念，就被業界評為比 JIT 更實用和快速見效的方法，而且投資少。美國福特汽車的電子部在花鉅資實行了兩年 JIT 後，發覺產品的生產期只縮短了少許，落後日本仍然甚遠，於是決定改用 TOC，在一年內就遠遠拋離對手。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而精實理論重鎮 &lt;a href=&#34;http://www.lean.org/&#34;&gt;LEI&lt;/a&gt; 出版的《&lt;a href=&#34;http://www.books.com.tw/products/0010339196&#34;&gt;學習觀察&lt;/a&gt;》，則批評 TOC 只有孤立效果，不是全面的改善：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;當我們在 1996 年秋初次發行《&lt;a href=&#34;http://www.books.com.tw/products/0010662172&#34;&gt;精實革命&lt;/a&gt;》時，我們敦促讀者要以大野耐一及豐田系統的其他開拓者的精神去「實踐它」。 [&amp;hellip;] 遺憾的是，我們發現採納我們循序漸進建議的人不多，往往在一頭鑽進消除浪費的工作之前，沒有認真地完成這關鍵的一步。&lt;/p&gt;

&lt;p&gt;這種急進性的改善和令人失望的結果，使得精實又像另一個無疾而終的運動，過了一段日子就被束之高閣，取而代之是像「消除瓶頸」（根據「制約理論」）或者六標準差方案，或者其他種種改善專案。但是這些項目都帶來了同樣的結果，在某些孤立的部分戰勝了浪費，其中的一部分甚至很有成效，但他們都不能成功地全面改善。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果有機會安排他們齊聚一堂&lt;del&gt;鬥嘴&lt;/del&gt;交流，一定很有趣。&lt;/p&gt;

&lt;p&gt;補充說明一下：高德拉特本人，對大野耐一可是推崇備至喔！&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;看了原典，想再看看有現場實務經驗的教練，是如何統合運用這些原理，尤其是不預設立場、善於提問引導的教練。&lt;/p&gt;

&lt;p&gt;《林俊哲的廠長教室》系列，就是如此趣味橫生的大補帖。尤其是〈工廠補習班〉系列文章：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.sina.com.cn/s/blog_a4c01d4a0102vryc.html&#34;&gt;工廠的口號洞悉管理的缺失&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.sina.com.cn/s/blog_a4c01d4a0102vryf.html&#34;&gt;一個作業站反映工廠穩不穩定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://willy0936.blogspot.com/2014/12/blog-post_4.html&#34;&gt;一眼看出沒有效率的工廠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://willy0936.blogspot.com/2018/05/blog-post.html&#34;&gt;工廠管理到底應該管什麼？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://willy0936.blogspot.com/2014/12/blog-post_8.html&#34;&gt;工廠管理走一遭&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://willy0936.blogspot.com/2014/12/blog-post_67.html&#34;&gt;「自動化」與「流水線」的迷失&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://willy0936.blogspot.com/2014/12/blog-post_72.html&#34;&gt;工廠管理教戰守則（全文）&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;簡直就是把 TOC、Lean、JIT 等原理重組統整的問答錄。極力建議看完上述原典的人，跟著這些問答錄，一起思辨、活用。&lt;/p&gt;

&lt;p&gt;看完之後，我還要好好思考，是否適合套用在軟體研發管理身上⋯⋯&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>多工切換：有趣的 Lean 觀點</title>
      <link>//william-yeh.net/post/2016/03/lean-perspective-of-multitasking/</link>
      <pubDate>Tue, 29 Mar 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/03/lean-perspective-of-multitasking/</guid>
      
        <description>&lt;p&gt;系統思考，全局思考，是困難的；即使是貌似常識的場域，亦然。&lt;/p&gt;

&lt;p&gt;最近在看 &lt;a href=&#34;https://www.books.com.tw/products/0010662172&#34;&gt;&lt;em&gt;Lean Thinking&lt;/em&gt;&lt;/a&gt; 原典時，感觸更深。&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:15em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/03/lean-thinking.jpg&#34; alt=&#34;精實革命 (Lean Thinking)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/03/lean-thinking.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;精實革命 (Lean Thinking)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Lean Thinking&lt;/em&gt; 倡議小批量 (small batch)、單件流 (one piece flow) 工作方式；這種工作方式，會觸及到多工、工作切換的議題。&lt;/p&gt;

&lt;p&gt;以常識來說，多工、工作切換，代價是 context switch 的 overhead。因此，近代敏捷開發方法論，總是希望在制度設計上盡量降低工作切換：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;當知識工作者有三件或四件以上的工作要做，他們花費在工作切換時，所需重新設定工作模式的時間，會比實際花費在每件工作上的時間還要來的長。
&amp;mdash; 《&lt;a href=&#34;http://www.books.com.tw/products/0010549884&#34;&gt;笑談軟體工程：敏捷開發法的逆襲&lt;/a&gt;》 p.180&lt;/p&gt;

&lt;p&gt;多工是一種浪費，給員工同時間分配多種工作是專案產生浪費的一個根源。軟體開發人員每次在轉換工作時都會浪費大量的調換時間，因為他必須調整思路以便投入新的任務流程。當然，若是你同時參與多個開&lt;br /&gt;
發團隊的話，自然會造成更多的停頓，從而引起更多的任務調換而浪費更多時間。
&amp;mdash; 《&lt;a href=&#34;http://www.books.com.tw/products/0010669225&#34;&gt;精實開發與看板方法&lt;/a&gt;》 p.11&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;原本我也把它當成不證自明的常識。不過，偶然看到 &lt;em&gt;Lean Thinking&lt;/em&gt; 提到的一項實驗，大大顛覆我的成見。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;先看一段 Ron Pereira 根據 &lt;em&gt;Lean Thinking&lt;/em&gt; 書中所提的實驗，錄的一段影片：&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Bi9R1Hqr8dI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;單一動作，反覆做，練成不經大腦思考的機械式反應時，理論上，單一動作的效率會極大化。這也是科學管理之夫泰勒的觀點。&lt;/p&gt;

&lt;p&gt;所以，看了這段實驗，真是令人咋舌。&lt;/p&gt;

&lt;p&gt;兩年後，他又重做了一次實驗：&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Dr67i5SdXiM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;實驗設計上，瑕疵當然很多，就連隨機對照實驗都沒做。不過，個人認為，實驗設計完美與否，並不是此例想彰顯的重點。它想彰顯的，都在第一段影片的小標上。&lt;/p&gt;

&lt;p&gt;我們當然可以坐下來徹底分析：違反直覺的第二種方法，為什麼反而比較快（儘管這可能只是後見之明）。不過，這實驗已經突顯一件事：「工作切換」這件事情的影響，可能需要重新思考；不能只從微觀的局部角度，更要從整體、flow 的角度去檢視。&lt;/p&gt;

&lt;p&gt;單純以「工作切換」這件事，換個 Lean Thinking 思維角度，就能得出違反直覺的結果。天知道還有多少尚未被推翻的「不證自明的常識」呢？&lt;/p&gt;

&lt;p&gt;整體 vs 局部的判斷，委實不能等閒視之呀。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>POLP：最小權限原則</title>
      <link>//william-yeh.net/post/2016/03/polp-intro/</link>
      <pubDate>Tue, 15 Mar 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/03/polp-intro/</guid>
      
        <description>&lt;p&gt;在我開的 &lt;a href=&#34;http://get.soft-arch.net/ansible/&#34;&gt;Ansible Workshop&lt;/a&gt; 中，不管是課前的【許願池】，還是課程現場的 Q&amp;amp;A，總有一個熱門議題：「如何確保系統是安全的？」&lt;/p&gt;

&lt;p&gt;這是大哉問，不是單獨一門組態管理課就能探討到令人滿意的地步（資安也不是我所擅長的⋯⋯）。不過，被問到的次數太多了，我還是給個簡單的導引吧。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;系統安全有許多層次。以 &lt;a href=&#34;https://www.safaribooksonline.com/library/view/learning-linux-security/9781771374194/&#34;&gt;&lt;em&gt;Learning Linux Security&lt;/em&gt;&lt;/a&gt; 教學課程的大綱來看，至少涵蓋幾個層次：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Booting：作業系統開機環節&lt;/li&gt;
&lt;li&gt;Kernel：作業系統核心&lt;/li&gt;
&lt;li&gt;Services：典型系統服務&lt;/li&gt;
&lt;li&gt;Users and permissions：帳號及權限&lt;/li&gt;
&lt;li&gt;Firewalls：防火牆&lt;/li&gt;
&lt;li&gt;Logging and log management：日誌管理&lt;/li&gt;
&lt;li&gt;Intrusion detection and prevention：入侵偵測及預防&lt;/li&gt;
&lt;li&gt;Utilities：診斷工具&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各個環節，都有各自專門知識及輔助工具（我就說這是大哉問吧⋯⋯）。這些都是傳統 admin 或 ops 的責任區。&lt;/p&gt;

&lt;p&gt;不過，即使不是專業的 ops，身為一位 dev，至少有兩點是自己的責任區，需要好好掌握的。&lt;/p&gt;

&lt;p&gt;首先是 &lt;strong&gt;Users and permissions 環節&lt;/strong&gt;。近年來流行的軟體設計方式，部署時，常常不會 100% 寄生在 Apache、Nginx、Tomcat 這些 application container 底下，而是像 PHP 的 &lt;a href=&#34;http://php-fpm.org/&#34;&gt;FPM 模式&lt;/a&gt;、Python 的 &lt;a href=&#34;http://gunicorn.org/&#34;&gt;Gunicorn 模式&lt;/a&gt;、Ruby 的 &lt;a href=&#34;http://unicorn.bogomips.org/&#34;&gt;Unicorn 模式&lt;/a&gt;，有一個或多個協同作業的 process；甚至像 Node.js 或 Java 硬漢，往往不假外力，直接就把程式本身設計成 daemon 了。此時，開發者就不能逃避，必須考慮如何設定該軟體的帳號及權限，包括 process 的 UID、GID，以及相關的檔案目錄存取權限。&lt;/p&gt;

&lt;p&gt;其次是 &lt;strong&gt;Services 環節&lt;/strong&gt;。以 daemon 形式存在的軟體，通常會安裝成 service，透過 &lt;a href=&#34;https://en.wikipedia.org/wiki/Init&#34;&gt;SysV init&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/Upstart&#34;&gt;Upstart&lt;/a&gt; 或 &lt;a href=&#34;https://en.wikipedia.org/wiki/Systemd&#34;&gt;systemd&lt;/a&gt; 等機制啟動與管理。這時，也必須連帶把前述的帳號權限處理好。有潔癖的，甚至還會加掛 &lt;a href=&#34;https://en.wikipedia.org/wiki/Chroot&#34;&gt;chroot&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/AppArmor&#34;&gt;AppArmor&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/Security-Enhanced_Linux&#34;&gt;SELinux&lt;/a&gt; 等嚇人的保護機制。&lt;/p&gt;

&lt;p&gt;對於帳號權限不知道該如何設定的人，通常最好的方式是：觀摩別人是怎麼做的，尤其是經典級的 services。&lt;/p&gt;

&lt;p&gt;我們就在 Ubuntu 14.04 裡面，好好觀摩一下吧。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;以 Apache 為例，如果你是透過 &lt;code&gt;apt-get install apache2&lt;/code&gt; 來安裝，可看到它是以 &lt;code&gt;www-data&lt;/code&gt; 的身份來執行 worker process：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;$ ps aux | grep apache2
root      2734  0.0  0.5  73368  2628 ?        Ss   04:36   0:00 /usr/sbin/apache2 -k start
www-data  2737  0.0  0.4 362532  2240 ?        Sl   04:36   0:00 /usr/sbin/apache2 -k start
www-data  2738  0.0  0.4 362532  2240 ?        Sl   04:36   0:00 /usr/sbin/apache2 -k start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以 Nginx 為例，如果你是透過 &lt;code&gt;apt-get install nginx&lt;/code&gt; 來安裝，可看到它也是以 &lt;code&gt;www-data&lt;/code&gt; 的身份來執行 worker process：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;$ ps aux | grep nginx
root      3313  0.0  0.2  85884  1340 ?        Ss   04:44   0:00 nginx: master process /usr/sbin/nginx
www-data  3314  0.0  0.3  86228  1768 ?        S    04:44   0:00 nginx: worker process
www-data  3315  0.0  0.3  86228  1768 ?        S    04:44   0:00 nginx: worker process
www-data  3316  0.0  0.3  86228  1768 ?        S    04:44   0:00 nginx: worker process
www-data  3317  0.0  0.3  86228  1768 ?        S    04:44   0:00 nginx: worker process&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以 MySQL 為例，&lt;span class=&#34;redactor-invisible-space&#34;&gt;如果你是透過 &lt;code&gt;apt-get install mysql-server&lt;/code&gt; 來安裝，可看到它是以 &lt;code&gt;mysql&lt;/code&gt; 的身份來執行：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;$ ps aux | grep mysql
mysql     7004  0.5  8.8 623920 44536 ?        Ssl  04:48   0:00 /usr/sbin/mysqld&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;從以上三個經典案例，可以歸納出一個小結論：「他們都&lt;strong&gt;盡可能不以 root 身分執行&lt;/strong&gt;。」&lt;/p&gt;

&lt;p&gt;這些 &lt;code&gt;www-data&lt;/code&gt; 及 &lt;code&gt;mysql&lt;/code&gt; 帳號，甚至沒有登入的權力：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;$ cat /etc/passwd | egrep &amp;#39;(mysql|www-data)&amp;#39;
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
mysql:x:109:116:MySQL Server,,,:/nonexistent:/bin/false

$ cat /etc/group  | egrep &amp;#39;(mysql|www-data)&amp;#39;
www-data:x:33:
mysql:x:116:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;也沒有偷開 sudo 後門：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;$ sudo cat /etc/sudoers
Defaults    env_reset
Defaults    mail_badpass
Defaults    secure_path=&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;
# User privilege specification
root    ALL=(ALL:ALL) ALL
# Members of the admin group may gain root privileges
%admin ALL=(ALL) ALL
# Allow members of group sudo to execute any command
%sudo    ALL=(ALL:ALL) ALL&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;所以，這些經典級的服務，他們都非常自制，極度限縮自己的權力。&lt;/p&gt;

&lt;p&gt;用更有學問的說法：他們都遵循&lt;strong&gt;最小權限原則&lt;/strong&gt; (&lt;em&gt;principle of least privilege&lt;/em&gt;; POLP)。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;維基百科提到 POLP 的&lt;a href=&#34;https://en.wikipedia.org/wiki/Principle_of_least_privilege#History&#34;&gt;歷史淵源&lt;/a&gt;，可追溯至 1974 年：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every program and every privileged user of the system should operate using the least amount of privilege necessary to complete the job.&lt;/p&gt;

&lt;p&gt;— &lt;a href=&#34;https://en.wikipedia.org/wiki/Jerome_H._Saltzer&#34;&gt;Jerome Saltzer&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Communications_of_the_ACM&#34;&gt;&lt;em&gt;Communications of the ACM&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可見這算是歷久彌新的原則了。&lt;/p&gt;

&lt;p&gt;如果要將 POLP 套用到目前流行的 web application，我引述 &lt;em&gt;Secure Your Node.js Web Application&lt;/em&gt; 一書的&lt;a href=&#34;http://www.safaribooksonline.com/a/secure-your-nodejs/1159941/&#34;&gt;說法&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From our web application standpoint, we have the following rules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The web application should not be run with root privileges. It should instead use a limited account that has access to only the required resources.&lt;/li&gt;
&lt;li&gt;The database account should not be a root account. The account should have limited privileges over the database tables.&lt;/li&gt;
&lt;li&gt;The users of the web application should be given the minimum set of privileges they need.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;也引述《Ruby on Rails 實戰聖經》的&lt;a href=&#34;https://ihower.tw/rails4/deployment.html&#34;&gt;說法&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;設定伺服器部署使用者&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;習慣上我們會在伺服器上開一個專門的帳號，用來放 Rails 應用程式：&lt;code&gt;sudo adduser --disabled-password deploy&lt;/code&gt; ⋯⋯&lt;/p&gt;

&lt;p&gt;本機執行 &lt;code&gt;cap deploy:check&lt;/code&gt;，就會自動登入遠端的伺服器，在登入的帳號下新建 current、releases 和 shared 這三個目錄。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，回頭檢視一下自己的軟體部署流程，有沒有遵循&lt;strong&gt;最小權限原則&lt;/strong&gt;吧！&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>DevOps 核心元素的考古溯源</title>
      <link>//william-yeh.net/post/2016/03/origin-of-devops-elements/</link>
      <pubDate>Mon, 07 Mar 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/03/origin-of-devops-elements/</guid>
      
        <description>&lt;p&gt;DevOps 和 Agile 的關係是什麼？DevOps 是源自 Agile 的嗎？&lt;/p&gt;

&lt;p&gt;我在〈&lt;a href=&#34;//william-yeh.net/post/2016/01/devops-goals-in-a-nutshell/&#34;&gt;一句話囊括 DevOps 的目標&lt;/a&gt;〉文中曾經簡略提過：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps 雖然和 agile 運動有歷史上的臍帶關係，但嚴格來說，沒有遵循《&lt;a href=&#34;http://www.agilemanifesto.org/&#34;&gt;敏捷宣言&lt;/a&gt;》四大原則，也是能做 DevOps 的；硬是把兩個議題綁在一起，會限縮 DevOps 論述空間⋯⋯&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這種&lt;del&gt;分離主義&lt;/del&gt;論點並不是我首創的。iThome 的〈&lt;a href=&#34;http://www.ithome.com.tw/news/96861&#34;&gt;為什麼會出現 DevOps？&lt;/a&gt;〉一開頭也提到，DevOps 的源頭不只有 agile 一系：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps 運動承襲自敏捷系統管理 (Agile System Administration) 運動以及企業系統管理 (Enterprise System Management，ESM) 運動。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不過，我還是想替這種論述，找到更權威、更全面一點的溯源分析。&lt;/p&gt;

&lt;p&gt;終於，我從 &lt;a href=&#34;http://www.amazon.com/dp/0988262592/ref=cm_sw_r_tw_dp_a4p3wb0PSYY97&#34;&gt;&lt;em&gt;The Phoenix Project&lt;/em&gt;&lt;/a&gt; 書中找到想要的論述。&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:15em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/03/the-phoenix-project.png&#34; alt=&#34;The Phoenix Project&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/03/the-phoenix-project.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;The Phoenix Project&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/dp/0988262592/ref=cm_sw_r_tw_dp_a4p3wb0PSYY97&#34;&gt;&lt;em&gt;The Phoenix Project&lt;/em&gt;&lt;/a&gt; 這本書，以&lt;a href=&#34;http://www.bookzone.com.tw/event/201108_goldratt/&#34;&gt;高德拉特&lt;/a&gt;那種極受歡迎的企管小說形式，闡述在一個面臨內部外部危機的 IT 組織中，DevOps 能發揮什麼樣的功效。對這本書的背景有興趣的，請讀讀該書作者 Gene Kim 的&lt;a href=&#34;http://www.infoq.com/cn/articles/phoenix-project-book-review&#34;&gt;訪談文章&lt;/a&gt;，或是 Howie 寫的&lt;a href=&#34;http://lab.howie.tw/2016/02/phoenix-project.html&#34;&gt;重點整理&lt;/a&gt;、Ruddy 寫的&lt;a href=&#34;https://ruddyblog.wordpress.com/2016/01/26/the-phoenix-project-%E5%B0%8E%E8%AE%80/&#34;&gt;導讀&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;整本書非常豐富，本篇文章只專門針對該書附錄 &amp;ldquo;&lt;em&gt;Where DevOps Came From&lt;/em&gt;&amp;rdquo; 進行導讀。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;作者如此定調 DevOps：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We refer to &amp;ldquo;DevOps&amp;rdquo; as the outcome of &lt;em&gt;applying Lean principles to the IT value stream&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;出現一個近年來非常潮的字眼——&lt;a href=&#34;http://leanmanufacturingtools.org/39/lean-thinking-lean-principles/&#34;&gt;Lean principles；精實／精益原則&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;這些原則，並不是 IT 界所獨有的，而是取經自其他領域，尤其是製造業：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;These principles are based on more than a century of sound management practices. However, instead of being applied to the transformation of physical goods, we are using these principles to &lt;em&gt;accelerate flow of work through Product Management, Development, Test, IT Operations, and InfoSec.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，DevOps 算是縱貫專案管理、開發、測試、維運、資安等環節的一條鞭精實手法。&lt;/p&gt;

&lt;p&gt;在整個 IT 價值鏈中，DevOps 的確受惠於 agile 陣營對於傳統專案管理的顛覆觀點：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps has benefited tremendously from the work the Agile Community has done, showing how small teams operating with &lt;em&gt;high trust&lt;/em&gt; combined with small batch sizes and &lt;em&gt;smaller, more frequent software releases&lt;/em&gt; can dramatically increase productivity of Development organizations. In fact, many of the key moments in the DevOps history happened at Agile conferences [&amp;hellip;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因此，在技術面來說，DevOps 吸納了以下的 agile 元素：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps extends and builds upon the practices of &amp;ldquo;&lt;em&gt;infrastructure as code&lt;/em&gt;&amp;rdquo; pioneered by Dr. Mark Burgess, as well as &lt;em&gt;continuous integration&lt;/em&gt; and &lt;em&gt;continuous deployment&lt;/em&gt; (pioneered by Jez Humble and David Farley), which is a prerequisite to &lt;em&gt;achieving fast deployment flow&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不過，從這裡可以清楚地看到，DevOps「向 agile 陣營取經」的元素，多半集中在對「加速部署速度」有直接助益的工具元素上。所以，只是一種選擇性的取經。&lt;/p&gt;

&lt;p&gt;另一方面，DevOps 本身也沒有停留在「只向 agile 陣營取經」的階段，仍繼續吸納其他領域的優點。尤其 DevOps 也著重最後一哩路的 &amp;ldquo;Ops&amp;rdquo; 這一端，因此，也向其他國度取經：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps also benefits from an astounding convergence of philosophical management movements, such as &lt;em&gt;Lean Startup&lt;/em&gt;, &lt;em&gt;Innovation Culture&lt;/em&gt;, &lt;em&gt;Toyota Kata&lt;/em&gt;, &lt;em&gt;Rugged Computing&lt;/em&gt;, and the &lt;em&gt;Velocity community&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有趣的是，近年來，許多人再度向日本學習。Agile 陣營的 Kanban 是一例，DevOps 也師法許多 Lean 精神及作法。DevOps 要角 John Willis 甚至還寫了一篇文章 &amp;ldquo;&lt;a href=&#34;http://itrevolution.com/japanese-words-for-devops-practitioners/&#34;&gt;Japanese Terms For DevOps Practitioners&lt;/a&gt;&amp;rdquo; 來介紹這些源自日本的時髦詞彙呢。&lt;/p&gt;

&lt;p&gt;巨變的年代，或許正如作者所說：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All of these mutually reinforce each other, creating the conditions of a &lt;em&gt;powerful coalition of forces&lt;/em&gt; that can accelerate DevOps adoption.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好的東西，會互相吸引，互相融合。屆時，或許就沒有什麼考古的必要；我泥中有你，你泥中有我。就像柯仁傑在〈&lt;a href=&#34;http://kojenchieh.pixnet.net/blog/post/381131219-%E6%95%8F%E6%8D%B7%E5%92%8C%E7%B2%BE%E5%AF%A6%E7%9A%84%E9%97%9C%E4%BF%82-%281%29&#34;&gt;敏捷和精實的關係 (1)&lt;/a&gt;〉一文所說：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;早期敏捷愛好者受到精實的觀念的影響，因此在敏捷世界中也常常出現精實製造的說法。&lt;/p&gt;

&lt;p&gt;所以敏捷跟精實兩者，在軟體開發世界中已經是混合在一起。如果你在實施敏捷，其實代表你也是在套用精實，兩者是無法很清楚地分開來。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>電腦界的隱喻：組態管理</title>
      <link>//william-yeh.net/post/2016/03/metaphor-in-cm/</link>
      <pubDate>Wed, 02 Mar 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/03/metaphor-in-cm/</guid>
      
        <description>&lt;p&gt;人類是很喜愛比喻／譬喻的。戰國時代的莊子愛用譬喻，常和莊子抬槓的惠施也愛譬喻，《說苑‧善說》甚至記載著這麼一段故事：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;客謂梁王曰：「惠子之言事也，善譬。王使無譬則不能言矣。」王曰：「諾。」&lt;/p&gt;

&lt;p&gt;明日見， 謂惠子曰：「願先生言事則直言耳，無譬也。」惠子曰：「今有人於此而不知彈者，曰：『彈之狀何若？』應曰：『彈之狀如彈。』則諭乎？」王曰：「未諭也。」 「於是更應曰：『彈之狀如弓，而竹為弦』，則知乎？」王曰：「可知矣。」&lt;/p&gt;

&lt;p&gt;惠子曰：「夫說者固以其所知，喻其所不知，而使人知之。今王曰無譬，則不可矣。」 王曰：「善。」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用譬喻反擊「無譬也」的要求，真是高招！&lt;/p&gt;

&lt;p&gt;比喻／譬喻不只是修辭法，甚至是人類根深蒂固的認知媒介。認知語言學大師 George Lakoff 在 &lt;a href=&#34;http://www.amazon.com/dp/0226468011/ref=cm_sw_r_tw_dp_yQP1wb1VDN24N&#34;&gt;&lt;em&gt;Metaphors We Live By&lt;/em&gt;&lt;/a&gt; 書中，如此闡述它的地位：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Metaphor is not just a matter of language of mere words. We shall argue that, on the contrary, human &lt;em&gt;&lt;strong&gt;thought processes&lt;/strong&gt;&lt;/em&gt; are largely metaphorical.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，每次看到有趣的隱喻，我都會特別留意，細細品味背後的巧思。&lt;/p&gt;

&lt;p&gt;電腦界也很愛用隱喻，甚至還會帶出成群的隱喻。&lt;/p&gt;

&lt;p&gt;Java 之名，取材自咖啡。JavaScript 雖然並非嫡傳血脈，但由它衍生出來的其他技術，有些就刻意以「咖啡」為隱喻。像美化 JavaScript 語法的 &lt;a href=&#34;http://coffeescript.org/&#34;&gt;CoffeeScript&lt;/a&gt;、供 JavaScript 使用的測試框架 &lt;a href=&#34;https://mochajs.org/&#34;&gt;Mocha&lt;/a&gt;，甚至連咖啡的對手：&lt;a href=&#34;https://mochajs.org/&#34;&gt;Chai&lt;/a&gt; 都搬出來了。&lt;/p&gt;

&lt;p&gt;組態管理的四大工具，也是愛用隱喻的。&lt;/p&gt;

&lt;p&gt;Ansible 主要的隱喻是&lt;strong&gt;演戲&lt;/strong&gt;。所以，在 Ansible 劇場中，策劃好的動作及姿勢叫做 &lt;strong&gt;play&lt;/strong&gt;，集合起來就是 &lt;strong&gt;playbook&lt;/strong&gt;（劇本）。人生就是戲，演不完的戲；在舞台上，每一台主機扮演一個或多個 &lt;strong&gt;role&lt;/strong&gt;（角色），甚至還有天外飛來一筆的空降角色 —— 來自 &lt;strong&gt;galaxy&lt;/strong&gt;（銀河系）。&lt;/p&gt;

&lt;p&gt;Chef 主要的隱喻是&lt;strong&gt;廚師&lt;/strong&gt;。所以，在 Chef 世界中，珍藏厚厚的 &lt;strong&gt;cookbook&lt;/strong&gt;（食譜），根據裡面記載的 &lt;strong&gt;recipe&lt;/strong&gt;（料理步驟），用 &lt;strong&gt;knife&lt;/strong&gt;（菜刀）做菜，也有一個 &lt;strong&gt;kitchen&lt;/strong&gt;（廚房）可以實驗料理。&lt;/p&gt;

&lt;p&gt;Puppet 主要的隱喻是&lt;strong&gt;傀儡&lt;/strong&gt;、&lt;strong&gt;偶戲&lt;/strong&gt;。可惜的是，在 Puppet 舞台上出現的概念：manifest、resource、module、master、agent，似乎都沒有善用最初的隱喻。&lt;/p&gt;

&lt;p&gt;Salt 主要的隱喻是⋯⋯&lt;strong&gt;鹽&lt;/strong&gt;。可惜的是，在 Salt 世界中出現的概念：salt state、formula、master、minion，似乎都沒有善用最初的隱喻。嗯，&amp;rdquo;formula&amp;rdquo; 字眼，勉強算有沾到邊。&lt;/p&gt;

&lt;p&gt;呃，我要修正前面那一句話：「組態管理的四大工具當中，Ansible 和 Chef 也是愛用隱喻的。」&lt;/p&gt;

&lt;p&gt;或許這也是我對 Ansible 及 Chef 比較有好感的原因吧。&lt;/p&gt;

&lt;p&gt;最後，如果你想對這四大工具有個快速的概念，可參考 Roland Wolters 製作的單頁掛圖：&lt;a href=&#34;http://wall-skills.com/2015/configuration-management-ansible-salt-chef-puppet/&#34;&gt;Tools for Configuration Management&lt;/a&gt;。&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/03/Ansible-Salt-Puppet-Chef-Wall-Skills.png&#34; alt=&#34;Tools for Configuration Management&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/03/Ansible-Salt-Puppet-Chef-Wall-Skills.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Tools for Configuration Management&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>一句話囊括 DevOps 的目標</title>
      <link>//william-yeh.net/post/2016/01/devops-goals-in-a-nutshell/</link>
      <pubDate>Fri, 29 Jan 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/01/devops-goals-in-a-nutshell/</guid>
      
        <description>&lt;p&gt;TL;DR&lt;br /&gt;
&lt;em&gt;DevOps is a set of practices intended to reduce the time between committing a change to a system and the change being placed into normal production, while ensuring high quality.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;我在許多演講場合，都喜歡調侃 DevOps 百家爭鳴各言爾志的現況。尤其是像 XebiaLabs 的 &amp;ldquo;&lt;a href=&#34;https://xebialabs.com/periodic-table-of-devops-tools/&#34;&gt;Periodic Table of DevOps Tools&lt;/a&gt;&amp;ldquo;，用化學元素週期表來類比，傳神極了！&lt;/p&gt;

&lt;p&gt;調侃歸調侃，但總還是得選一套說法當參考座標，議題定位才能明確。我也不喜歡太欠缺客觀性的打高空調調，尤其是涉及組織文化層面的論調。畢竟，DevOps 雖然和 agile 運動有歷史上的臍帶關係，但嚴格來說，沒有遵循《&lt;a href=&#34;http://www.agilemanifesto.org/&#34;&gt;敏捷宣言&lt;/a&gt;》四大原則，也是能做 DevOps 的；硬是把兩個議題綁在一起，會限縮 DevOps 論述空間，很容易挑起 &amp;ldquo;it doesn&amp;rsquo;t work here&amp;rdquo; 的防禦心態。&lt;/p&gt;

&lt;p&gt;推廣新觀念，就要從阻力最小的角度切入。&lt;/p&gt;

&lt;p&gt;因此，我在去年 12 月 Container Summit 2015 講〈&lt;a href=&#34;http://www.slideshare.net/williamyeh/dockers-impact-on-the-devops-toolchain&#34;&gt;擁抱或對抗？談 Docker 對傳統 DevOps 工具鏈的衝擊&lt;/a&gt;〉時，首次搬出 Brian Brazil 在 &amp;ldquo;&lt;a href=&#34;http://www.robustperception.io/do-you-have-basic-infrastructure/&#34;&gt;Do you have basic infrastructure?&lt;/a&gt;&amp;rdquo; 一文提出的三問句來破題：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You need to know:&lt;br /&gt;
1. How to recreate your system&lt;br /&gt;
2. How to safely change your system&lt;br /&gt;
3. When something has gone wrong&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;蘇格拉底式問句，不夾帶特定前提，不偷渡既定結論，很適合拿來引導團隊思考。因此，後來我在〈&lt;a href=&#34;//william-yeh.net/post/2015/12/devops-1st-step/&#34;&gt;DevOps 是圓的，找到立足點就是頂點&lt;/a&gt;〉文章、在 &lt;a href=&#34;http://get.soft-arch.net/ansible/&#34;&gt;Ansible Workshop 課堂&lt;/a&gt;上，也反覆用到這三問句。&lt;/p&gt;

&lt;p&gt;不過，私心還是希望能有一個更直述、更目標導向的操作型定義。&lt;/p&gt;

&lt;p&gt;找了很久，偶然在 2015 年 SEI 系列的新書 &lt;a href=&#34;http://www.amazon.com/dp/0134049845/ref=cm_sw_r_tw_dp_bB.Qwb0FF6QRZ&#34;&gt;&lt;em&gt;DevOps: A Software Architect&amp;rsquo;s Perspective&lt;/em&gt;&lt;/a&gt; 第一章，發現我想要的操作型定義了。&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/01/devops-from-architect-perspective.png&#34; alt=&#34;DevOps: A Software Architect&amp;#39;s Perspective&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/01/devops-from-architect-perspective.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;DevOps: A Software Architect&amp;#39;s Perspective&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;SEI 這塊金字招牌，乍看之下會以為又要端出像 CMMI、PSP 那樣硬梆梆的東西。不過，瞄到書名當中有 &amp;ldquo;A Software Architect&amp;rsquo;s Perspective&amp;rdquo; 字眼，就覺得應該比較貼近第一線的實務現場。&lt;/p&gt;

&lt;p&gt;他們的切入角度是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Our definition of DevOps focuses on the &lt;strong&gt;goals&lt;/strong&gt;, rather than the &lt;strong&gt;means&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很多時候，先聚焦在共有的目標上，會比過早陷入細部做法的爭論來得有用。&lt;/p&gt;

&lt;p&gt;從「目標」角度出發，再對 DevOps 下定義，更顯得客觀中立。畢竟，不管是大機構還是小團隊，不管背後採用哪一種軟體開發流程，都能接受以下這種 DevOps 目標：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps is a set of &lt;em&gt;practices&lt;/em&gt; intended to &lt;strong&gt;reduce the time between committing a change to a system and the change being placed into normal production, while ensuring high quality&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這跟前面那三問句是相互呼應的，只不過這一回用的是更直述、更目標導向的操作型定義。&lt;/p&gt;

&lt;p&gt;這段定義陳述，點出 DevOps 兩大目標：&lt;strong&gt;時間&lt;/strong&gt;及&lt;strong&gt;品質&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;時間：在「commit change」到「上線營運生效」兩者之間的時間差，要盡量縮短到某個設定的水平之內。&lt;/li&gt;
&lt;li&gt;品質：不能只求上線生效，還要對品質把關，維持在某個設定的水平之上。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;弄清楚 DevOps 的目標後，再看 DevOps 圈子倡議的 practices，就不覺突兀：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Treat Ops as first-class citizens from the point of view of requirements.&lt;/li&gt;
&lt;li&gt;Make Dev more responsible for relevant incident handling. These practices are intended to shorten the time between the observation of an error and the repair of that error.&lt;/li&gt;
&lt;li&gt;Enforce the deployment process used by all, including Dev and Ops personnel.&lt;/li&gt;
&lt;li&gt;Use continuous deployment.&lt;/li&gt;
&lt;li&gt;Develop infrastructure code, such as deployment scripts, with the same set of practices as application code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;這五項 practices，都可以回溯到先前設定的 DevOps 兩大目標：時間及品質。&lt;/p&gt;

&lt;p&gt;當然啦，同一份目標，可能衍生出不同的實作手法；此時此刻公認的 best practices，也可能在不久就被推翻。書中建議我們可以根據幾點來評估：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is the particular practice you are considering?&lt;/strong&gt;&lt;br /&gt;
這家 DevOps 百貨公司，大肆推銷的東西太多了，必須先針對組織的需求及現況加以評估、排序。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;What other practices are implicit in the practice you are considering?&lt;/strong&gt;&lt;br /&gt;
某些措施有隱含的前提。譬如說，想實現 continuous deployment 之前，不可能不先做 continuous integration。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is the culture of your business, and what are the ramifications of your adopting this particular DevOps practice?&lt;/strong&gt;&lt;br /&gt;
任何改變都有受到波及的對象，所以，想導入任何改變，都不能忽略組織及人性的抗拒力道。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;這就是 SEI 出版的書 &lt;a href=&#34;http://www.amazon.com/dp/0134049845/ref=cm_sw_r_tw_dp_bB.Qwb0FF6QRZ&#34;&gt;&lt;em&gt;DevOps: A Software Architect&amp;rsquo;s Perspective&lt;/em&gt;&lt;/a&gt; 當中的第一章，對於 DevOps 下的目標導向定義，以及隨之鋪陳的實踐手法及考量依據。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>DevOps 是圓的，找到立足點就是頂點</title>
      <link>//william-yeh.net/post/2015/12/devops-1st-step/</link>
      <pubDate>Mon, 28 Dec 2015 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2015/12/devops-1st-step/</guid>
      
        <description>&lt;p&gt;自從 IT 相關媒體開始傳頌 2009 年蔚為經典的 Flickr 經驗 “&lt;a href=&#34;https://youtu.be/LdOe18KhtT4&#34;&gt;10+ Deploys per Day&lt;/a&gt;”、2014 年 Marissa Mayer 的鐵桿作風「&lt;a href=&#34;http://www.ithome.com.tw/news/99283&#34;&gt;沒有持續交付，專案不得上線，我不是在說笑&lt;/a&gt;」之後，頓時 DevOps 成為 IT 界新的焦慮源。我還聽說有高層在聽完兩天 &lt;a href=&#34;https://www.ithome.com.tw/article/98527&#34;&gt;DevOps 2015 研討會&lt;/a&gt;之後，回頭要求 IT 部門要師法 2009 年的 Flickr 做到「10+ Deploys per Day」。&lt;/p&gt;

&lt;p&gt;聽了很潮的新觀念，就訂不合理的 KPI，這也是「負能量」呀！&lt;/p&gt;

&lt;p&gt;本質上，DevOps 是一種文化運動。文化不挪動，流程、工具也無法落地生效。&lt;/p&gt;

&lt;p&gt;如果組織文化充滿壁壘分明的界線，缺少從錯誤中學習的不指責氛圍，只盲目崇尚數字管理、成效管理，那就很難用健康的心態去嘗試新的流程及工具，進而受益。&lt;/p&gt;

&lt;h2 id=&#34;起點&#34;&gt;起點&lt;/h2&gt;

&lt;p&gt;如果組織文化已經做好改變的準備了，流程、工具該怎麼起步呢？&lt;/p&gt;

&lt;p&gt;Bryan 在大人學講座【&lt;a href=&#34;https://shop.darencademy.com/product/view/id/57&#34;&gt;尋找天賦與熱情的系統化做法&lt;/a&gt;】曾提到一個觀點：「世界是圓的，找到立足點就是頂點。」&lt;/p&gt;

&lt;p&gt;我也想照樣照句：「DevOps 是圓的，找到立足點就是頂點。」&lt;/p&gt;

&lt;p&gt;我不太信奉放諸四海皆準的方法論、roadmap、步驟。而且，DevOps 真的是圓的，從任何一個契合組織現況的角度切入，都有機會逐步把整塊 DevOps 拼圖補齊。&lt;/p&gt;

&lt;p&gt;譬如說，如果你的組織是研發驅動的，或許從 CI 角度切入，阻力會比較小；這也是稍早兩篇文章〈&lt;a href=&#34;//william-yeh.net/post/2015/12/ci-no-turning-back/&#34;&gt;CI 是條不歸路&lt;/a&gt;〉、〈&lt;a href=&#34;//william-yeh.net/post/2015/12/ci-effect/&#34;&gt;CI 怎樣帶你遠離平庸？&lt;/a&gt;〉的論點。&lt;/p&gt;

&lt;p&gt;當然啦，並不是所有團隊都認為 CI 是他們的當務之急。此時，硬是要推銷 CI 理念或工具，不見得是上策。&lt;/p&gt;

&lt;p&gt;另一個我常拿來進行個案研討的蘇格拉底式問句，是從「&lt;strong&gt;DevOps 的原點&lt;/strong&gt;」來提問。&lt;/p&gt;

&lt;h2 id=&#34;原點&#34;&gt;原點&lt;/h2&gt;

&lt;p&gt;DevOps 的原點是什麼？&lt;/p&gt;

&lt;p&gt;我很喜歡引述 Brian Brazil 在 &amp;ldquo;&lt;a href=&#34;http://www.robustperception.io/do-you-have-basic-infrastructure/&#34;&gt;Do you have basic infrastructure?&lt;/a&gt; 一文的觀點。他提到軟體的基礎架構 (infrastructure)，或大或小，或新或舊，總是要面對以下三則基本問題：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How to recreate your system&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;How to safely change your system&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;When something has gone wrong&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;好好面對這三個問題，不僅讓 DevOps 的核心議題變得無比清晰，更讓團隊自己理出當務之急切身之痛，而不是靠外部&lt;del&gt;名嘴&lt;/del&gt;顧問的通靈神諭。&lt;/p&gt;

&lt;h2 id=&#34;立足點很多-只等你起步&#34;&gt;立足點很多，只等你起步&lt;/h2&gt;

&lt;p&gt;這三個問題，好好搞定，其實已經碰觸到許多 DevOps 技術層面的議題了。&lt;/p&gt;

&lt;p&gt;譬如說，【1. How to recreate your system】至少涉及這些議題：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如何從原始碼變成可執行的軟體？&lt;/li&gt;
&lt;li&gt;如何確定軟體已經是可發佈的品質？&lt;/li&gt;
&lt;li&gt;如何備妥軟體的執行環境？&lt;/li&gt;
&lt;li&gt;如何自動化上述事項？自動化到什麼程度？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果選擇從這裡出發，你就會接觸到 build automation、acceptance test、configuration management 等技術。&lt;/p&gt;

&lt;p&gt;【2. How to safely change your system】至少涉及這些議題：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如何管控原始碼變更？&lt;/li&gt;
&lt;li&gt;如何管控執行環境變更？&lt;/li&gt;
&lt;li&gt;如何確定軟體變更後，仍然是可發佈的品質？&lt;/li&gt;
&lt;li&gt;如何管控新版軟體的部署？&lt;/li&gt;
&lt;li&gt;如何自動化上述事項？自動化到什麼程度？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果選擇從這裡出發，你就會接觸到 Git/GitHub/GitLab flow、configuration management、test automation、continuous integration、continuous deployment 等技術。&lt;/p&gt;

&lt;p&gt;【3. When something has gone wrong】至少涉及這些議題：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如何知道系統出了狀況？&lt;/li&gt;
&lt;li&gt;怎麼樣才叫做「系統出了狀況」？有哪些質化量化指標？&lt;/li&gt;
&lt;li&gt;怎樣處理？&lt;/li&gt;
&lt;li&gt;怎樣復原？&lt;/li&gt;
&lt;li&gt;怎樣預防？&lt;/li&gt;
&lt;li&gt;怎樣集中處理？&lt;/li&gt;
&lt;li&gt;如何自動化上述事項？自動化到什麼程度？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果選擇從這裡出發，你就會接觸到 metrics aggregation、log aggregation、real-time monitoring/dashboard/alert、canary deployment 等技術。&lt;/p&gt;

&lt;p&gt;然後，你從任何一個立足點出發，解決切身之痛，嚐到甜美果實之後，一定會順便對其他相關議題有興趣嘗試、有信心搞定。至於文化議題，也會搭配著碰到。&lt;/p&gt;

&lt;p&gt;譬如說，我的 &lt;a href=&#34;http://get.soft-arch.net/ansible/&#34;&gt;Ansible Workshop 課程&lt;/a&gt;，就是從第一類問題當中的 &amp;ldquo;configuration management&amp;rdquo; 小課題出發，進而發展到 GitHub flow、CI、test automation、canary deployment 等第二、第三類問題。&lt;/p&gt;

&lt;p&gt;這就是文章開頭講的「DevOps 是圓的，找到立足點就是頂點。」&lt;/p&gt;

&lt;h2 id=&#34;不要妄想一步登天-先累積小小的成功&#34;&gt;不要妄想一步登天，先累積小小的成功&lt;/h2&gt;

&lt;p&gt;有人認為，小團隊、新團隊包袱小，身兼數職是常態，無部門界線，先天上就比較容易導入 DevOps 流程。&lt;/p&gt;

&lt;p&gt;但也有人認為，大團隊、老團隊分工細密，各人有各自精深的專職技能，先天上比較容易執行一個個高度專業要求的 DevOps 元素。&lt;/p&gt;

&lt;p&gt;不同環境，看待 DevOps，各有不同的優勢與劣勢。所以，停止抱怨吧。&lt;/p&gt;

&lt;p&gt;導入 DevOps，請先回到 DevOps 的原點。&lt;/p&gt;

&lt;p&gt;我建議，先好好檢視上述的三個問題，嚴肅思考哪些是目前的痛點，哪些是容易有早期成功的項目。然後，賦予團隊充分的嘗試錯誤空間，下手去做。&lt;/p&gt;

&lt;p&gt;做了之後，自然就會發現：這是一條不歸路，&lt;strong&gt;你會不斷接觸『遠離平庸』的新觀點、新技術&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;你再也回不去過去那個老土砲的日子了。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>CI 怎樣帶你遠離平庸？</title>
      <link>//william-yeh.net/post/2015/12/ci-effect/</link>
      <pubDate>Tue, 22 Dec 2015 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2015/12/ci-effect/</guid>
      
        <description>

&lt;p&gt;前天我的文章〈&lt;a href=&#34;//william-yeh.net/post/2015/12/ci-no-turning-back/&#34;&gt;CI 是條不歸路&lt;/a&gt;〉提到：「CI/CD/DevOps 既是條不歸路，更是大躍進之路：一旦踏出第一步，就注定你會不斷接觸&lt;strong&gt;『遠離平庸』&lt;/strong&gt;的新觀點、新技術。」&lt;/p&gt;

&lt;p&gt;為了避免陳義過高，這篇文章就來講一個具體的軟體研發故事吧。&lt;/p&gt;

&lt;h2 id=&#34;護城河&#34;&gt;護城河&lt;/h2&gt;

&lt;p&gt;我用 Ansible，也用 &lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt;，因此，我寫了一個 Ansible role &lt;a href=&#34;https://github.com/William-Yeh/ansible-prometheus&#34;&gt;&lt;code&gt;williamyeh.prometheus&lt;/code&gt;&lt;/a&gt; 來安裝 Prometheus。&lt;/p&gt;

&lt;p&gt;上個禮拜，我隱約覺得對它感興趣的人似乎變多了，便好奇的去 GitHub 後台調數據來看，發現：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;原來是被 Prometheus 官網列入 &amp;ldquo;&lt;a href=&#34;http://prometheus.io/docs/introduction/install/#using-configuration-management-systems&#34;&gt;Using configuration management systems&lt;/a&gt;&amp;rdquo; 清單了，難怪最近 PR 變多，品質更是超越其他幾家 CM 的例子。&lt;/p&gt;

&lt;p&gt;&amp;mdash; Quote: &lt;a href=&#34;https://twitter.com/william_yeh/status/676897832071241728&#34;&gt;2015-12-16 Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;被 Prometheus 官方欽點了，能見度提高了，就表示，三不五時會有人提出 bug report，提出 feature request；甚至更勤勞一點的，可能直接就會送出 PR (pull request)。&lt;/p&gt;

&lt;p&gt;面對 PR，其實要花很大的力氣去檢驗：檢驗對錯，檢驗風格，甚至 &lt;a href=&#34;https://en.wikipedia.org/wiki/The_Mythical_Man-Month#Conceptual_integrity&#34;&gt;conceptual integrity&lt;/a&gt;（語出《&lt;a href=&#34;https://en.wikipedia.org/wiki/The_Mythical_Man-Month&#34;&gt;人月神話&lt;/a&gt;》）。而且，對方既然已經很勤勞的送出 PR 了，他會預期你高度重視他的提案。&lt;/p&gt;

&lt;p&gt;我需要一道&lt;strong&gt;護城河&lt;/strong&gt;，讓我不必每次都事必躬親，回應每一則 PR。&lt;/p&gt;

&lt;p&gt;所幸我早就建立好&lt;strong&gt;個人的 discipline&lt;/strong&gt;：要替自己寫的 Ansible role 加上 CI。即使只是做一點點小小的 smoke test，總是聊勝於無。&lt;/p&gt;

&lt;p&gt;CI 是&lt;strong&gt;高度客觀中立&lt;/strong&gt;、&lt;strong&gt;不帶感情&lt;/strong&gt;的守門員。它，幫我初步過濾一些攸關對錯、風格的 PR。於是，我可以優先禮貌性回應已經被 CI 初步打勾放行的 PR；至於被打叉叉的，那就&lt;del&gt;謝謝再聯絡&lt;/del&gt;等有充裕時間精力時再說：&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2015/12/ansible-prometheus-pr.png&#34; alt=&#34;Pull requests&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2015/12/ansible-prometheus-pr.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Pull requests&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;CI，小小的投資，大大的省事。&lt;/p&gt;

&lt;h2 id=&#34;當-ansible-遇見-docker&#34;&gt;當 Ansible 遇見 Docker&lt;/h2&gt;

&lt;p&gt;個人還有另一項執念：自己寫的 Ansible role，要盡可能支援多種 Linux distributions 環境。&lt;/p&gt;

&lt;p&gt;這又是一條不歸路。&lt;/p&gt;

&lt;p&gt;在本機端研發時，我可以用各種 Vagrant box 來模擬各種 Linux （譬如：&lt;a href=&#34;https://app.vagrantup.com/bento/boxes/centos-6.7&#34;&gt;bento/centos-6.7&lt;/a&gt;、&lt;a href=&#34;https://app.vagrantup.com/bento/boxes/centos-7.1&#34;&gt;bento/centos-7.1&lt;/a&gt;、&lt;a href=&#34;https://app.vagrantup.com/debian/boxes/jessie64&#34;&gt;debian/jessie64&lt;/a&gt;），但這沒辦法 scale 到正式的 CI 流程上。此刻 Travis CI 及 CircleCI 只提供 Ubuntu 12.04 及 14.04 兩種 instance，也沒支援 &lt;a href=&#34;http://kitchen.ci&#34;&gt;Test Kitchen&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;所幸 Travis CI 和 CircleCI 都有支援 Docker，因此，我設計了 &lt;a href=&#34;https://github.com/William-Yeh/docker-ansible&#34;&gt;&lt;code&gt;williamyeh/ansible&lt;/code&gt;&lt;/a&gt; 這一系列的 Docker images，可在 Travis CI 及 CircleCI 上面模擬出 CentOS 6 &amp;amp; 7、Debian 7 &amp;amp; 8、Ubuntu 12.04 &amp;amp; 14.04 環境，來測試我的 Ansible roles。&lt;/p&gt;

&lt;p&gt;這下子，我的 CI 護城河就更穩固了。CI 這位&lt;strong&gt;高度客觀中立&lt;/strong&gt;、&lt;strong&gt;不帶感情&lt;/strong&gt;的守門員，協助我冷靜面對以下這則算是大工程等級的 PR，不帶批判情緒的進行對話，一起搞定 CentOS/Ubuntu 雙系統：&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2015/12/pr-discussion.png&#34; alt=&#34;Discussion around a pull request&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2015/12/pr-discussion.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Discussion around a pull request&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;CI，小小的投資，大大的省事。&lt;/p&gt;

&lt;p&gt;對我而言，原本 &lt;code&gt;williamyeh/ansible&lt;/code&gt; 只是為了其他目的而順帶設計出來的副產品。但由於 Ansible 官方已不再維護它的 Docker images；而在非官方版當中，我的 &lt;code&gt;williamyeh/ansible&lt;/code&gt; 下載量居冠（統計數據&lt;a href=&#34;https://hub.docker.com/search/?q=ansible&amp;amp;page=1&amp;amp;isAutomated=0&amp;amp;isOfficial=0&amp;amp;pullCount=1&amp;amp;starCount=0&#34;&gt;在此&lt;/a&gt;），也持續有人提出 feature request⋯⋯該說是無心插柳嗎？&lt;/p&gt;

&lt;h2 id=&#34;吃自己的狗食&#34;&gt;吃自己的狗食&lt;/h2&gt;

&lt;p&gt;再拿另一個很受歡迎的 Ansible role：&lt;a href=&#34;https://github.com/William-Yeh/ansible-oracle-java&#34;&gt;&lt;code&gt;williamyeh.oracle-java&lt;/code&gt;&lt;/a&gt; 為例。它在 Ansible Galaxy 已經得到 &lt;a href=&#34;https://galaxy.ansible.com/william-yeh/oracle-java&#34;&gt;4.8 的高分&lt;/a&gt;，是一個已經為人所知，甚至為人所用的元件。&lt;/p&gt;

&lt;p&gt;因此，我必須維持良好的向後相容性，以對用戶負責。&lt;/p&gt;

&lt;p&gt;也因此，連我自己想對原始程式做更動，也不敢貿然造次。必須遵守 &lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;Git Flow&lt;/a&gt; 或 &lt;a href=&#34;https://guides.github.com/introduction/flow/&#34;&gt;GitHub Flow&lt;/a&gt; 之類的 &lt;strong&gt;workflow discipline&lt;/strong&gt;，一樣要看 CI 這位&lt;strong&gt;高度客觀中立&lt;/strong&gt;、&lt;strong&gt;不帶感情&lt;/strong&gt;的守門員的臉色。&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2015/12/github-graph.png&#34; alt=&#34;Network graph&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2015/12/github-graph.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Network graph&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;專業，就是對自己也有 discipline。CI，就是&lt;strong&gt;強制幫助你建立 discipline&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;不要輕看-ci-的紅燈&#34;&gt;不要輕看 CI 的紅燈&lt;/h2&gt;

&lt;p&gt;對這個 Ansible role，有一點我一直耿耿於懷：Travis CI 和 CircleCI 的測試結果，時好時壞。&lt;/p&gt;

&lt;p&gt;像以下截圖顯示，同樣都是針對 &lt;code&gt;6598bed&lt;/code&gt; 這個 commit，Travis CI 一次就通過，但 CircleCI 居然會出現一堆紅燈。不死心的我，一直按 rebuild 好幾次，總算才出現綠燈：&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2015/12/circleci-error.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2015/12/circleci-error.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;奇怪的是，同樣都是針對 &lt;code&gt;a9c105e&lt;/code&gt; 這個 commit，這回 CircleCI 一次就通過，反倒是 Travis CI 出狀況：&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2015/12/travisci-error.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2015/12/travisci-error.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;前幾天，我終於忍不住出手。&lt;/p&gt;

&lt;p&gt;反覆比對兩邊的 log，發現，Oracle 疑似會對 jdk 下載點做 rate limiting。每次 Travis CI 及 CircleCI 的 CI 大隊一啟動，Oracle 就惱了。&lt;/p&gt;

&lt;p&gt;所以，不是我的 Ansible role 有問題，是 Oracle 太神經兮兮了。&lt;/p&gt;

&lt;p&gt;怪罪 Oracle 於事無補，問題總得解決⋯⋯&lt;/p&gt;

&lt;p&gt;為了解決這問題，我設計一個 prefetch 機制：只向 Oracle 抓一次需要的 rpm 及 tar.gz 檔案，存放在 role 的 &lt;code&gt;files&lt;/code&gt; 目錄裡面。如此一來，不僅避開 rate limiting 的限制，連帶的也降低整體的 build time，更讓整個 role 架構 refactor 得更乾淨。&lt;/p&gt;

&lt;p&gt;CI，小小的投資，大大的省事。&lt;/p&gt;

&lt;h2 id=&#34;卻顧所來徑&#34;&gt;卻顧所來徑&lt;/h2&gt;

&lt;p&gt;這一切的一切，濫觴都只是一個小起步：要替自己寫的 Ansible role 加上 CI。&lt;/p&gt;

&lt;p&gt;一旦踏出第一步，就注定你會不斷接觸&lt;strong&gt;『遠離平庸』&lt;/strong&gt;的新觀點、新技術。&lt;/p&gt;

&lt;p&gt;你同意嗎？&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>