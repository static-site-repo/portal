<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Potioneer&#39;s Essays</title>
    <link>//william-yeh.net/</link>
    <description>Recent content on Potioneer&#39;s Essays</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Wed, 04 Dec 2019 22:00:00 +0800</lastBuildDate>
    
        <atom:link href="//william-yeh.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>技術面試的小觀點</title>
      <link>//william-yeh.net/post/2019/12/tech-interview/</link>
      <pubDate>Wed, 04 Dec 2019 22:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/12/tech-interview/</guid>
      
        <description>&lt;p&gt;年底，人才流動的旺季。&lt;/p&gt;

&lt;p&gt;這陣子，經手一堆履歷，更面試超過十場，深深覺得，若多一點人懂得&lt;strong&gt;面試&lt;/strong&gt;的遊戲規則，甚至更廣義的&lt;strong&gt;職場&lt;/strong&gt;遊戲規則，將是賓主盡歡的美事。&lt;/p&gt;

&lt;p&gt;Bryan &lt;a href=&#34;https://www.facebook.com/bryan.yao.1/posts/2666223613434413&#34;&gt;說得好&lt;/a&gt;：「求職過程投入越多，越能理解這個遊戲規則，也對自己的目標更清晰！」&lt;/p&gt;

&lt;p&gt;我們或許都沒有前衛到像 Netflix《&lt;a href=&#34;https://www.books.com.tw/products/0010796709&#34;&gt;給力&lt;/a&gt;》那樣「鼓勵員工經常去面試別家公司的工作」，但說實話，多一些面試與被面試的經歷，的確能夠更掌握遊戲規則，也會衝擊到自己原先的浪漫幻想，降低美麗的錯誤，將自己導向更務實的定位。&lt;/p&gt;

&lt;p&gt;面試與被面試都經歷過不少的我，想針對這陣子的所見所聞，分享一些個人的觀點。&lt;/p&gt;

&lt;h2 id=&#34;刷題&#34;&gt;刷題&lt;/h2&gt;

&lt;p&gt;以前我對刷題之舉是很不屑一顧的。總覺得這不是每位軟體工程師都需要去嘗試的。&lt;/p&gt;

&lt;p&gt;不過，就如同程天縱在〈&lt;a href=&#34;https://tuna.press/?p=9978&#34;&gt;自己爬上巨人的肩膀：踏入職場的艱辛旅程&lt;/a&gt;〉一文對美國軟體研發界的觀察：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在十年前的 2009 年，只要會寫軟體，甚至不需要經驗，學校一畢業就可以很容易的找到工作。&lt;/p&gt;

&lt;p&gt;但近十年來，大量中國和印度的留學生來到了美國，專攻互聯網、軟體開發、算法、人工智慧、大數據分析、雲計算等等領域，使得就業競爭越發激烈。尤其川普總統上任以後，緊縮了綠卡和移民的名額，導致美國留學申請的門檻更加提高了。&lt;/p&gt;

&lt;p&gt;因此，過去簡單的、走形式的面試問題和技術測試，難度就越來越高了；尤其網路和社群的普及，考過的題目立刻被分享在網上。因此，各個徵才企業就不斷的更新題庫、甚至提高難度。於是，&lt;a href=&#34;https://leetcode.com/&#34;&gt;LeetCode&lt;/a&gt; 網站上的題目，幾乎都是要去面試的軟體工程師必「做」、必「背」的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;典型的滾雪球軍備競賽，正增強迴路。&lt;/p&gt;

&lt;p&gt;這就是美國軟體研發重鎮的遊戲規則。&lt;/p&gt;

&lt;p&gt;台灣，雖然還沒有發展出如此激烈的競爭態勢，但相對低薪太久了，優秀人才思遷外流，精明外商也在台設置研發據點就地搶人，導致刷題風氣也開始在某些小圈子裡盛行。像這次 &lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman/reward&#34;&gt;iT 邦幫忙鐵人賽&lt;/a&gt;就有兩位以 LeetCode 為主題的得獎者，其中一位甚至還在別處開設&lt;a href=&#34;https://hiskio.com/courses/319&#34;&gt;線上課程&lt;/a&gt;教人 LeetCode 解題呢。&lt;/p&gt;

&lt;p&gt;當然啦，刷題網站不只可拿來操練演算法，據我所知，同溫層當中也有些人拿這類刷題素材做為 TDD kata。最有名的例子就是 &lt;a href=&#34;https://dotblogs.com.tw/hatelove/series/1?qq=LeetCode%2520%E7%B7%B4%E5%8A%9F%E6%88%BF&#34;&gt;91&lt;/a&gt; 了。&lt;/p&gt;

&lt;p&gt;因此，我開始修正對於刷題網站的觀點。我會視情況，用兩種解題心態來看待它們：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Kata 心態。借用刷題素材，熟悉新的程式語言及標準程式庫，或是磨練 TDD 之類的技法。此時的重點在於「型」的固化與內化，不在於演算法的錙銖必較，因此，要有「可能暫時過不了刷題評分系統」的心理準備。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;演算法複雜度優化心態。我建議，盡量自我要求，不要驟然追求速解，該用類似 &lt;a href=&#34;https://www.amazon.com/dp/069111966X&#34;&gt;&lt;em&gt;How to Solve It&lt;/em&gt;&lt;/a&gt; 或 &lt;a href=&#34;https://www.amazon.com/dp/0201120372&#34;&gt;&lt;em&gt;Introduction to Algorithms: A Creative Approach&lt;/em&gt;&lt;/a&gt; 之類的逐步推演思路，有系統地闡述，才能鍛鍊出通用的解題思路，不至於淪為「背解法」。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;（似乎該拿來練一下了⋯⋯）&lt;/p&gt;

&lt;h2 id=&#34;kata-心態&#34;&gt;Kata 心態&lt;/h2&gt;

&lt;p&gt;Kata 心態，不只是拿來面對刷題素材，更應該拿來用在更廣泛的地方。&lt;/p&gt;

&lt;p&gt;尤其是軟體架構。&lt;/p&gt;

&lt;p&gt;雖然我們常說：不要重複造輪子，但這並不代表，我們連造輪子的能力都不去操練。&lt;/p&gt;

&lt;p&gt;譬如說，當你學到分散式系統、微服務架構時，會不會試著甩開別人包得好好的現成框架，改而像 &lt;a href=&#34;https://columns.chicken-house.net/&#34;&gt;Andrew&lt;/a&gt; 那樣自我練習，從頭開始構築方案？ &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;有興趣的話，趁這次機會，用簡化過的 POC 環境來練習看看吧！POC 的好處是你可以專注在問題本身，盡可能地排除其他環境或是框架帶來的干擾，讓你專心地思考問題本身該怎麼解決。也只有 POC，你才能有機會觀察到實際測試的統計數據與評分，讓你比較與改善的過程可以更加科學。  &lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;mdash; 〈&lt;a href=&#34;https://columns.chicken-house.net/2019/08/30/scheduling-practices/&#34;&gt;後端工程師必備: 排程任務的處理機制練習&lt;/a&gt;〉&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;譬如說，當你學到最近當紅的 DDD 及 clean architecture，會不會試著甩開別人包得好好的現成框架，改而像這次 &lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman/reward&#34;&gt;iT 邦幫忙鐵人賽&lt;/a&gt;的優選作品〈&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20111997/ironman/2730&#34;&gt;Think in Domain-Driven Design&lt;/a&gt;〉那樣，試著從頭開始構築方案？&lt;/p&gt;

&lt;p&gt;造輪子的能力，是否曾經刻苦磨練過，在面談時很難隱藏。&lt;/p&gt;

&lt;p&gt;身體學會的，誰也帶不走。&lt;/p&gt;

&lt;h2 id=&#34;行為面談&#34;&gt;行為面談&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;行為面談法&lt;/strong&gt; (behavioral interview) 是許多招募專家推薦的面談策略，搭配 &lt;strong&gt;STAR&lt;/strong&gt; (situation, task, action, result) 問題設計，可以挖掘到很深的層次。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;行為面談，對於「被面談者」來說，挑戰性自不在話下；但是，對於「面試官」來說，也不是很輕鬆的差事。事前的設計要花時間，甚至得客製化；就連面談當下的引導、追溯與記錄，甚至事後的歸納整理與評斷，都非常費神。&lt;/p&gt;

&lt;p&gt;這一直困擾著我。&lt;/p&gt;

&lt;p&gt;所幸，後來受到《&lt;a href=&#34;https://www.books.com.tw/products/0010811254&#34;&gt;Amazon 的人為什麼這麼厲害？&lt;/a&gt;》的啟發，對行為面談法多了些把握。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010811254&#34;&gt;Amazon 的人為什麼這麼厲害？&lt;/a&gt;》作者佐藤將之是日本亞馬遜創始成員，服務了 15 年。他的現身說法，應該頗具代表性。&lt;/p&gt;

&lt;p&gt;本書試著以 Amazon 角度，回答一個關鍵問題：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;到了面試的時候，面試官會注意應徵者的哪些特質呢？&lt;/p&gt;

&lt;p&gt;用一句話來說，就是對象是否具備「&lt;strong&gt;我們的領導力準則&lt;/strong&gt;」(&lt;a href=&#34;https://www.aboutamazon.com/working-at-amazon/our-leadership-principles&#34;&gt;our leadership principles; OLP&lt;/a&gt;) 特質。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很多企業的 vision/mission/values 是寫給華爾街看的。漂亮的話人人會說，怎麼知道是不是玩真的？&lt;/p&gt;

&lt;p&gt;Amazon 的做法很有趣：在面試當中察驗。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/12/olp14.jpg&#34; alt=&#34;Amazon 14 OLP&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/12/olp14.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Amazon 14 OLP&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010811254&#34;&gt;Amazon 的人為什麼這麼厲害？&lt;/a&gt;》解釋 OLP 在面試時扮演吃重的角色：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;OLP 也會實際在面試時採用。對亞馬遜來說，徵才面試的目的，是深入探究面試者在過去的工作過程中如何發現 OLP。換句話說，亞馬遜不會只看技能或成績，還會看面試者是否能加速亞馬遜的成長，而重要的判斷基準就是這套領導力準則。&lt;/p&gt;

&lt;p&gt;第一關面試會由招募經理進行，人事部也會視情況面試。負責第二關的面試官，都會事先從招聘經理那裡收到以下請託：「一對一面試時，希望特別針對這個重點提問。」這個重點也是 OLP 中的其中一項。&lt;/p&gt;

&lt;p&gt;面試官在詳閱履歷表後，便會依照事前收到的要求，思考要發問的問題，與應徵者一對一面試。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;具體的 OLP 提問方式，其實就跟行為面談法的精神相同：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;亞馬遜的招聘面試非常注重&lt;strong&gt;邏輯&lt;/strong&gt;，應該有不少應徵者在面試過程中覺得「被追問到底」。這是因為在面試過程中，面試官必須&lt;strong&gt;具體&lt;/strong&gt;的詢問「基於什麼樣的想法，做了什麼事，如何成功的⋯⋯」，並將其&lt;strong&gt;記錄&lt;/strong&gt;下來。&lt;/p&gt;

&lt;p&gt;不問「這是⋯⋯？」或「是否⋯⋯？」等封閉式問句，而是用 &lt;strong&gt;5W1H&lt;/strong&gt; 來提問。&lt;/p&gt;

&lt;p&gt;經常有應徵者在履歷表上過度誇耀自己的實績，這時若能深入發掘：「如何思考，並具體採取了什麼行動？」就能不被對方的職稱所動搖，看出應徵者的實力。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;我從這本書學到，要把行為面談法連繫到企業的核心價值觀。&lt;/p&gt;

&lt;p&gt;更重要的是，要自己融會出一套，與核心價值聯繫起來的 STAR 架構，不管是面試還是被面試。&lt;/p&gt;

&lt;p&gt;譬如說，針對技術領域，我自己發展出一套容易操作的探索察驗程序，並聯想到《復仇者聯盟》與四顆無限寶石的故事，以便記憶：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/12/stones.png&#34; alt=&#34;Stones&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/12/stones.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Stones&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這需要操練。&lt;/p&gt;

&lt;h2 id=&#34;馬拉松&#34;&gt;馬拉松&lt;/h2&gt;

&lt;p&gt;程天縱在〈&lt;a href=&#34;https://tuna.press/?p=9978&#34;&gt;自己爬上巨人的肩膀：踏入職場的艱辛旅程&lt;/a&gt;〉一文提到：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在美國最夢幻的僱主就是「FLAG」四家企業：Facebook 、LinkedIn、Amazon、Google。這四家企業招聘軟體工程師都非常慎重，進入門檻也都非常的高。&lt;/p&gt;

&lt;p&gt;這些公司的面試，都要經過四、五輪的電話面試、線上技術測試、視訊面試和測驗，最糟糕的是，時間拖得非常長，前後有長到兩、三個月的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010811254&#34;&gt;Amazon 的人為什麼這麼厲害？&lt;/a&gt;》也自嘲：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;人力仲介業界常說亞馬遜的招聘面試會「搞死仲介」，因為他們向亞馬遜推薦的人才都很難被錄用，所以常會抱怨：「已經不知道該推薦誰才好了」。只不過，我們的想法是「寧缺勿濫」，內部有招聘優秀人才的基本思維及穩健機制。&lt;/p&gt;

&lt;p&gt;第一關面試會由招聘經理進行。⋯⋯&lt;/p&gt;

&lt;p&gt;第二關面試可以說很有亞馬遜的風格。首先是人數，最多會從公司內部召集五名面試官，皆為其他部門的管理者階層。這群面試官之中，肯定會包含一位稱為「抬桿者」(bar raiser)  &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; 的人物。第二關面試也是一對一，每次約 40~45 分鐘，最多要進行五場。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我並不盲目鼓吹這種過五關斬六將的風格。不過，如果你遇到這樣的機會，請把握，如果這是值得的。&lt;/p&gt;

&lt;p&gt;請保持向著標竿直跑的勇氣與耐心吧。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;對於軟體架構 kata 感興趣的，請拿 Andrew 的【&lt;a href=&#34;https://columns.chicken-house.net/categories/#%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0:%20%E6%9E%B6%E6%A7%8B%E9%9D%A2%E8%A9%A6%E9%A1%8C&#34;&gt;架構面試題&lt;/a&gt;】系列文章來挑戰看看吧！
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;對於&lt;strong&gt;行為面談法&lt;/strong&gt; (behavioral interview) 感興趣的，可讀讀知名獵頭 Lynn 所寫的〈&lt;a href=&#34;http://www.lynncareers.com/2017/09/behavioralinterview.html&#34;&gt;【面試的藝術】行為面試，現正進行中&lt;/a&gt;〉一文。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;「抬桿者」(bar raiser) 是 Amazon 很獨特的用人思維。請參考〈&lt;a href=&#34;https://bookzone.cwgv.com.tw/topic/details/6007&#34;&gt;亞馬遜如何挑選人才？&lt;/a&gt;〉一文。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Volume Resizing Mechanism in Kubernetes</title>
      <link>//william-yeh.net/post/2019/07/k8s-vol-resizing/</link>
      <pubDate>Wed, 31 Jul 2019 13:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/07/k8s-vol-resizing/</guid>
      
        <description>&lt;p&gt;Non-stop storage scaling (vertical or horizontal scaling) is essential in a data-intensive system, database servers in particular.&lt;/p&gt;

&lt;p&gt;Is it possible in Kubernetes?&lt;/p&gt;

&lt;p&gt;In Kubernetes v1.11 the &lt;em&gt;persistent volume expansion&lt;/em&gt; feature is being promoted to beta and enabled by default.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; There is also a nontrivial real-world use case for this: &lt;a href=&#34;https://strimzi.io/&#34;&gt;Strimzi Kafka operator&lt;/a&gt;. Strimzi merely builds on top of existing Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/storage-classes/&#34;&gt;storage class&lt;/a&gt; mechanism to grow the storage of Kafka cluster.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; Therefore, the volume resizing feature is not exclusively available for Strimzi and Kafka. You can put this feature into your own application as long as you learn the mechanism.&lt;/p&gt;

&lt;p&gt;To get a concrete knowledge of the volume resizing, I&amp;rsquo;ve conducted a simple experiment on GCP and GKE. The experiment tries to answer the following questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Does volume resizing really work in Kubernetes?&lt;/li&gt;
&lt;li&gt;Is the resizing process non-stop?&lt;/li&gt;
&lt;li&gt;Are data still persistent after resizing?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All experiment materials are available in the &lt;a href=&#34;https://github.com/William-Yeh/vol-resize&#34;&gt;vol-resize&lt;/a&gt; repo, for your convenience.&lt;/p&gt;

&lt;h2 id=&#34;about-the-sample-app&#34;&gt;About the sample app&lt;/h2&gt;

&lt;p&gt;A sample app &lt;a href=&#34;https://github.com/William-Yeh/vol-resize/blob/master/voltest.sh&#34;&gt;voltest.sh&lt;/a&gt; will be used for the whole experiment.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; It displays the size of available disk spaces in the specified mount point (as the 1st argument), and also records the data continuously in the specified output file (as the 2nd argument; default to &lt;code&gt;&amp;quot;data&amp;quot;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how it works. Assume that we are in the &lt;code&gt;/home&lt;/code&gt; directory, with available disk space about 4.5 GB:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% pwd
/home
%
% df -h
Filesystem      Size  Used Avail Use% Mounted on
overlay          41G   32G  8.2G  80% /
tmpfs            64M     0   64M   0% /dev
tmpfs           848M     0  848M   0% /sys/fs/cgroup
/dev/sda1        41G   32G  8.2G  80% /root
/dev/sdb1       4.8G   38M  4.5G   1% /home
overlayfs       1.0M  160K  864K  16% /etc/ssh/keys
shm              64M     0   64M   0% /dev/shm
overlayfs       1.0M  160K  864K  16% /etc/ssh/ssh_host_dsa_key
tmpfs           848M  736K  847M   1% /run/metrics
tmpfs           848M     0  848M   0% /run/google/devshell&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At first run, it shows the space of current directory and records them continuously in the &lt;code&gt;data&lt;/code&gt; file within the same directory:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% docker run -it  -v $(pwd):/mnt  williamyeh/voltest  /mnt
---&amp;gt; Checking /mnt/data
1 : 4.5G
2 : 4.5G
3 : 4.5G
4 : 4.5G
5 : 4.5G
6 : 4.5G
7 : 4.5G
8 : 4.5G
9 : 4.5G
10 : 4.5G
11 : 4.5G
12 : 4.5G
^C
%&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Interrupt the execution at 12 on purpose, and run again. You&amp;rsquo;ll see that it picks up the last serial number 12 and continues counting:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% docker run -it  -v $(pwd):/mnt  williamyeh/voltest  /mnt
---&amp;gt; Checking /mnt/data
13 : 4.5G
14 : 4.5G
15 : 4.5G
16 : 4.5G
17 : 4.5G
18 : 4.5G
19 : 4.5G
20 : 4.5G
21 : 4.5G
22 : 4.5G
23 : 4.5G
^C
%&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the &lt;code&gt;data&lt;/code&gt; file should have 23 lines of records:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% cat data
1 : 4.5G
2 : 4.5G
3 : 4.5G
4 : 4.5G
5 : 4.5G
6 : 4.5G
7 : 4.5G
8 : 4.5G
9 : 4.5G
10 : 4.5G
11 : 4.5G
12 : 4.5G
13 : 4.5G
14 : 4.5G
15 : 4.5G
16 : 4.5G
17 : 4.5G
18 : 4.5G
19 : 4.5G
20 : 4.5G
21 : 4.5G
22 : 4.5G
23 : 4.5G
%&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the following experiment we&amp;rsquo;ll use the app and the data file to answer the 3 questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Does volume resizing really work in Kubernetes?&lt;/em&gt; Just inspect the disk spaces it displays.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Is the resizing process non-stop?&lt;/em&gt; Just inspect the screen output.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Are data still persistent after resizing?&lt;/em&gt; Just inspect the content of data file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ready?&lt;/p&gt;

&lt;h2 id=&#34;experiment-part-1-initial-size&#34;&gt;Experiment part 1: initial size&lt;/h2&gt;

&lt;p&gt;The experiment is conducted on GCP and GKE. However, it should apply to other cloud Kubernetes platforms as well, with minor modification.&lt;/p&gt;

&lt;p&gt;➊ Clone the experiment repo to your workspace or Cloud Shell:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% git clone https://github.com/William-Yeh/vol-resize.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;➋ Prepare a Kubernetes cluster in GKE.&lt;/p&gt;

&lt;p&gt;➌ Create a 20GB persistent disk named &lt;code&gt;voltest&lt;/code&gt;.  For example, the following command will create such a persistent disk in the us-central1-a zone:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% gcloud compute disks create         \
    --size=20GB --zone=us-central1-a  \
    voltest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check if the underlying persistent disk is created:&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/07/pd-20gb.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/07/pd-20gb.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;➍ We need a storage class with &lt;code&gt;allowVolumeExpansion&lt;/code&gt; enabled. The manifest file &lt;a href=&#34;https://github.com/William-Yeh/vol-resize/blob/master/expansion-ss.yml&#34;&gt;expansion-ss.yml&lt;/a&gt; is provided as follows:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: expansion
parameters:
  type: pd-standard
provisioner: kubernetes.io/gce-pd
allowVolumeExpansion: true
reclaimPolicy: Delete&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create a storage class &lt;code&gt;expansion&lt;/code&gt; for this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl apply -f expansion-ss.yml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;➎ We need a PV manifest file &lt;a href=&#34;https://github.com/William-Yeh/vol-resize/blob/master/voltest-pv.yml&#34;&gt;voltest-pv.yml&lt;/a&gt; to associate it with the existing persistent disk just created before:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;apiVersion: v1
kind: PersistentVolume
metadata:
  name: voltest
spec:
  storageClassName: &amp;#34;expansion&amp;#34;
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 20Gi
  gcePersistentDisk:
    pdName: voltest
    fsType: ext4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create the persistent volume &lt;code&gt;voltest&lt;/code&gt; now:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl apply -f voltest-pv.yml
persistentvolume/voltest created
% kubectl get pv
NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE
voltest   20Gi       RWO            Retain           Available           expansion               8s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the &lt;code&gt;voltest&lt;/code&gt; PV is in &amp;ldquo;Available&amp;rdquo; status.&lt;/p&gt;

&lt;p&gt;➏ We need a PVC manifest file &lt;a href=&#34;https://github.com/William-Yeh/vol-resize/blob/master/voltest-pvc.yml&#34;&gt;voltest-pvc.yml&lt;/a&gt; to claim the PV:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: voltest
spec:
  volumeName: voltest
  storageClassName: &amp;#34;expansion&amp;#34;
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Claim the persistent volume now:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl apply -f voltest-pvc.yml
persistentvolumeclaim/voltest created

% kubectl get pvc
NAME      STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE
voltest   Bound    voltest   20Gi       RWO            expansion      11s

% kubectl get pv
NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM             STORAGECLASS   REASON   AGE
voltest   20Gi       RWO            Retain           Bound    default/voltest   expansion               13m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the &lt;code&gt;voltest&lt;/code&gt; PV/PVC pair is in &amp;ldquo;Bound&amp;rdquo; status.&lt;/p&gt;

&lt;p&gt;➐ We need a manifest file &lt;a href=&#34;https://github.com/William-Yeh/vol-resize/blob/master/voltest-app.yml&#34;&gt;voltest-app.yml&lt;/a&gt; for our sample app to access the PV/PVC:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;apiVersion: apps/v1
kind: Deployment
...
spec:
  replicas: 1
  ...
  template:   # pod definition
    ...
    spec:
      containers:
        - name: voltest
          image: williamyeh/voltest
          volumeMounts:
            - mountPath: &amp;#34;/mnt&amp;#34;
              name: voltest

      volumes:
        - name: voltest
          persistentVolumeClaim:
            claimName: voltest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Invoke the sample app now:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl apply -f voltest-app.yml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Open another terminal pane to watch the logs continuously:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl logs -f deployment/voltest
---&amp;gt; Checking /mnt/data
1 : 20G
2 : 20G
3 : 20G
4 : 20G
5 : 20G
6 : 20G
7 : 20G
8 : 20G
9 : 20G
10 : 20G
11 : 20G
12 : 20G
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Quite familiar output. Everything works fine.&lt;/p&gt;

&lt;p&gt;Keep the logs running. We&amp;rsquo;ll see it again and again.&lt;/p&gt;

&lt;h2 id=&#34;experiment-part-2-resizing&#34;&gt;Experiment part 2: resizing&lt;/h2&gt;

&lt;p&gt;Now we&amp;rsquo;re about to resize the volume.&lt;/p&gt;

&lt;p&gt;➊ Edit the &lt;code&gt;voltest&lt;/code&gt; PVC:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl edit pvc/voltest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;➋ Change the value of &lt;code&gt;spec.resources.requests.storage&lt;/code&gt; from &lt;code&gt;20Gi&lt;/code&gt; to &lt;code&gt;100Gi&lt;/code&gt;. Save, and exit.&lt;/p&gt;

&lt;p&gt;➌ Check if the logs are still being generated, and the content of the logs.&lt;/p&gt;

&lt;p&gt;➍ Check the size of underlying persistent disk. It should be expanded to 100 GB now.&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/07/pd-100gb.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/07/pd-100gb.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;➎ Check if the PV/PVC are both expanded:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl get pv
NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM             STORAGECLASS   REASON   AGE
voltest   100Gi      RWO            Retain           Bound    default/voltest   expansion               45m

% kubectl get pvc
NAME      STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE
voltest   Bound    voltest   20Gi       RWO            expansion      32m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;PV is expanded to 100 GB, but PVC not yet. In other words, &lt;em&gt;block storage volume&lt;/em&gt; is expanded, but &lt;em&gt;file system&lt;/em&gt; is not yet. The reason is described in the “&lt;a href=&#34;https://kubernetes.io/blog/2018/07/12/resizing-persistent-volumes-using-kubernetes/&#34;&gt;Resizing Persistent Volumes using Kubernetes&lt;/a&gt;” article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;ldquo;Once underlying volume has been expanded by the storage provider, then the PersistentVolume object will reflect the updated size and the PVC will have the &lt;code&gt;FileSystemResizePending&lt;/code&gt; condition.&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;File system expansion must be triggered by terminating the pod using the volume [&amp;hellip;] then pod that uses the PVC can be restarted to finish file system resizing on the node.&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For now the question &lt;em&gt;&amp;ldquo;2. Is the resizing process non-stop?&amp;rdquo;&lt;/em&gt; should be obviously answered. Let&amp;rsquo;s move on to handle the &lt;code&gt;FileSystemResizePending&lt;/code&gt; condition by restarting the related pods.&lt;/p&gt;

&lt;h2 id=&#34;experiment-part-3-restart-the-pod&#34;&gt;Experiment part 3: restart the pod&lt;/h2&gt;

&lt;p&gt;➊ Kill the pod, and let deployment restart a new pod for us (&lt;code&gt;replicas=1&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl get pods
NAME                      READY   STATUS    RESTARTS   AGE
voltest-d88ff8c49-66wk2   1/1     Running   0          23m

% kubectl delete pod voltest-d88ff8c49-66wk2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;➋ Watch the logs! Our sample app will see the &lt;em&gt;file system expansion&lt;/em&gt; progress on the fly:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;13465 : 20G
13466 : 20G
13467 : 20G
13468 : 24G
13469 : 30G
13470 : 30G
13471 : 30G
13472 : 30G
13473 : 30G
13474 : 42G
13475 : 77G
13476 : 99G
13477 : 99G
13478 : 99G
13479 : 99G
13480 : 99G
13481 : 99G
13482 : 99G&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;➌ Check if the PV/PVC are both expanded:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl get pv
NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM             STORAGECLASS   REASON   AGE
voltest   100Gi      RWO            Retain           Bound    default/voltest   expansion               57m

% kubectl get pvc
NAME      STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE
voltest   Bound    voltest   100Gi      RWO            expansion      44m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For now the remaining questions &lt;em&gt;“1. Does volume resizing really work in Kubernetes?”&lt;/em&gt; and &lt;em&gt;“3. Are data still persistent after resizing?”&lt;/em&gt; should be obviously answered.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As can be seen in this experiment, all you have to do to grow the PV/PVC are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Preparation&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use Kubernetes ≥ 1.11.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set &lt;code&gt;allowVolumeExpansion: true&lt;/code&gt; for your &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/storage-classes/&#34;&gt;storage class&lt;/a&gt;, and choose an appropriate underlying &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/volumes/#types-of-volumes&#34;&gt;provisioner&lt;/a&gt; (storage provider).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use the storage class in your PV and PVC.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Expansion&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Increase the PVC &lt;code&gt;spec.resources.requests.storage&lt;/code&gt; value.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Restart the related pods.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kubernetes 1.11 also introduces an alpha feature called &lt;em&gt;online file system expansion&lt;/em&gt;. You can track its progress in the Kubernetes CSI Developer Documentation &amp;ldquo;&lt;a href=&#34;https://kubernetes-csi.github.io/docs/volume-expansion.html&#34;&gt;Volume Expansion&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;You may use the volume resizing feature since Kubernetes 1.11. Read the article published by kubernetes.io in more detail: “&lt;a href=&#34;https://kubernetes.io/blog/2018/07/12/resizing-persistent-volumes-using-kubernetes/&#34;&gt;Resizing Persistent Volumes using Kubernetes&lt;/a&gt;”.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;To know more about how Strimzi implements the volume resizing for Kafka, read these articles: “&lt;a href=&#34;https://strimzi.io/2019/07/08/persistent-storage-improvements.html&#34;&gt;Persistent storage improvements&lt;/a&gt;” and “&lt;a href=&#34;https://strimzi.io/2019/02/28/resizing-persistent-volumes.html&#34;&gt;Resizing persistent volumes with Strimzi&lt;/a&gt;”.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;The Docker image for this &lt;a href=&#34;https://github.com/William-Yeh/vol-resize/blob/master/voltest.sh&#34;&gt;voltest.sh&lt;/a&gt; app is available in &lt;code&gt;williamyeh/voltest&lt;/code&gt; for your convenience.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>CKAD (Certified Kubernetes Application Developer) 相關資料</title>
      <link>//william-yeh.net/post/2019/07/ckad-materials/</link>
      <pubDate>Thu, 11 Jul 2019 17:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/07/ckad-materials/</guid>
      
        <description>&lt;p&gt;Linux Foundation 旗下的 &lt;a href=&#34;https://www.cncf.io/&#34;&gt;CNCF (Cloud Native Computing Foundation)&lt;/a&gt; 提供兩個與 Kubernetes 相關的個人技術檢定：偏維運的 &lt;a href=&#34;https://www.cncf.io/certification/cka/&#34;&gt;CKA (Certified Kubernetes Administrator)&lt;/a&gt;，以及偏研發的 &lt;a href=&#34;https://www.cncf.io/certification/ckad/&#34;&gt;CKAD (Certified Kubernetes Application Developer)&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;其中，CKAD 與我關注的範圍、與我設計的工作坊最接近，便想進一步瞭解它的細節。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:15em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/07/kubernetes-ckad-color.png&#34; alt=&#34;CKAD logo&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/07/kubernetes-ckad-color.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;CKAD logo&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;根據官方資料，CKAD 的 &lt;a href=&#34;https://github.com/cncf/curriculum&#34;&gt;curriculum&lt;/a&gt; 只有列出檢定考試的主題與比例，並沒有列出具體的應考讀物。目前看到最接近「欽定本」地位的 CKAD 檢定準備教材，就屬 Linux Foundation 製作的 &lt;a href=&#34;https://training.linuxfoundation.org/training/kubernetes-for-developers/&#34;&gt;LDF259&lt;/a&gt; 線上課程了——全長 35 小時，$299 美金。&lt;/p&gt;

&lt;p&gt;不過，是否還有其他選擇？&lt;/p&gt;

&lt;h2 id=&#34;實惠的線上課程&#34;&gt;實惠的線上課程&lt;/h2&gt;

&lt;p&gt;我在 Udemy 找到一份新台幣 $390 的線上課程 &lt;a href=&#34;https://www.udemy.com/course/certified-kubernetes-application-developer/&#34;&gt;Kubernetes Certified Application Developer (CKAD) with Tests&lt;/a&gt;。花十幾分鐘試過它的預覽單元，發現它的內容很扎實，實作練習也很活潑，應該滿適合從實作中學習的人，從過程中發現不足之處，再去找相關資料補強。&lt;/p&gt;

&lt;p&gt;即使我對 Kubernetes 已經有一定的掌握程度，也有設計實作教材的能力，但我還是喜歡以它作為配套。&lt;/p&gt;

&lt;p&gt;這會是我的 CKAD 首推材料。我建議，即使不購買這份教材，也請花十幾分鐘把它的預覽單元全都走過一遍。&lt;/p&gt;

&lt;h2 id=&#34;牛刀小試&#34;&gt;牛刀小試&lt;/h2&gt;

&lt;p&gt;根據 &lt;a href=&#34;https://training.linuxfoundation.org/go/cka-ckad-candidate-handbook&#34;&gt;CKAD 線上考試規定&lt;/a&gt;，應考時，不能使用紙張或數位筆記軟體 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。因此，這場檢定，很大幅度在考核肌肉記憶，以及 &lt;a href=&#34;https://kubernetes.io/docs/&#34;&gt;kubernetes.io/docs/&lt;/a&gt; 官方文件查找能力。&lt;/p&gt;

&lt;p&gt;既然遊戲規則訂成這樣，我們就該先體驗一下這有多麼殘酷。呵。&lt;/p&gt;

&lt;p&gt;我建議，如果你曾經有過一點點 Kubernetes 經驗，此刻，請先去 &lt;a href=&#34;https://github.com/dgkanatsios/CKAD-exercises&#34;&gt;dgkanatsios/CKAD-exercises&lt;/a&gt; 挑戰看看你的肌肉記憶。儘管這不是官方釋出的模擬試題，但牛刀小試一番，接受洗禮，或是打擊，總是好的。&lt;/p&gt;

&lt;h2 id=&#34;官方文件&#34;&gt;官方文件&lt;/h2&gt;

&lt;p&gt;經過以上的洗禮，知道自己不足之處，就可以開始啟動特訓之旅。&lt;/p&gt;

&lt;p&gt;根據 &lt;a href=&#34;https://training.linuxfoundation.org/go/cka-ckad-candidate-handbook&#34;&gt;CKAD 線上考試規定&lt;/a&gt;，應考時，你不能向 Google 求助；你能用瀏覽器查找的文件，只有 Kubernetes 官方文件 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;因此，請盡快熟悉以下幾個限定的參考資料來源：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/&#34;&gt;https://kubernetes.io/docs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/&#34;&gt;https://github.com/kubernetes/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/blog/&#34;&gt;https://kubernetes.io/blog/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也請從現在開始自我要求，不論在其他任何地方看到的資料，都請務必回到以上官方欽定的參考資料所在地，逐一找出可與之對應的關鍵字、章節、語法規格、範例。&lt;/p&gt;

&lt;p&gt;這是 CKAD 應考時，你唯一的浮木舟。即使你並未志在 CKAD，這仍然是很好的習慣。&lt;/p&gt;

&lt;h2 id=&#34;前人經驗&#34;&gt;前人經驗&lt;/h2&gt;

&lt;p&gt;有了以上的心理建設，接下來，就可以用健康心態欣賞一下前人的經驗：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://ottodeng.io/post/ckad-exam/&#34;&gt;CKAD Exam&lt;/a&gt; on Jul 9, 2018.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://medium.com/@ikaboubi/my-feedback-about-cka-and-ckad-e82a35585fe9&#34;&gt;My Feedback about CKA and CKAD&lt;/a&gt; on Jun 4, 2018.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://medium.com/chotot/tips-tricks-to-pass-certified-kubernetes-application-developer-ckad-exam-67c9e1b32e6e&#34;&gt;Tips to pass Certified Kubernetes Application Developer (CKAD) exam&lt;/a&gt; on Dec 15, 2018.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;感謝你花了幾分鐘，讀完由一位沒參加過 CKAD 的人所整理的這篇文章。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://training.linuxfoundation.org/go/cka-ckad-candidate-handbook&#34;&gt;CKA/CKAD Candidate Handbook&lt;/a&gt; v1.20 提到：“The following resources are forbidden during the exam: Use of devices other than the exam desktop; Notes;  Documentation; Notepads (other than what’s provided within the exam browser tab); Course manuals [&amp;hellip;]”
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://training.linuxfoundation.org/go/cka-ckad-candidate-handbook&#34;&gt;CKA/CKAD Candidate Handbook&lt;/a&gt; v1.20 提到：“You are permitted to use your Chrome or Chromium browser to open one additional tab in order to access assets at &lt;a href=&#34;https://kubernetes.io/docs/&#34;&gt;https://kubernetes.io/docs/&lt;/a&gt; and its subdomain, &lt;a href=&#34;https://github.com/kubernetes/&#34;&gt;https://github.com/kubernetes/&lt;/a&gt; and its subdomains, or &lt;a href=&#34;https://kubernetes.io/blog/&#34;&gt;https://kubernetes.io/blog/&lt;/a&gt;. No other tabs may be opened and no other sites may be navigated to. The allowed sites above may contain links that point to external sites. It is the responsibility of the candidate not to click on any links that cause them to navigate to a domain that is not allowed.”
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Docker File Permissions on Windows</title>
      <link>//william-yeh.net/post/2019/06/docker-file-permissions/</link>
      <pubDate>Mon, 24 Jun 2019 12:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/06/docker-file-permissions/</guid>
      
        <description>&lt;p&gt;Currently Linux containers are still more popular than Windows containers. And Windows users often need to use Linux containers even from their Windows computers.&lt;/p&gt;

&lt;p&gt;Recently I&amp;rsquo;ve found something very strange about Linux-style file permissions when the Docker images are built from Windows hosts.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; Therefore, I&amp;rsquo;ve conducted a suite of test cases to investigate whether file permissions are preserved with Docker &amp;amp; &lt;a href=&#34;https://skaffold.dev/&#34;&gt;Skaffold&lt;/a&gt; toolchains. All experiment materials are available in the &lt;a href=&#34;https://github.com/William-Yeh/container-chmod&#34;&gt;container-chmod&lt;/a&gt; repo.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% git clone https://github.com/William-Yeh/container-chmod.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;experiment-setting&#34;&gt;Experiment setting&lt;/h2&gt;

&lt;p&gt;The experiments are composed of a few files with typical Unix-style file permissions:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;.
├── skaffold.yaml
└── src
    ├── Dockerfile
    ├── file-644.txt
    └── script-755.sh

-rw-r--r-- 1 william  70 Jun 24 17:01 Dockerfile
-rw-r--r-- 1 william  57 Jun 24 15:17 file-644.txt
-rwxr-xr-x 1 william  84 Jun 24 15:19 script-755.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will use two ways to build the Linux-container images:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To build image with &lt;code&gt;docker build&lt;/code&gt; command (Docker Engine 18.09.2).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To build image with &lt;code&gt;skaffold build&lt;/code&gt; command (Skaffold v0.32.0).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And we&amp;rsquo;ll conduct the experiments in the following environment settings:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Host&lt;/th&gt;
&lt;th&gt;Built w/ Docker CLI&lt;/th&gt;
&lt;th&gt;Built w/ Skaffold (WSL version)&lt;/th&gt;
&lt;th&gt;Built w/ Skaffold (host version)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;macOS&lt;/td&gt;
&lt;td&gt;➊&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;➋&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;WSL + Docker Desktop for Windows&lt;/td&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;➍&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;⑹&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Will all experiments display the correct file permissions?&lt;/p&gt;

&lt;h2 id=&#34;macos-➊-➋&#34;&gt;macOS: ➊ ➋&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s begin with macOS, which acts as the control group.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/253423&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/253423.svg&#34; alt=&#34;asciicast&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect! All Unix-style file permissions are set correctly.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;total 20                                                                        
drwxr-xr-x    1 root     root          4096 Jun 24 22:30 .                      
drwxr-xr-x    1 root     root          4096 Jun 24 22:30 ..                     
-rw-r--r--    1 root     root            70 Jun 24 22:18 Dockerfile             
-rw-r--r--    1 root     root            57 Jun 24 22:18 file-644.txt           
-rwxr-xr-x    1 root     root            84 Jun 24 22:18 script-755.sh          &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;wsl-③-➍&#34;&gt;WSL: ③ ➍&lt;/h2&gt;

&lt;p&gt;On Windows, my preference is to use WSL to connect to Docker Desktop for Windows.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;  Will this combination work well with Unix-style file permissions?&lt;/p&gt;

&lt;p&gt;Below are experiments conducted on WSL:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/253450&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/253450.svg&#34; alt=&#34;asciicast&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown in this demo, the ➍ skaffold experiment works quite well on WSL. The ③ docker-cli experiment works, though not the best-possible Unix-style file permissions:&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SECURITY WARNING: You are building a Docker image from Windows against a non-Windows Docker host. All files and directories added to build context will have &lt;code&gt;&#39;-rwxr-xr-x&#39;&lt;/code&gt; permissions. It is recommended to double check and reset permissions for sensitive files and directories.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;pure-windows-⑤-⑹&#34;&gt;Pure Windows: ⑤ ⑹&lt;/h2&gt;

&lt;p&gt;What if a Windows user sticks with pure-Windows toolchains, i.e., use traditional Command Prompt (cmd) to connect to Docker Desktop for Windows?&lt;/p&gt;

&lt;p&gt;The ⑤ docker-cli experiment shows the same result as in previous ③ &lt;code&gt;&#39;-rwxr-xr-x&#39;&lt;/code&gt; permission:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;C:\&amp;gt; docker run -it test-docker                                           
File permission (script-755.sh) should be: 755  rwxr-xr-x              
total 20                                                               
drwxr-xr-x    1 root     root          4096 Jun 25 03:45 .             
drwxr-xr-x    1 root     root          4096 Jun 25 03:45 ..            
-rwxr-xr-x    1 root     root            70 Jun 25 03:44 Dockerfile    
-rwxr-xr-x    1 root     root            57 Jun 24 08:03 file-644.txt  
-rwxr-xr-x    1 root     root            84 Jun 24 08:03 script-755.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, the ⑹ skaffold experiment shows the &lt;em&gt;worst&lt;/em&gt; result:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;C:\&amp;gt; skaffold-windows-amd64.exe build
Generating tags...
 - test-skaffold -&amp;gt; test-skaffold:dbe377c
Tags generated in 228.0023ms
Starting build...
Found [docker-for-desktop] context, using local docker daemon.
Building [test-skaffold]...
Sending build context to Docker daemon  4.096kB
Step 1/4 : FROM alpine:3.9.4
...


C:\&amp;gt; docker run -it 25997136449a
docker: Error response from daemon: OCI runtime create failed: container_linux.go:344:
starting container process caused &amp;#34;exec: \&amp;#34;/app/script-755.sh\&amp;#34;: permission denied&amp;#34;: unknown.


C:\&amp;gt; docker run -it 25997136449a  ls -al
total 20
drwxr-xr-x    1 root     root          4096 Jun 25 03:51 .
drwxr-xr-x    1 root     root          4096 Jun 25 03:53 ..
-rw-rw-rw-    1 root     root            70 Jun 25 03:44 Dockerfile
-rw-rw-rw-    1 root     root            57 Jun 24 08:03 file-644.txt
-rw-rw-rw-    1 root     root            84 Jun 24 08:03 script-755.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As shown in the demo, Skaffold blindly sets all the file permissions as &lt;code&gt;&#39;-rw-rw-rw-&#39;&lt;/code&gt;, eliminating the &lt;code&gt;&#39;x&#39;&lt;/code&gt; permission required for the &lt;code&gt;script-755.sh&lt;/code&gt; script file.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Different Unix-style file permissions will be generated in the Docker images when building Linux containers with different combination of host operating systems, docker cli, and Skaffold toolchains:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Host&lt;/th&gt;
&lt;th&gt;Built w/ Docker CLI&lt;/th&gt;
&lt;th&gt;Built w/ Skaffold (WSL version)&lt;/th&gt;
&lt;th&gt;Built w/ Skaffold (host version)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;macOS&lt;/td&gt;
&lt;td&gt;➊&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;➋&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;WSL + Docker Desktop for Windows&lt;/td&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;➍&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;⑹&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Results:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Best results: ➊ ➋ ➍&lt;/li&gt;
&lt;li&gt;Acceptable results: ③ ⑤&lt;/li&gt;
&lt;li&gt;Unacceptable results: ⑹&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My suggestions for building Linux images are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If your applications require adequate file permissions (especially the &lt;code&gt;&#39;x&#39;&lt;/code&gt;) and you cannot completely control the build toolchains to use, be sure to modify your &lt;code&gt;Dockerfile&lt;/code&gt; accordingly.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you can control the whole toolchains to use (e.g., in the CI/CD pipeline), stick with the Linux ones.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;There is also an issue about this in Skaffold: &lt;a href=&#34;https://github.com/GoogleContainerTools/skaffold/issues/1470&#34;&gt;Issue #1470: Permission denied through skaffold&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;See my article “&lt;a href=&#34;//william-yeh.net/post/2019/03/wsl-cmder-zsh/&#34;&gt;在 Windows 上復刻 Mac 使用習慣&lt;/a&gt;”.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;See &lt;a href=&#34;https://github.com/moby/moby/issues/20397#issuecomment-185471832&#34;&gt;thaJeztah&amp;rsquo;s comment on GitHub&lt;/a&gt; about this.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Auto-Reload from ConfigMap</title>
      <link>//william-yeh.net/post/2019/06/autoreload-from-configmap/</link>
      <pubDate>Mon, 17 Jun 2019 17:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/06/autoreload-from-configmap/</guid>
      
        <description>

&lt;p&gt;My previous article &amp;ldquo;&lt;a href=&#34;//william-yeh.net/post/2019/06/inotify-in-containers/&#34;&gt;Inotify in Containers&lt;/a&gt;&amp;rdquo; has demonstrated that when ConfigMap is mounted as directories, any changes in the ConfigMap will propagate to related pods, and can be detected with &lt;code&gt;inotify&lt;/code&gt;-like APIs.&lt;/p&gt;

&lt;p&gt;A follow-up question might be: what should a well-behaved application react to this trigger accordingly? What if it&amp;rsquo;s a ill-designed application?&lt;/p&gt;

&lt;p&gt;To clarify this I&amp;rsquo;ve conducted a series of experiments for 3 possible configmap-reloading  strategies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Built-in auto-reloading apps&lt;/li&gt;
&lt;li&gt;External signals&lt;/li&gt;
&lt;li&gt;Pod rollout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article I&amp;rsquo;m going to explain the experiments and preliminary findings.  All experiment materials are available in the &lt;a href=&#34;https://github.com/William-Yeh/configmap-auto-reload&#34;&gt;configmap-auto-reload&lt;/a&gt; repo.&lt;/p&gt;

&lt;h2 id=&#34;built-in-auto-reloading-apps&#34;&gt;Built-in auto-reloading apps&lt;/h2&gt;

&lt;p&gt;Some applications (e.g., &lt;a href=&#34;https://traefik.io/&#34;&gt;Traefik&lt;/a&gt;) are smart enough to gracefully reload themselves whenever they detect any configuration changes without downtime.  Will this work with Kubernetes ConfigMap?&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&#34;https://github.com/William-Yeh/configmap-auto-reload/tree/master/traefik-example&#34;&gt;traefik-example&lt;/a&gt; demo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/251179&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/251179.svg&#34; alt=&#34;asciicast&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect!  Traefik auto-reloads itself as long as you correctly mount the &lt;code&gt;traefik-config&lt;/code&gt; ConfigMap as &lt;code&gt;/etc/traefik/&lt;/code&gt; directory for the pod.  Here&amp;rsquo;s the related &lt;a href=&#34;https://github.com/William-Yeh/configmap-auto-reload/blob/master/traefik-example/traefik-config.yml#L11-L13&#34;&gt;code snippet&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;[file]
watch = true
directory = &amp;#34;/etc/traefik/&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;external-signals&#34;&gt;External signals&lt;/h2&gt;

&lt;p&gt;Some applications can &lt;em&gt;reload&lt;/em&gt; configurations; but not &lt;em&gt;auto-reload&lt;/em&gt;. Instead, they reload their configurations when they are &lt;em&gt;told&lt;/em&gt; to do so.  For example, when Nginx receives a &lt;code&gt;HUP&lt;/code&gt; signal (&lt;code&gt;nginx -s reload&lt;/code&gt;) &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, and when Apache HTTP Server receives a &lt;code&gt;HUP&lt;/code&gt; signal (&lt;code&gt;apache -k restart&lt;/code&gt;) or &lt;code&gt;USR1&lt;/code&gt; signal (&lt;code&gt;apache -k graceful&lt;/code&gt;) &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, they will reload new configurations without downtime.&lt;/p&gt;

&lt;p&gt;Who should be the &lt;code&gt;HUP&lt;/code&gt; signal sender in Kubernetes?&lt;/p&gt;

&lt;p&gt;Before Docker and Kubernetes rule the world, there were plenty of such tools, e.g., &lt;a href=&#34;https://github.com/rvoicilas/inotify-tools&#34;&gt;inotify-tools&lt;/a&gt; and &lt;a href=&#34;https://github.com/kimmobrunfeldt/chokidar-cli&#34;&gt;Chokidar cli&lt;/a&gt;.  People used them to watch for changes in specified directories and to invoke dedicated actions accordingly (including sending signals, of course).&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/06/inotifywait.png&#34; alt=&#34;Combo trick: Inotifywait &amp;#43; Nginx&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/06/inotifywait.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Combo trick: Inotifywait &amp;#43; Nginx&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;Will this combo trick work with Kubernetes ConfigMap?&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&#34;https://github.com/William-Yeh/configmap-auto-reload/tree/master/inotifywait-example&#34;&gt;inotifywait-example&lt;/a&gt; demo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/251666&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/251666.svg&#34; alt=&#34;asciicast&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good!  Inotifywait detects the changes and sends &lt;code&gt;HUP&lt;/code&gt; signals to Nginx as long as you correctly mount the &lt;code&gt;nginx-config&lt;/code&gt; ConfigMap as &lt;code&gt;/etc/nginx/&lt;/code&gt; directory for the pod.  Here&amp;rsquo;s the related &lt;a href=&#34;https://github.com/William-Yeh/configmap-auto-reload/blob/master/inotifywait-example/watch-nginx.sh#L13-L22&#34;&gt;code snippet&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;if [[ &amp;#34;$(inotifywatch -e modify,create,delete,move -t 15 /etc/nginx/ 2&amp;gt;&amp;amp;1)&amp;#34; =~ filename ]]; then
    echo &amp;#34;Try to verify updated nginx config...&amp;#34;
    nginx -t
    if [ $? -ne 0 ]; then
        echo &amp;#34;ERROR: New configuration is invalid!!&amp;#34;
    else
        echo &amp;#34;Reloading nginx with new config...&amp;#34;
        nginx -s reload
    fi
fi;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;DISCLAIMER: it&amp;rsquo;s just for demo; not a robust implementation. For more examples, see &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;CAUTION: it is against the best practice of &amp;ldquo;one process per container&amp;rdquo; policy.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;  If you really want to use this combo trick, try to model it as &amp;ldquo;multiple containers within a single pod.&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;pod-rollout&#34;&gt;Pod rollout&lt;/h2&gt;

&lt;p&gt;Some applications do not have any configuration reloading mechanism. What should we do? Maybe the only reasonable way is to rollout their running instances, and just spawn new ones with the new configurations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/stakater/Reloader&#34;&gt;Reloader&lt;/a&gt; is a generic solution for Kubernetes. With the help of it, pods can be restarted whenever related ConfigMap has changed.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&#34;https://github.com/William-Yeh/configmap-auto-reload/tree/master/reloader-example&#34;&gt;reloader-example&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/251670&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/251670.svg&#34; alt=&#34;asciicast&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect!  Nginx pods get rolling updated by Reloader as long as you annotate the Nginx deployment with &lt;code&gt;configmap.reloader.stakater.com/reload&lt;/code&gt;.  Here&amp;rsquo;s the related &lt;a href=&#34;https://github.com/William-Yeh/configmap-auto-reload/blob/master/reloader-example/nginx-service.yml#L25-L26&#34;&gt;code snippet&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  annotations:
    configmap.reloader.stakater.com/reload: &amp;#34;nginx-config&amp;#34;
  ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If your application is smart enough to gracefully reload itself whenever it detects any configuration changes, it continues working well with ConfigMap in Kubernetes.&lt;/p&gt;

&lt;p&gt;If not so smart, an easier approach is to use automatic tools (e.g., &lt;a href=&#34;https://github.com/stakater/Reloader&#34;&gt;Reloader&lt;/a&gt;) to rolling update related pods.&lt;/p&gt;

&lt;p&gt;I will not recommend the watch+signal approach (e.g., &lt;a href=&#34;https://github.com/rvoicilas/inotify-tools&#34;&gt;inotify-tools&lt;/a&gt;). It is prone to error and zombie processes.&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      Series of Articles
    
  &lt;/div&gt;
  

&lt;p&gt;❶ &lt;a href=&#34;//william-yeh.net/post/2019/06/inotify-in-containers/&#34;&gt;Inotify in Containers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❷ &lt;a href=&#34;//william-yeh.net/post/2019/06/containers-and-env/&#34;&gt;Containers and Environment Variables&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;➌ Auto-Reload from ConfigMap&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Nginx official document: &lt;a href=&#34;http://nginx.org/en/docs/control.html&#34;&gt;Controlling nginx&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Apache official document: &lt;a href=&#34;https://httpd.apache.org/docs/2.4/stopping.html&#34;&gt;Stopping and Restarting Apache HTTP Server&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;An implementation worth studying: &lt;a href=&#34;https://github.com/rosskukulinski/nginx-kubernetes-reload&#34;&gt;https://github.com/rosskukulinski/nginx-kubernetes-reload&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;Q&amp;amp;A in Stack Overflow: &lt;a href=&#34;https://stackoverflow.com/questions/41031170/nginx-reload-configuration-best-practice&#34;&gt;Nginx Reload Configuration Best Practice&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;&lt;a href=&#34;https://github.com/telephone/nginx-watch&#34;&gt;https://github.com/telephone/nginx-watch&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;&lt;a href=&#34;https://cloud.google.com/solutions/best-practices-for-building-containers&#34;&gt;Best practices for building containers&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      
    </item>
    
    <item>
      <title>Containers and Environment Variables</title>
      <link>//william-yeh.net/post/2019/06/containers-and-env/</link>
      <pubDate>Mon, 17 Jun 2019 14:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/06/containers-and-env/</guid>
      
        <description>&lt;p&gt;My previous article &amp;ldquo;&lt;a href=&#34;//william-yeh.net/post/2019/06/inotify-in-containers/&#34;&gt;Inotify in Containers&lt;/a&gt;&amp;rdquo; has demonstrated that when ConfigMap is mounted as &lt;em&gt;directories&lt;/em&gt;, any changes in the ConfigMap will propagate to related pods.&lt;/p&gt;

&lt;p&gt;A follow-up question might be: what if the ConfigMap is mounted as &lt;em&gt;environment variables&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Some said that the answer is NO in Kubernetes&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;; even in the old Docker world&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.  Therefore, I&amp;rsquo;d like to begin with a simple experiment to try to answer the question: After a container starts, will it see any changes of environment variables?&lt;/p&gt;

&lt;p&gt;The experiment material is available at &lt;a href=&#34;https://github.com/William-Yeh/container-and-env&#34;&gt;https://github.com/William-Yeh/container-and-env&lt;/a&gt; , and here&amp;rsquo;s a simple demo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/252073&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/252073.svg&#34; alt=&#34;asciicast&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is obvious in the demo that the changes of environment variables will not affect already-running processes inside the containers &amp;mdash; let alone pods in the Kubernetes world.&lt;/p&gt;

&lt;p&gt;To simply put, if you want ConfigMap to propagate its changes to related pods, mount the ConfigMap as &lt;em&gt;directories&lt;/em&gt;, not &lt;em&gt;environment variables&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      Series of Articles
    
  &lt;/div&gt;
  

&lt;p&gt;❶ &lt;a href=&#34;//william-yeh.net/post/2019/06/inotify-in-containers/&#34;&gt;Inotify in Containers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❷ Containers and Environment Variables&lt;/p&gt;

&lt;p&gt;➌ &lt;a href=&#34;//william-yeh.net/post/2019/06/autoreload-from-configmap/&#34;&gt;Auto-Reload from ConfigMap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;An analysis of ConfigMap hot-reload can be found in the article by Jimmy Song: “&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/configmap-hot-update.html&#34;&gt;ConfigMap 的热更新&lt;/a&gt;”.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;A good Q&amp;amp;A in Stack Overflow: &lt;a href=&#34;https://stackoverflow.com/a/54412751/714426&#34;&gt;Reload configuration when env variable has changed&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      
    </item>
    
    <item>
      <title>Inotify in Containers</title>
      <link>//william-yeh.net/post/2019/06/inotify-in-containers/</link>
      <pubDate>Mon, 10 Jun 2019 18:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/06/inotify-in-containers/</guid>
      
        <description>

&lt;p&gt;It is usually necessary to watch for any changes in file systems, both in development and in production modes. For example, in the development mode &lt;a href=&#34;https://webpack.js.org/&#34;&gt;Webpack&lt;/a&gt; can watch files and recompile whenever they change; in the production mode &lt;a href=&#34;https://github.com/hashicorp/consul-template&#34;&gt;Consul Template&lt;/a&gt; can watch runtime configs and invoke specific applications whenever they change.&lt;/p&gt;

&lt;p&gt;These are well-known scenarios in traditional pre-container world.  How about the container world? Do they behave the same in the new container world?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve occasionally found that something behave differently in the container world. To clarify this I&amp;rsquo;ve conducted a series of experiments. In this article I&amp;rsquo;m going to explain the experiments and preliminary findings.  All experiment materials are available in the &lt;a href=&#34;https://github.com/William-Yeh/fswatch&#34;&gt;fswatch&lt;/a&gt; repo.&lt;/p&gt;

&lt;h2 id=&#34;experiment-setting&#34;&gt;Experiment setting&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve divided the experiments into 4 groups.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Group A (experiment 1 to 3) is the traditional native mode: run native apps in their native host operating systems, respectively. This is considered as the control group.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Group B (experiment 4 to 6) is the Linux container mode: run the same containerized Linux app in 3 different host operating systems.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Group C (experiment 7) is the Windows container mode: run the containerized Windows app in the Windows operating system.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Group D (experiment 8) is the Kubernetes mode: run the containerized Linux app in Kubernetes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Host OS&lt;/th&gt;
&lt;th&gt;App run as&lt;br/&gt;native app&lt;/th&gt;
&lt;th&gt;App run as&lt;br/&gt;Linux Container&lt;/th&gt;
&lt;th&gt;App run as&lt;br/&gt;Windows Container&lt;/th&gt;
&lt;th&gt;‖&lt;/th&gt;
&lt;th&gt;App run in&lt;br/&gt;K8s (Linux Container)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Linux&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/William-Yeh/fswatch/tree/master/test-matrix/1_native_linux&#34;&gt;1&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/4_host_linux_container_linux&#34;&gt;4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;‖&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/8_k8s_linux&#34;&gt;8&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Mac&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/William-Yeh/fswatch/tree/master/test-matrix/2_native_mac&#34;&gt;2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/5_host_mac_container_linux&#34;&gt;5&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/3_native_win&#34;&gt;3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/6_host_win_container_linux&#34;&gt;6&lt;/a&gt; (LCOW)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/7_host_win_container_win&#34;&gt;7&lt;/a&gt; (WCOW)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;group-a-native-mode&#34;&gt;Group A: native mode&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start with the native mode as the control group. We&amp;rsquo;ll see how it works in the traditional world of Linux, Mac, and Windows.&lt;/p&gt;

&lt;p&gt;To make life easier, I&amp;rsquo;m using the &lt;a href=&#34;https://github.com/fsnotify/fsnotify&#34;&gt;fsnotify&lt;/a&gt; library to unify a variety of underlying operating system APIs (e.g., &lt;a href=&#34;https://en.wikipedia.org/wiki/Inotify&#34;&gt;&lt;code&gt;inotify&lt;/code&gt;&lt;/a&gt; in Linux, &lt;a href=&#34;https://en.wikipedia.org/wiki/Kqueue&#34;&gt;&lt;code&gt;kqueue&lt;/code&gt;&lt;/a&gt; in macOS, and &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-readdirectorychangesw&#34;&gt;&lt;code&gt;ReadDirectoryChangesW&lt;/code&gt;&lt;/a&gt; in Windows).  Statically-linked binaries for the 3 platforms are generated with the Go compiler 1.12.5:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2,943,200 (bytes) &lt;code&gt;fswatch-linux-x86_64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2,861,360 (bytes) &lt;code&gt;fswatch-mac&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2,914,304 (bytes) &lt;code&gt;fswatch-x86_64.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These experiments are easy to try by yourself. Take experiment &lt;a href=&#34;https://github.com/William-Yeh/fswatch/tree/master/test-matrix/1_native_linux&#34;&gt;1&lt;/a&gt; &amp;ldquo;run native Linux app in Linux host OS&amp;rdquo; for example:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/250732&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/250732.svg&#34; alt=&#34;asciicast&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this group, changes in the file system can be tracked successfully by their native API mechanisms, respectively.&lt;/p&gt;

&lt;h2 id=&#34;group-b-and-c-container-mode&#34;&gt;Group B and C: container mode&lt;/h2&gt;

&lt;p&gt;Containers make things a little bit complicated.&lt;/p&gt;

&lt;p&gt;TL;DR: &lt;em&gt;The LCOW version doesn&amp;rsquo;t work well.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When there&amp;rsquo;s a mismatch between host OS and container, &lt;code&gt;inotify&lt;/code&gt; may not work well.&lt;/p&gt;

&lt;p&gt;Take experiment &lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/6_host_win_container_linux&#34;&gt;6&lt;/a&gt; (LCOW) &amp;ldquo;run containerized Linux app in Windows host OS&amp;rdquo; for example. The &lt;a href=&#34;https://docs.docker.com/docker-for-windows/troubleshoot/#inotify-on-shared-drives-does-not-work&#34;&gt;document&lt;/a&gt; for Docker Desktop for Windows has a warning for us:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Inotify on shared drives does not work&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Currently, &lt;code&gt;inotify&lt;/code&gt; does not work on Docker Desktop for Windows. This becomes evident, for example, when an application needs to read/write to a container across a mounted drive. Instead of relying on filesystem &lt;code&gt;inotify&lt;/code&gt;, we recommend using polling features for your framework or programming language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For Windows users, &lt;code&gt;inotify&lt;/code&gt; works well in the WCOW mode (experiment &lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/7_host_win_container_win&#34;&gt;7&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;On the other hand, Mac users are luckier.  Docker Desktop for Mac doesn&amp;rsquo;t have much trouble here (experiment &lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/5_host_mac_container_linux&#34;&gt;5&lt;/a&gt;) thanks to excellent implementation of &lt;strong&gt;osxfs&lt;/strong&gt;.  See &amp;ldquo;&lt;a href=&#34;https://docs.docker.com/docker-for-mac/osxfs/&#34;&gt;File system sharing (osxfs)&lt;/a&gt;&amp;rdquo; and &amp;ldquo;&lt;a href=&#34;https://docs.docker.com/docker-for-mac/osxfs-caching/&#34;&gt;Performance tuning for volume mounts (shared filesystems)&lt;/a&gt;&amp;rdquo; articles for more information.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;File system events&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most &lt;code&gt;inotify&lt;/code&gt; events are supported in bind mounts, and likely &lt;code&gt;dnotify&lt;/code&gt; and &lt;code&gt;fanotify&lt;/code&gt; (though they have not been tested) are also supported. This means that file system events from macOS are sent into containers and trigger any listening processes there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;group-d-k8s-mode&#34;&gt;Group D: K8s mode&lt;/h2&gt;

&lt;p&gt;How about Kubernetes?  Does &lt;code&gt;inotify&lt;/code&gt; work well with the ConfigMap?&lt;/p&gt;

&lt;p&gt;Below is the demo for experiment &lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/8_k8s_linux&#34;&gt;8&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/250736&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/250736.svg&#34; alt=&#34;asciicast&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in this demo, any changes in the ConfigMap will propagate to related pods in a couple of seconds, and &lt;code&gt;inotify&lt;/code&gt; will detect this event as well. &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;caution-about-symbolic-links&#34;&gt;Caution about symbolic links&lt;/h3&gt;

&lt;p&gt;In such situation, however, you should use &lt;code&gt;inotify&lt;/code&gt; to watch for &lt;em&gt;directories&lt;/em&gt; instead of merely for &lt;em&gt;files&lt;/em&gt;.  It is because Kubernetes may use symbolic links to point to versioned ConfigMap volumes, and &lt;code&gt;inotify&lt;/code&gt; doesn&amp;rsquo;t work well with such symbolic links. &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s retry the demo, but this time we&amp;rsquo;ll focus on the directory layout from the pod&amp;rsquo;s point of view.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/251141&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/251141.svg&#34; alt=&#34;asciicast&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The demo from &lt;a href=&#34;https://asciinema.org/a/251141?t=0:38&#34;&gt;0:38&lt;/a&gt; to 1:55 shows the directory layout from the pod&amp;rsquo;s point of view:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;/mnt/site # ls -al
total 12
drwxrwxrwx    3 root  root   4096 Jun 12 06:19 .
drwxr-xr-x    1 root  root   4096 Jun 12 06:19 ..
drwxr-xr-x    2 root  root   4096 Jun 12 06:19 ..2019_06_12_06_19_15.187277003
lrwxrwxrwx    1 root  root     31 Jun 12 06:19 ..data -&amp;gt; ..2019_06_12_06_19_15.187277003
lrwxrwxrwx    1 root  root     15 Jun 12 06:19 main.css -&amp;gt; ..data/main.css&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Simply put, things go well if you&amp;rsquo;re inside the pod and watch for &lt;code&gt;/mnt/site&lt;/code&gt; directory, but may not go well if you try to watch for a specific file &lt;code&gt;/mnt/site/main.css&lt;/code&gt; since it is internally a symbolic link managed by Kubernetes.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;inotify&lt;/code&gt; mechanism works in the container and Kubernetes world, except for the LCOW case.&lt;/p&gt;

&lt;p&gt;If such a feature is needed in the LCOW setting, maybe you have to seek another workaround workflow; e.g., put &lt;code&gt;inotify&lt;/code&gt; mechanism outside the container, and propagate the event explicitly into the containers if any.  This is exactly what &lt;a href=&#34;https://skaffold.dev/&#34;&gt;Skaffold&lt;/a&gt; is doing.&lt;/p&gt;

&lt;p&gt;Also note that &lt;code&gt;inotify&lt;/code&gt; works better when ConfigMap is mounted as directories, rather than as merely files.&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      Series of Articles
    
  &lt;/div&gt;
  

&lt;p&gt;❶ Inotify in Containers&lt;/p&gt;

&lt;p&gt;❷ &lt;a href=&#34;//william-yeh.net/post/2019/06/containers-and-env/&#34;&gt;Containers and Environment Variables&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;➌ &lt;a href=&#34;//william-yeh.net/post/2019/06/autoreload-from-configmap/&#34;&gt;Auto-Reload from ConfigMap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Another analysis of ConfigMap hot-reload can be found in the article by Jimmy Song: “&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/configmap-hot-update.html&#34;&gt;ConfigMap 的热更新&lt;/a&gt;”.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/28769503/use-inotify-to-watch-a-file-with-multiple-symlinks&#34;&gt;Use INotify to watch a file with multiple symlinks&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      
    </item>
    
    <item>
      <title>Kubernetes 的入門認知與導入策略</title>
      <link>//william-yeh.net/post/2019/05/k8s-lab/</link>
      <pubDate>Fri, 17 May 2019 12:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/05/k8s-lab/</guid>
      
        <description>&lt;p&gt;前天我在 &lt;a href=&#34;https://cloudsummit.ithome.com.tw/&#34;&gt;2019 台灣雲端大會&lt;/a&gt;帶了兩個場次，一個是現場實作場次，一個是經驗分享演講：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Lab / &lt;a href=&#34;https://github.com/William-Yeh/workshop-cloud2019&#34;&gt;給 RD 的 Kubernetes 初體驗&lt;/a&gt; (90 minutes)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Speech / &lt;a href=&#34;https://www.slideshare.net/williamyeh/when-dotnetmeetskubernetes-145557464&#34;&gt;當 .NET 遇到 Kubernetes&lt;/a&gt; (30 minutes)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;兩個場次，一言以蔽之，都圍繞在 Kubernetes 的入門認知與導入策略上。&lt;/p&gt;

&lt;h2 id=&#34;以-問題解決-角度看-kubernetes-導入&#34;&gt;以「問題解決」角度看 Kubernetes 導入&lt;/h2&gt;

&lt;p&gt;〈&lt;a href=&#34;https://www.slideshare.net/williamyeh/when-dotnetmeetskubernetes-145557464&#34;&gt;當 .NET 遇到 Kubernetes&lt;/a&gt;〉這場演講，是以「問題解決」的角度，探討導入 Kubernetes 的困難與策略，尤其是針對 .NET 族群。&lt;/p&gt;

&lt;iframe
  style=&#34;width: 100%; height: 500px;&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;
  src=&#34;https://www.slideshare.net/slideshow/embed_code/145557464&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;

&lt;p&gt;整場演講的脈絡如下：&lt;/p&gt;

&lt;p&gt;① 為什麼要導入 Kubernetes？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我們的現況是什麼？&lt;/li&gt;
&lt;li&gt;外面的世界已經是什麼樣子？&lt;/li&gt;
&lt;li&gt;不正視差距，會有什麼影響？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;② 為什麼還 &lt;strong&gt;不&lt;/strong&gt; 導入 Kubernetes？&lt;/p&gt;

&lt;p&gt;我嘗試用&lt;a href=&#34;https://www.behaviormodel.org/&#34;&gt;法格行為模型&lt;/a&gt; (B=MAP) 來歸類問題原因：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;M&lt;/strong&gt;otivation / 我們真的認識 Kubernetes 真實的利益是什麼嗎？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;bility / 正確認識技術核心、外在因素、內在因素，才能正確評估我們的技術能力是否已經提升到足以擁抱 Kubernetes 的地步。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P&lt;/strong&gt;rompt / 是否有臨門一腳的驅動力？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;③ 有什麼建議的導入選項？&lt;/p&gt;

&lt;p&gt;我發現 Prajakta Joshi 的演講 &amp;ldquo;&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=NET206&#34;&gt;Strategies for Bringing Kubernetes, Istio, Traffic Director, and Envoy to Brownfield with Walmart, Google, Tetrate&lt;/a&gt;&amp;rdquo; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 已經給了很好的建議。因此，我引述她的論點，建議大家可以採用兩種路徑：(a) Container first and mesh next，(b) Mesh first and container next。&lt;/p&gt;

&lt;p&gt;我這場演講有開放錄影。等上線了，我會再補上連結。&lt;/p&gt;

&lt;h2 id=&#34;rd-也需要略懂-kubernetes&#34;&gt;RD 也需要略懂 Kubernetes&lt;/h2&gt;

&lt;p&gt;Kubernetes 是目前雲端環境的顯學。可是，傳統的程式，並不是原封不動搬上去，就能夠自動享受 Kubernetes 所宣稱的種種好處。新的環境，不僅需要新的 Ops 思維，也需要新的 Dev 思維。&lt;/p&gt;

&lt;p&gt;我設計〈&lt;a href=&#34;https://github.com/William-Yeh/workshop-cloud2019&#34;&gt;給 RD 的 Kubernetes 初體驗&lt;/a&gt;〉工作坊，嘗試以一個半小時的時間，從軟體研發者的角度，探討軟體的設計該做哪些最起碼的改變，並從實作中體驗 Kubernetes 引進的新觀念及新效益。&lt;/p&gt;

&lt;p&gt;我希望能夠讓學員從實例中體驗，傳統 web 應用程式在搬上 Kubernetes 時，可能會經歷哪些架構面的調整，才能享受新架構的效益。&lt;/p&gt;

&lt;p&gt;我試圖不只是 demo，也不只是讓大家能無腦照著做，還試圖進行一些觀念講解。短短一個半小時，野心太大，只好割捨原本已經準備好的 API Gateway 例子 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，集中在以下課題：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;容器化&lt;/li&gt;
&lt;li&gt;微服務&lt;/li&gt;
&lt;li&gt;組態管理&lt;/li&gt;
&lt;li&gt;多重環境管理：本機端與雲端（以 GKE 為例）&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe
  style=&#34;width: 100%; height: 500px;&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;
  src=&#34;https://www.slideshare.net/slideshow/embed_code/145761572&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/William-Yeh/workshop-cloud2019&#34;&gt;範例程式&lt;/a&gt;也以迭代演進的形式，逐步添加 Kubernetes 功能，呼應〈&lt;a href=&#34;https://www.slideshare.net/williamyeh/when-dotnetmeetskubernetes-145557464&#34;&gt;當 .NET 遇到 Kubernetes&lt;/a&gt;〉演講所提出的 &amp;ldquo;Container first and mesh next&amp;rdquo; 導入策略。&lt;/p&gt;

&lt;p&gt;Container:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.0: Extracted from Microsoft Docs.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2.0: Dockerize the app with simple Dockerfile and docker-compose.yml.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;3.0: Separate frontend and backend into 2 distinct containers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kubernetes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;4.0: Support Kubernetes (locally).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;4.1: Use Kubernetes dashboard.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;5.0: Support ConfigMap and naming convention.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cloud（感謝&lt;a href=&#34;https://tw.linkedin.com/in/ericsk&#34;&gt;上官林傑&lt;/a&gt;大力支援 Google Cloud 的 redeem coupon）：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;6.0: Support Kubernetes on the cloud (GKE for example).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;7.0: Support canary release.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可惜，一個半小時的時間還是太短了，最後面 30 分鐘其實是在趕進度，跳過了一些原本應該仔細講解的環節（譬如：ConfigMap、label &amp;amp; selector、ephemeral vs static external IP 的區分⋯⋯）。我再考慮另外找個社群的場子，辦一次較完整的 workshop 吧。完整的，應該會需要 2.5～3 小時。&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      2019-06-16 補充
    
  &lt;/div&gt;
  

&lt;p&gt;一個月後，應 &lt;a href=&#34;https://www.meetup.com/GCPUG-Taipei/events/261797460/&#34;&gt;GCPUG Taipei&lt;/a&gt; 之邀，我辦了一場 3+1 小時的 Workshop，&lt;a href=&#34;https://www.slideshare.net/williamyeh/rd-kubernetes-gcpug-2019-06/&#34;&gt;投影片&lt;/a&gt;及&lt;a href=&#34;https://github.com/William-Yeh/workshop-gcpug201906/&#34;&gt;實作範例&lt;/a&gt;都有更新。&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;希望這一場演講，一場實作工作坊，對大家有助益。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;我在〈&lt;a href=&#34;//william-yeh.net/post/2019/04/next19-istio/&#34;&gt;Next ’19 的 Istio 場次重點摘要&lt;/a&gt;〉一文中，有介紹 Prajakta Joshi 在 Google Cloud Next ’19 另一場精彩的演講。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;關於 Kubernetes 的 API gateway，請參考〈&lt;a href=&#34;//william-yeh.net/post/2019/03/ingress-vs-ambassador/&#34;&gt;Nginx Ingress 與 Ambassador 簡易性能比較&lt;/a&gt;〉一文。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Next &#39;19 的 Istio 場次重點摘要</title>
      <link>//william-yeh.net/post/2019/04/next19-istio/</link>
      <pubDate>Fri, 19 Apr 2019 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/04/next19-istio/</guid>
      
        <description>&lt;p&gt;四月 9&amp;ndash;11 日去舊金山參加 Google Cloud 的 &lt;a href=&#34;https://cloud.withgoogle.com/next/sf/&#34;&gt;Next ’19&lt;/a&gt; 大會，收穫頗大。&lt;/p&gt;

&lt;p&gt;這場大會，同一時段就有近 30 場專題演講同時進行，議程滿滿，勢必得做取捨。基於工作需要及個人興趣，我主要選擇與容器相關的場次：service mesh、Windows containers、混合雲、資安實務。&lt;/p&gt;

&lt;p&gt;我發現，光是這些場次，就得花很大力氣去消化、實驗與應用。&lt;/p&gt;

&lt;p&gt;我們這些所謂的「台港團」會在 GCPUG Taipei 舉辦一場&lt;a href=&#34;https://www.meetup.com/GCPUG-Taipei/events/260555968/&#34;&gt;分享會&lt;/a&gt;。因為自己不克參加，便以這篇文章，針對我鎖定的核心議題：Istio，做一番重點摘要，以饗讀者。&lt;/p&gt;

&lt;p&gt;以下內容，不完全按照 Next ’19 的議程時間順序，而是依照我主觀的排列。&lt;/p&gt;

&lt;p&gt;看完後，對於 Istio 應該就有不錯的全面認知了。&lt;/p&gt;

&lt;h2 id=&#34;漸進式導入-istio&#34;&gt;漸進式導入 Istio&lt;/h2&gt;

&lt;p&gt;很有意思的演講，很適合作為 Istio 入門。&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/0cgTHQFXYPQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=HYB102&#34;&gt;Incrementally Adopting Istio&lt;/a&gt;&lt;br/&gt;
【重點摘要】&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/0cgTHQFXYPQ?t=3m20s&#34;&gt;3:20&lt;/a&gt; - 微服務面臨的挑戰。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/0cgTHQFXYPQ?t=6m18s&#34;&gt;6:18&lt;/a&gt; - Istio 的 control plane 三大元件，就是設計來一一對應這些問題的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/0cgTHQFXYPQ?t=10m38s&#34;&gt;10:38&lt;/a&gt; - Istio 的 telemetry 機制。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/0cgTHQFXYPQ?t=11m42s&#34;&gt;11:42&lt;/a&gt; - Istio 的 traffic 管理機制。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/0cgTHQFXYPQ?t=15m10s&#34;&gt;15:10&lt;/a&gt; - Istio 的 security 機制。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/0cgTHQFXYPQ?t=16m27s&#34;&gt;16:27&lt;/a&gt; - 在 GKE 安裝 Istio 的方法及使用建議。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/0cgTHQFXYPQ?t=19m11s&#34;&gt;19:11&lt;/a&gt; - 接下來就是一系列的漸進式示範。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;istio-的-traffic-宏觀角度&#34;&gt;Istio 的 Traffic：宏觀角度&lt;/h2&gt;

&lt;p&gt;在 Istio + Envoy 體系中，是透過 control plane 的 Pilot 元件及 xDS 協定，去管理 data plane 的 Envoy 網路流量。&lt;/p&gt;

&lt;p&gt;以此為基礎，Google Cloud 推出 &lt;a href=&#34;https://cloud.google.com/traffic-director/&#34;&gt;Traffic Director&lt;/a&gt; 服務，用統一的 control plane、透過同樣的 xDSv2 API，去管理 GCP 能觸及的 GKE、GCE，甚至自建的 Kubernetes cluster；也藉此處理 GCP 之專屬特性。&lt;/p&gt;

&lt;p&gt;某種意義上，可以把 Traffic Director 視為將 Istio 的 Pilot 元件託管給 Google Cloud。&lt;/p&gt;

&lt;p&gt;這場演講，儘管旨在&lt;del&gt;廣告&lt;/del&gt;宣傳 Google 自家的 Traffic Director 服務，但講員之一 Prajakta Joshi 非常厲害，對於一般性的 service mesh 觀念也介紹得非常生動。&lt;/p&gt;

&lt;p&gt;這一場值得全程觀看。我僅摘錄部分重點。&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/FUITCYMCEhU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=NET207&#34;&gt;Traffic Director and Envoy-Based L7 ILB for Production-Grade Service Mesh and Istio&lt;/a&gt;&lt;br/&gt;
【重點摘要】&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=1m21s&#34;&gt;1:21&lt;/a&gt; - 很中肯的觀點：將 service mesh 視為 “&lt;strong&gt;SDN for services&lt;/strong&gt;”。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=4m45s&#34;&gt;4:45&lt;/a&gt; - Istio 簡介。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=5m48s&#34;&gt;5:48&lt;/a&gt; - 介紹 Istio 的 Pilot 流量管理議題。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=5m48s&#34;&gt;6:40&lt;/a&gt; - 正式介紹 Traffic Director。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=14m45s&#34;&gt;14:45&lt;/a&gt; - Live demo: global load balancing。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=23m45s&#34;&gt;23:45&lt;/a&gt; - 介紹 service mesh 流量控制的特色：“&lt;strong&gt;change traffic flow without changing code&lt;/strong&gt;”，以及 traffic splitting、traffic steering、fault injection、mirroring (shadowing)、load balancing、circuit breaking、outlier detection 等高檔特性。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=29m39s&#34;&gt;29:39&lt;/a&gt; - Live demo: traffic splitting。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=35m37s&#34;&gt;35:37&lt;/a&gt; - 預告 Traffic Director 的產品路線圖。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=42m56s&#34;&gt;42:56&lt;/a&gt; - 某客戶的 monolith 階段性轉型經驗。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;講員 Prajakta Joshi 另一場演講 &amp;ldquo;&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=NET206&#34;&gt;Strategies for Bringing Kubernetes, Istio, Traffic Director, and Envoy to Brownfield with Walmart, Google, Tetrate&lt;/a&gt;&amp;rdquo; 也很棒，可惜並未釋出投影片及錄影。精彩內容，就留在我的手機相簿裡面啦。&lt;/p&gt;

&lt;h2 id=&#34;istio-的-traffic-實踐角度&#34;&gt;Istio 的 Traffic：實踐角度&lt;/h2&gt;

&lt;p&gt;我聽了 Megan O&amp;rsquo;Keefe 兩場硬底子的演講。&lt;/p&gt;

&lt;p&gt;第一場演講，以大量實例現場展示 Istio 的 traffic rules。&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/7cINRP0BFY8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=HYB201&#34;&gt;Istio in Production: Day 2 Traffic Routing&lt;/a&gt;&lt;br/&gt;
【重點摘要】&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=2m18s&#34;&gt;2:18&lt;/a&gt; - Istio 與 Envoy 簡介。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=9m13s&#34;&gt;9:13&lt;/a&gt; - Live demo: rollout。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=13m45s&#34;&gt;13:45&lt;/a&gt; - Live demo: content-based routing。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=16m48s&#34;&gt;16:48&lt;/a&gt; - Live demo: circuit breaking。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=20m46s&#34;&gt;20:46&lt;/a&gt; - Live demo: chaos testing。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=24m48s&#34;&gt;24:48&lt;/a&gt; - Live demo: ingress and egress。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=36m26s&#34;&gt;36:26&lt;/a&gt; - Istio 1.1 現況。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=37m18s&#34;&gt;37:18&lt;/a&gt; - Istio 導入建議：“&lt;strong&gt;start slow and incrementally&lt;/strong&gt;”。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=38m36s&#34;&gt;38:36&lt;/a&gt; - Istio 還能夠做什麼？&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第二場演講，就更硬碰硬的處理 Istio 每天都可能遇到的幾個實踐問題，以及如何查找問題、解決問題的過程。三段 live demo，涵蓋 Istio control plane 的三大元件：Pilot、Mixer、Citadel，非常扎實。&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/FbYBO7Pi2d8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=HYB303&#34;&gt;Debugging Istio: How to Fix a Broken Service Mesh&lt;/a&gt;&lt;br/&gt;
【重點摘要】&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/FbYBO7Pi2d8?t=0m35s&#34;&gt;0:35&lt;/a&gt; - Service mesh 是要解決甚麼問題？Istio 的 control plane 就是設計來一一對應這些問題的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/FbYBO7Pi2d8?t=2m54s&#34;&gt;2:54&lt;/a&gt; - 可是，Istio 又會連帶引入哪些複雜度？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/FbYBO7Pi2d8?t=4m46s&#34;&gt;4:46&lt;/a&gt; - Live demo: traffic management.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/FbYBO7Pi2d8?t=20m47s&#34;&gt;20:47&lt;/a&gt; - Live demo: telemetry.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/FbYBO7Pi2d8?t=27m58s&#34;&gt;27:58&lt;/a&gt; - Live demo: security.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/FbYBO7Pi2d8?t=44m23s&#34;&gt;44:23&lt;/a&gt; - 除錯工具推薦清單。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這兩場 Megan O&amp;rsquo;Keefe 的演講，雖然硬底子，卻十分具體，可操作性高，值得全程觀看。&lt;/p&gt;

&lt;h2 id=&#34;從-sre-角度看-istio&#34;&gt;從 SRE 角度看 Istio&lt;/h2&gt;

&lt;p&gt;這一場，只能說，非常非常非常精彩。&lt;/p&gt;

&lt;p&gt;對於讀過 Google 的 &lt;a href=&#34;https://landing.google.com/sre/books/&#34;&gt;&lt;em&gt;SRE&lt;/em&gt;&lt;/a&gt; 一書的人來說，看到 SLO、error budget 之類的觀念，居然可以在 Istio 上面如此實現，真是大開眼界。&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/AKh8uuVCpFI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=HYB309&#34;&gt;Understanding SLOs and Error Budgets With Istio&lt;/a&gt;&lt;br/&gt;
【重點摘要】&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/AKh8uuVCpFI?t=1m40s&#34;&gt;1:40&lt;/a&gt; - SLI/SLO/SLA 基本觀念。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/AKh8uuVCpFI?t=7m41s&#34;&gt;7:41&lt;/a&gt; - &amp;ldquo;uptime&amp;rdquo; 的新觀點。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/AKh8uuVCpFI?t=9m04s&#34;&gt;9:04&lt;/a&gt; - 將 error budget 視為 “&lt;strong&gt;amount of SLOs you can spend&lt;/strong&gt;”。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/AKh8uuVCpFI?t=13m49s&#34;&gt;13:49&lt;/a&gt; - Live demo!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/AKh8uuVCpFI?t=28m02s&#34;&gt;28:02&lt;/a&gt; - 客戶證言：Schlumberger 公司。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;把-vm-也帶進-service-mesh&#34;&gt;把 VM 也帶進 Service Mesh&lt;/h2&gt;

&lt;p&gt;Service mesh 並不是容器的專利；古老的 VM 其實也可以納入治理體系。&lt;/p&gt;

&lt;p&gt;透過 Istio 的 &lt;a href=&#34;https://istio.io/docs/setup/kubernetes/additional-setup/mesh-expansion/&#34;&gt;&lt;strong&gt;mesh expansion&lt;/strong&gt;&lt;/a&gt; 機制，VM 只要安裝 node agent 及 Envoy proxy，即可登記為 Kubernetes/Istio cluster 的 &lt;a href=&#34;https://istio.io/docs/reference/config/networking/v1alpha3/service-entry/&#34;&gt;service entry&lt;/a&gt; 資源，進行 service discovery 等互動。&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/2czElo8a7FM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=HYB308&#34;&gt;Istio Service Mesh for VM Native&lt;/a&gt;&lt;br/&gt;
【重點摘要】&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/2czElo8a7FM?t=8m0s&#34;&gt;8:00&lt;/a&gt; - 介紹 Istio 的 mesh expansion 機制。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/2czElo8a7FM?t=11m04s&#34;&gt;11:04&lt;/a&gt; - 具體步驟。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/2czElo8a7FM?t=13m23s&#34;&gt;13:23&lt;/a&gt; - Live demo!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;windows-containers&#34;&gt;Windows Containers&lt;/h2&gt;

&lt;p&gt;自從 3 月底 Kubernetes 1.14 宣布正式支援 Windows 之後&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，我就很期待到 Next ’19 現場眼見為憑。&lt;/p&gt;

&lt;p&gt;這一場值得全程觀看。我僅摘錄部分重點。&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/C4kW9uLmefU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=HYB108&#34;&gt;Windows Containers in Google Kubernetes Engine&lt;/a&gt;&lt;br/&gt;
【重點摘要】&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/C4kW9uLmefU?t=7m50s&#34;&gt;7:50&lt;/a&gt; - &amp;ldquo;I have a dream&amp;hellip;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/C4kW9uLmefU?t=12m15s&#34;&gt;12:15&lt;/a&gt; - Windows host OS and base image requirements&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/C4kW9uLmefU?t=17m23s&#34;&gt;17:23&lt;/a&gt; - Which to containerize?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/C4kW9uLmefU?t=22m14s&#34;&gt;22:14&lt;/a&gt; - Kubernetes 1.14 stable supports Windows containers and Windows Server 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/C4kW9uLmefU?t=25m44s&#34;&gt;25:44&lt;/a&gt; - Limitations for Windows containers (for now)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/C4kW9uLmefU?t=28m16s&#34;&gt;28:16&lt;/a&gt; - GKE &amp;ldquo;is working on supporting Windows containers&amp;rdquo; (preview now)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/C4kW9uLmefU?t=30m40s&#34;&gt;30:40&lt;/a&gt; - Live demo!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/C4kW9uLmefU?t=37m0s&#34;&gt;37:00&lt;/a&gt; - Early Access Program (EAP)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;api-視角&#34;&gt;API 視角&lt;/h2&gt;

&lt;p&gt;不管你想在容器化、微服務、service mesh 路線走到多遠，「API 管理」一直都是需要持續關注的一環。&lt;/p&gt;

&lt;p&gt;針對這議題，Next ’19 是以 &lt;a href=&#34;https://cloud.google.com/apigee/&#34;&gt;Apigee&lt;/a&gt; 為主軸&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，分別介紹 Apigee 如何與 service mesh 和 serverless 技術搭配運用。&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/IblDMVwSSk4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=HYB319&#34;&gt;APIs, Microservices, and the Service Mesh&lt;/a&gt;&lt;br/&gt;
【重點摘要】&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/IblDMVwSSk4?t=3m21s&#34;&gt;3:21&lt;/a&gt; - 介紹 mTLS。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/IblDMVwSSk4?t=7m06s&#34;&gt;7:06&lt;/a&gt; - 用 Istio 在 control plane 層次確保 mTLS 之類的 policy。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/IblDMVwSSk4?t=12m47s&#34;&gt;12:47&lt;/a&gt; - 介紹 service mesh 時代的 API 管理架構。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/IblDMVwSSk4?t=33m09s&#34;&gt;33:09&lt;/a&gt; - 什麼時候才需要 service mesh？&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/7fcpwM-8qPo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=SVR102&#34;&gt;API Management for Serverless and Multi-Cloud&lt;/a&gt;&lt;br/&gt;
【重點摘要】&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/7fcpwM-8qPo?t=13m35s&#34;&gt;13:35&lt;/a&gt; - 示範 Cloud Run 與 Apigee。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/7fcpwM-8qPo?t=24m15s&#34;&gt;24:15&lt;/a&gt; - 示範 Cloud Functions 與 Apigee。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;這麼多乾貨，值得花點力氣好好消化。&lt;/p&gt;

&lt;h2 id=&#34;投影片&#34;&gt;投影片&lt;/h2&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      2019-07-02 補充
    
  &lt;/div&gt;
  

&lt;p&gt;兩個月後，應 GCPUG Taipei 之邀，我還是在 &lt;a href=&#34;https://www.meetup.com/GCPUG-Taipei/events/262584153/&#34;&gt;Meetup #48&lt;/a&gt; 給了一場分享。投影片在此：&lt;/p&gt;

&lt;p&gt;&lt;iframe
  style=&#34;width: 100%; height: 500px;&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;
  src=&#34;https://www.slideshare.net/slideshow/embed_code/153249474&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://kubernetes.io/blog/2019/03/25/kubernetes-1-14-release-announcement/&#34;&gt;Kubernetes 1.14: Production-level support for Windows Nodes, Kubectl Updates, Persistent Local Volumes GA&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Apigee 於 2016 年被 Google 併購。詳見〈&lt;a href=&#34;https://www.ithome.com.tw/news/108342&#34;&gt;Google 以 6.25 億美元收購 Apigee，強化 API 管理服務&lt;/a&gt;〉一文。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>在 WSL 裡使用 Ansible &#43; Vagrant</title>
      <link>//william-yeh.net/post/2019/04/wsl-ansible-vagrant/</link>
      <pubDate>Thu, 18 Apr 2019 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/04/wsl-ansible-vagrant/</guid>
      
        <description>&lt;p&gt;既然要開始在 Windows 上沿用 Mac 及 Unix 的命令列工具習慣&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，免不了要處理 &lt;a href=&#34;https://github.com/ansible/ansible&#34;&gt;Ansible&lt;/a&gt; 及 &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;雖然這兩個軟體都有對應的 Windows 版本，但據我以前的經驗，卡卡的，有許多小地雷；畢竟這些發跡自泛 Unix 家族的軟體，不是那麼容易無縫移植到對命令列不友善的 Windows 家族。&lt;/p&gt;

&lt;p&gt;如今 Windows 已經有 &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/&#34;&gt;WSL (Windows Subsystem for Linux)&lt;/a&gt; 機制，是否可以更無痛享用 Ansible 及 Vagrant 呢？&lt;/p&gt;

&lt;p&gt;可以的。&lt;/p&gt;

&lt;p&gt;大體而言，我們會兵分二路：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 Windows 上，會安裝 &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在 WSL 上，會安裝 &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; 及 &lt;a href=&#34;https://github.com/ansible/ansible&#34;&gt;Ansible&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;虛擬機選項一-virtualbox&#34;&gt;虛擬機選項一：VirtualBox&lt;/h2&gt;

&lt;p&gt;用慣 Mac 或 Linux 的人，可能會想沿用 &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt; 虛擬機軟體。畢竟 VirtualBox 是同屬開源生態系的一員，和其他開源軟體的相容性最高。&lt;/p&gt;

&lt;p&gt;你可以直接去官方網站&lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;下載&lt;/a&gt;安裝檔（VirtualBox 本體，以及 VirtualBox Extension Pack），或是直接透過 Chocolatey 套件管理工具來&lt;a href=&#34;https://chocolatey.org/packages/virtualbox&#34;&gt;安裝&lt;/a&gt;：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;C:\&amp;gt; choco install virtualbox&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;安裝完後，還有一關要克服。&lt;/p&gt;

&lt;p&gt;一般來說，在同一個 host OS 上，同一時間，只能有一個底層虛擬機制存在（除非有像「巢狀虛擬化」之類的黑魔法……吧？）。因此，VirtualBox 無法與 Windows 官方欽定的 Hyper-V 機制同時並存，一山不容二虎&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;如果決定要使用 VirtualBox，請用管理者權限執行以下命令，暫時關閉 Hyper-V 功能&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;C:&amp;gt; dism.exe /Online /Disable-Feature:Microsoft-Hyper-V

C:&amp;gt; bcdedit /set hypervisorlaunchtype off&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;這麼做的缺點是：由於 Docker Desktop for Windows 會用到 Hyper-V 機制，所以，關閉了 Hyper-V，等於是關閉了 Docker Desktop 的使用權。如果稍後還想使用 Docker Desktop，就得手動恢復 Hyper-V 功能：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;C:&amp;gt; dism.exe /Online /Enable-Feature:Microsoft-Hyper-V-All

C:&amp;gt; bcdedit /set hypervisorlaunchtype auto&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;你可能需要在 Hyper-V 與 VirtualBox 模式之間來回切換，也需要重新開機。&lt;/p&gt;

&lt;h2 id=&#34;虛擬機選項二-hyper-v&#34;&gt;虛擬機選項二：Hyper-V&lt;/h2&gt;

&lt;p&gt;在 Windows 上面玩 VirtualBox 這麼麻煩，換成 Hyper-V 會不會比較省事？&lt;/p&gt;

&lt;p&gt;很可惜，我在 &amp;ldquo;Hyper-V Administrators&amp;rdquo; 這一關觸礁了。嘗試一些可能的解法&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，都無效。&lt;/p&gt;

&lt;p&gt;真的有需要時，再回來研究吧。&lt;/p&gt;

&lt;h2 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h2&gt;

&lt;p&gt;直接比照 Linux 安裝 Vagrant 的方法。&lt;/p&gt;

&lt;p&gt;請在 WSL 底下，直接去官方網站&lt;a href=&#34;https://www.vagrantup.com/downloads.html&#34;&gt;下載&lt;/a&gt;安裝檔，或是用 Apt 之類的套件管理系統來安裝。&lt;/p&gt;

&lt;p&gt;安裝完畢，請根據官方網站的&lt;a href=&#34;https://www.vagrantup.com/docs/other/wsl.html&#34;&gt;建議&lt;/a&gt;設定環境變數。尤其是 &lt;code&gt;VAGRANT_WSL_ENABLE_WINDOWS_ACCESS&lt;/code&gt; 這一項：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;export VAGRANT_WSL_ENABLE_WINDOWS_ACCESS=&amp;#34;1&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;ansible&#34;&gt;Ansible&lt;/h2&gt;

&lt;p&gt;直接比照 Linux 安裝 Ansible 的方法。&lt;/p&gt;

&lt;p&gt;請在 WSL 底下，照著官方網站的&lt;a href=&#34;https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-the-control-machine&#34;&gt;安裝步驟&lt;/a&gt;來執行。譬如說，在 Debian/Ubuntu 系列下，可以用 Apt 套件管理系統來安裝。&lt;/p&gt;

&lt;h2 id=&#34;ansible-vagrant&#34;&gt;Ansible + Vagrant&lt;/h2&gt;

&lt;p&gt;現在，試試看把 Ansible 和 Vagrant 結合起來！&lt;/p&gt;

&lt;p&gt;先準備好 &lt;code&gt;Vagrantfile&lt;/code&gt; 檔案：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;no&#34;&gt;Vagrant&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;bento/ubuntu-18.04&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;network&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;forwarded_port&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;guest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;provision&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ansible&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ansible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;ansible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compatibility_mode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt;
     &lt;span class=&#34;c1&#34;&gt;#ansible.verbose = &amp;#34;vvv&amp;#34;&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;ansible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;playbook&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;playbook.yml&amp;#34;&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;ansible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;become&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;還有 Ansible 的 &lt;code&gt;playbook.yml&lt;/code&gt; 檔案：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;all&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;become&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;tasks&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;install&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nginx&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;apt&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name=nginx&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;state=present&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;update_cache=yes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;試著啟動看看：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% vagrant up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果一切順利，你可以在 &lt;code&gt;http://localhost:8080/&lt;/code&gt; 看到 Nginx 歡迎畫面。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;在 Docker + Kubernetes 時代，用到 Ansible 的機會愈來愈少了，Vagrant 更是如此；不過，保有這種工具，在處理還來不及跟上腳步的舊系統仍然很管用。因此，花一點功夫湊出堪用的組合，希望能有順手的 WSL 環境。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;這段故事，詳見〈&lt;a href=&#34;//william-yeh.net/post/2019/03/wsl-cmder-zsh/&#34;&gt;在 Windows 上復刻 Mac 使用習慣&lt;/a&gt;〉一文。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;技術上來說，Hyper-V 是屬於 type-1 hypervisor，VirtualBox 是屬於 type-2 hypervisor。詳見維基百科 &amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hypervisor&#34;&gt;Hypervisor&lt;/a&gt;&amp;rdquo; 條目。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;在 Windows 上關閉 Hyper-V 機制，請參考以下文章：“&lt;a href=&#34;https://www.sysprobs.com/solved-vt-x-is-not-available-verr-vmx-no-vmx-in-windows-10-virtualbox&#34;&gt;(Solved) VT-x is Not Available (verr_vmx_no_vmx) in Windows 10 – but Available for Oracle VirtualBox&lt;/a&gt;”、〈&lt;a href=&#34;https://blog.csdn.net/imilano/article/details/83038682&#34;&gt;Win10 10月更新 VirtualBox VT-x is not available (VERR_VMX_NO_VMX). 解决&lt;/a&gt;〉、“&lt;a href=&#34;https://forums.virtualbox.org/viewtopic.php?f=38&amp;amp;t=89791&#34;&gt;[Solved] VT-x is not available (VERR_VMX_NO_VMX)&lt;/a&gt;”。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;當 Vagrant 在使用 Hyper-V 時，會出現 &amp;ldquo;Hyper-V Administrators&amp;rdquo; 權限問題。我嘗試以下幾篇文章，可惜仍未解決：“&lt;a href=&#34;https://github.com/hashicorp/vagrant/issues/4503&#34;&gt;Vagrant issue #378&lt;/a&gt;”、“&lt;a href=&#34;https://blogs.msdn.microsoft.com/virtual_pc_guy/2014/06/11/allowing-non-administrators-to-control-hyper-vupdated/&#34;&gt;Allowing non-Administrators to control Hyper-V–Updated&lt;/a&gt;”、“&lt;a href=&#34;https://dev.to/nicolus/getting-homestead-to-play-nice-with-hyper-v-4202&#34;&gt;Getting Homestead to play nice with Hyper-V&lt;/a&gt;”。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>WSLtty &#43; tmux 組合技</title>
      <link>//william-yeh.net/post/2019/04/wsltty-tmux/</link>
      <pubDate>Wed, 17 Apr 2019 22:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/04/wsltty-tmux/</guid>
      
        <description>&lt;p&gt;在 Windows 10 上面使用 WSL 已經一個月了&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。小狀況也就罷了，但 &lt;a href=&#34;https://cmder.net/&#34;&gt;Cmder&lt;/a&gt; 不夠穩定的顯示邏輯卻最讓我頭痛，在視窗尺寸變化時，無法正確處理字元位置。更令人費解的是，即使是其他狀似更華麗（也更耗資源）的替代方案，也仍然有這些問題&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;既然酷炫的終端機競品問題多多，乾脆回歸極簡的 WSLtty&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，並混搭 tmux&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; 來彌補。可惜，畢竟是組合技，無法完全複製 Mac 的 iTerm2 使用經驗。&lt;/p&gt;

&lt;p&gt;此事古難全。&lt;/p&gt;

&lt;h2 id=&#34;wsltty-剪貼簿&#34;&gt;WSLtty 剪貼簿&lt;/h2&gt;

&lt;p&gt;在 X Window 或 Mac 的終端機，只要按下滑鼠右鍵就能夠 paste 文字。如果在 WSLtty 上也想這麼玩，請在 &lt;code&gt;%APPDATA%\wsltty\config&lt;/code&gt; 設定檔加上這一行：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;RightClickAction=paste&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;tmux-與-zsh&#34;&gt;Tmux 與 zsh&lt;/h2&gt;

&lt;p&gt;啟動 tmux 時，似乎並不會根據 &lt;code&gt;/etc/passwd&lt;/code&gt; 的資訊來喚起自訂的 shell，而是一律喚起 bash。&lt;/p&gt;

&lt;p&gt;解決方法是，在 &lt;code&gt;~/.tmux.conf&lt;/code&gt; 加上這一行：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;set-option -g default-shell /bin/zsh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;tmux-的-pane&#34;&gt;Tmux 的 pane&lt;/h2&gt;

&lt;p&gt;用慣 iTerm2 的我，對 tmux 的 pane 功能不太習慣。&lt;/p&gt;

&lt;p&gt;譬如說，在 tmux 新增 pane 或 window 時，不會自動帶入目前的目錄 &lt;code&gt;$PWD&lt;/code&gt;，而是一律帶入 &lt;code&gt;$HOME&lt;/code&gt;，很不方便。Tmux 預設的組合鍵 &lt;code&gt;&amp;lt;prefix&amp;gt; %&lt;/code&gt; 及 &lt;code&gt;&amp;lt;prefix&amp;gt; &amp;quot;&lt;/code&gt; 難記又難按，也很令人頭痛。&lt;/p&gt;

&lt;p&gt;因此，我綜合多人的做法&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;，解決目錄問題，換成好記好按的組合鍵，更可用方向鍵來切換 pane：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;# Create new window (tab) with current path
unbind c
bind -n M-t new-window -c &amp;#39;#{pane_current_path}&amp;#39;  # mimic for iTerm2 habit

# Split panes with current path
# @see https://unix.stackexchange.com/a/247449
unbind &amp;#39;&amp;#34;&amp;#39;
unbind &amp;#39;%&amp;#39;
bind -n M-d split-window -h -c &amp;#39;#{pane_current_path}&amp;#39;  # Split panes horizontal
bind -n M-D split-window -v -c &amp;#39;#{pane_current_path}&amp;#39;  # Split panes vertically

# Switch panes using Alt-arrow without prefix
bind -n M-Left  select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up    select-pane -U
bind -n M-Down  select-pane -D&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;tmux-plugin-manager&#34;&gt;Tmux Plugin Manager&lt;/h2&gt;

&lt;p&gt;Tmux 設定太多了，就有人寫了外掛管理系統 &lt;a href=&#34;https://github.com/tmux-plugins/tpm&#34;&gt;Tmux Plugin Manager&lt;/a&gt;。雖然目前我還用不到，但還是先安裝，以備不時之需。&lt;/p&gt;

&lt;p&gt;首先，下載 TPM：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;將以下幾行加到 &lt;code&gt;.tmux.conf&lt;/code&gt; 最後面：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;# List of plugins
set -g @plugin &amp;#39;tmux-plugins/tpm&amp;#39;
set -g @plugin &amp;#39;tmux-plugins/tmux-sensible&amp;#39;

# Initialize TMUX plugin manager
# (keep this line at the very bottom of tmux.conf)
run -b &amp;#39;~/.tmux/plugins/tpm/tpm&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Tmux 還有很多高段的功能，以後有需要再研究吧。&lt;/p&gt;

&lt;p&gt;如此這般拼湊起來，雖然還不能完全複刻 Mac 的 iTerm2 使用經驗，但也已經算是可以接受了。當然啦，私心還是希望 Cmder 或 Hyper 能夠好好解決顯示問題，就不必動用 tmux 了。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;這段故事，詳見〈&lt;a href=&#34;//william-yeh.net/post/2019/03/wsl-cmder-zsh/&#34;&gt;在 Windows 上復刻 Mac 使用習慣&lt;/a&gt;〉一文。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;關於其他更華麗，卻也更耗資源的 Windows 終端機方案，可參考這幾篇介紹文章：〈&lt;a href=&#34;https://github.com/spencerwooo/dowww&#34;&gt;在 Windows 上面用 WSL 优雅开发&lt;/a&gt;〉、“&lt;a href=&#34;https://nickjanetakis.com/blog/conemu-vs-hyper-vs-terminus-vs-mobaxterm-terminator-vs-ubuntu-wsl&#34;&gt;ConEmu vs Hyper vs Terminus vs MobaXTerm Terminator vs Ubuntu WSL&lt;/a&gt;”。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;關於 &lt;a href=&#34;https://github.com/mintty/wsltty&#34;&gt;WSLtty&lt;/a&gt;，可參考保哥的〈&lt;a href=&#34;https://blog.miniasp.com/post/2019/02/09/Useful-tool-WSLtty-Mintty-as-a-terminal-for-WSL&#34;&gt;介紹好用工具：WSLtty (Mintty as a terminal for WSL)&lt;/a&gt;〉一文。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;關於 &lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;tmux&lt;/a&gt;，可參考這幾篇介紹文章：〈&lt;a href=&#34;https://5xruby.tw/posts/tmux/&#34;&gt;tmux ，不只是 terminal multiplexer&lt;/a&gt;〉、〈&lt;a href=&#34;https://andyyou.github.io/2017/11/27/tmux-notes/&#34;&gt;tmux 快速入門筆記&lt;/a&gt;〉、〈&lt;a href=&#34;https://larrylu.blog/tmux-33a24e595fbc&#34;&gt;終端機 session 管理神器 — tmux&lt;/a&gt;〉。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;Shubham 提供的&lt;a href=&#34;https://unix.stackexchange.com/a/247449&#34;&gt;做法&lt;/a&gt;，可讓新開的 pane 及 window 保持在目前所在的目錄。Ham Vocke 的&lt;a href=&#34;https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/&#34;&gt;文章&lt;/a&gt;也介紹幾種有趣的 tmux 設定。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>給 RD 的 Kubernetes 初體驗</title>
      <link>//william-yeh.net/courses/cloudsummit2019/</link>
      <pubDate>Tue, 02 Apr 2019 16:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/courses/cloudsummit2019/</guid>
      
        <description>

&lt;p&gt;&lt;strong&gt;活動名稱&lt;/strong&gt;：給 RD 的 Kubernetes 初體驗&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;時間&lt;/strong&gt;：2019-05-15 (三) / 11:00&amp;ndash;12:30&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;會議&lt;/strong&gt;：&lt;a href=&#34;https://cloudsummit.ithome.com.tw/&#34;&gt;台灣雲端大會 (Cloud Summit 2019)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;課程簡介&#34;&gt;課程簡介&lt;/h2&gt;

&lt;p&gt;Kubernetes 是目前雲端環境的顯學。可是，傳統的程式，並不是原封不動搬上去，就能夠自動享受 Kubernetes 所宣稱的種種好處。&lt;/p&gt;

&lt;p&gt;新的環境，不僅需要新的 Ops 思維，也需要新的 Dev 思維。我們將以一個半小時的時間，從軟體研發者的角度，探討軟體的設計該做哪些最起碼的改變，從實作中體驗 Kubernetes 引進的新觀念及新效益。&lt;/p&gt;

&lt;h2 id=&#34;課程目標&#34;&gt;課程目標&lt;/h2&gt;

&lt;p&gt;從實例中體驗，傳統 web 應用程式在搬上 Kubernetes 時，可能會經歷哪些架構面的調整，才能享受新架構的效益：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;容器化&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;微服務&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;組態管理&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;API gateway&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;多重環境管理：本機端與雲端（以 GKE 為例）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;課程架構&#34;&gt;課程架構&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主題&lt;/th&gt;
&lt;th&gt;內容簡介&lt;/th&gt;
&lt;th&gt;類型&lt;/th&gt;
&lt;th&gt;時間(分)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1. 基本觀念&lt;/td&gt;
&lt;td&gt;快速介紹 Kubernetes 基本觀念&lt;/td&gt;
&lt;td&gt;簡報介紹&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2. 本機端實作&lt;/td&gt;
&lt;td&gt;移植 web 軟體至本機端 Kubernetes&lt;/td&gt;
&lt;td&gt;實機操作&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3. 雲端實作&lt;/td&gt;
&lt;td&gt;將 Kubernetes 成果送上雲端&lt;/td&gt;
&lt;td&gt;實機操作&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4. 總結&lt;/td&gt;
&lt;td&gt;Kubernetes 微服務要點總結&lt;/td&gt;
&lt;td&gt;簡報介紹&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;注意事項&#34;&gt;注意事項&lt;/h2&gt;

&lt;h3 id=&#34;學員能力要求&#34;&gt;學員能力要求&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;須具備簡單的 Web 前後端觀念。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;須具備 Docker、Docker Compose、git 基本操作能力。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;學員需知&#34;&gt;學員需知&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;請先在自備筆電中安裝 &lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker Desktop&lt;/a&gt;，並開啟其中的 Kubernetes 功能。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;本課程有一部分實作活動會使用 Google Kubernetes Engine (GKE) 及 Container Registry (GCR) 服務。為了讓現場體驗活動順暢，請學員事先申請好 &lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Cloud Platform&lt;/a&gt; 帳號，並自主練習約 45 分鐘的 “&lt;a href=&#34;https://www.qwiklabs.com/focuses/2794?parent=catalog&#34;&gt;A Tour of Qwiklabs and the Google Cloud Platform&lt;/a&gt;” 免費活動，確保你在來到活動現場之前，就已熟悉 &lt;a href=&#34;https://cloud.google.com/shell/&#34;&gt;Google Cloud Shell&lt;/a&gt; 的操作環境。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;本實機操作課程由【Google Developers 贊助】。如果你是第一次用 GCP account 或還在 Free Trial 期間內，請繼續用 Free Trial 來操作；如果你已經是正式的 account，活動現場將提供你足夠額度的 coupon 來使用。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Nginx Ingress 與 Ambassador 簡易性能比較</title>
      <link>//william-yeh.net/post/2019/03/ingress-vs-ambassador/</link>
      <pubDate>Fri, 29 Mar 2019 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/03/ingress-vs-ambassador/</guid>
      
        <description>&lt;p&gt;API gateway 是微服務環境，甚至 service mesh 的要角 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;在 Kubernetes 上面，API gateway 選項眾多。有像 HAProxy 及 Nginx 這些石器時代老傢伙跨足過來，也有打從一開始就走 cloud native 路線的後起之秀。&lt;/p&gt;

&lt;p&gt;該如何選擇？&lt;/p&gt;

&lt;p&gt;根據 Steven Acreman 寫的 &lt;a href=&#34;https://kubedex.com/ingress/&#34;&gt;Ingress 評比文章&lt;/a&gt;的看法：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The safest choice is &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/&#34;&gt;ingress-nginx&lt;/a&gt;&lt;/em&gt;. This is the one that most people use and it’s extremely reliable. Before you begin I’d recommend you read this blog to get ahead of some of the problems you may encounter.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My vote for the coolest ingress definitely goes to &lt;a href=&#34;https://www.getambassador.io/&#34;&gt;Ambassador&lt;/a&gt;.&lt;/em&gt;  If you’re just running standard http based micro services and fancy living on the bleeding edge then you should definitely get Istio, Ambassador and Jaeger setup as a proof of concept.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;進一步研讀 Ambassador 相關資料 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，發現他們鎖定的 service mesh 路線很合我的胃口，站在 &lt;a href=&#34;https://www.envoyproxy.io/&#34;&gt;Envoy&lt;/a&gt; 巨人肩膀上更是聰明。不過，理論歸理論，我想親自試試看現在的 Ambassador 是否堪當大任？&lt;/p&gt;

&lt;p&gt;初步，我只先拿 &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/&#34;&gt;ingress-nginx&lt;/a&gt; 這個所謂的 “the safest choice” 作簡單的性能比較。將來有機會再進行更徹底的 chaos monkey 測試。&lt;/p&gt;

&lt;h2 id=&#34;實驗環境&#34;&gt;實驗環境&lt;/h2&gt;

&lt;p&gt;為了簡化實驗步驟，我直接採用 Google Cloud Platform 的 &lt;a href=&#34;https://cloud.google.com/kubernetes-engine/&#34;&gt;GKE&lt;/a&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Kubernetes 版本：1.11.7-gke.12&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Node：2 台 &lt;a href=&#34;https://cloud.google.com/compute/docs/machine-types#standard_machine_types&#34;&gt;n1-standard-1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我選用的標靶軟體是 &lt;a href=&#34;https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/tree/master/hello-app&#34;&gt;hello-app&lt;/a&gt;，分別用以下兩種 API gateway 來對外提供服務介面：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Nginx ingress 版本：0.23.0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ambassador 版本：0.52.0&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後，我利用 &lt;a href=&#34;https://github.com/William-Yeh/docker-boom&#34;&gt;boom&lt;/a&gt; 進行簡單的壓力測試。&lt;/p&gt;

&lt;h2 id=&#34;nginx-ingress&#34;&gt;Nginx ingress&lt;/h2&gt;

&lt;p&gt;為了簡單起見，我直接套用以下這份 Qwiklabs 的全部步驟：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qwiklabs.com/focuses/872?parent=catalog&#34;&gt;GSP181 - NGINX Ingress Controller on Google Kubernetes Engine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;照著做完後，Nginx ingress 會在 GKE 開放一個公開的 http 服務存取點。&lt;/p&gt;

&lt;p&gt;我們可以先用 &lt;code&gt;kubectl get services&lt;/code&gt; 查看 API gateway 的 public IP 位址。假設是 &lt;code&gt;35.222.12.84&lt;/code&gt; 的話，這個服務路徑則是 &lt;code&gt;http://35.222.12.84/hello/&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;ambassador&#34;&gt;Ambassador&lt;/h2&gt;

&lt;p&gt;首先，仿造前面的 Qwiklabs 步驟，在 GKE 上建立起相同規模的 k8s cluster。也執行一份 &lt;a href=&#34;https://gist.githubusercontent.com/William-Yeh/0aab709e450b4442614ef87b0250260b/raw/daba0ba7e6b5561ec9af51a3ea020c79e572e34e/hello-app-service.yaml&#34;&gt;hello-app service&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;為了安裝 Ambassador，我們需要開啟 GKE 權限：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl create clusterrolebinding my-cluster-admin-binding  \
    --clusterrole=cluster-admin  \
    --user=$(gcloud info --format=&amp;#34;value(config.account)&amp;#34;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接下來，就是正常的 Ambassador 安裝步驟：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl create -f http://bit.ly/2UmsPuE&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;此刻，我們終於可以透過 Ambassador，替 hello-app 設定 API gateway 規則：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl create -f https://bit.ly/2YyZzjO&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;照著做完後，Ambassador 會在 GKE 開放一個公開的 http 服務存取點。&lt;/p&gt;

&lt;p&gt;我們可以先用 &lt;code&gt;kubectl get services&lt;/code&gt; 查看 API gateway 的 public IP 位址。假設是 &lt;code&gt;35.224.99.169&lt;/code&gt; 的話，這個服務路徑則是 &lt;code&gt;http://35.224.99.169/hello2/&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;簡單的壓測&#34;&gt;簡單的壓測&lt;/h2&gt;

&lt;p&gt;為了簡單起見，我在 GCP 的 &lt;a href=&#34;https://cloud.google.com/shell/?hl=zh-tw&#34;&gt;Cloud Shell&lt;/a&gt; 進行壓測。我會對 Nginx ingress 及 Ambassador 兩種情況，各送出一萬個 API 存取要求。&lt;/p&gt;

&lt;p&gt;針對 Nginx ingress 的情況進行測試：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% docker run --rm  williamyeh/boom  \
    -n 10000 -c 100  http://35.222.12.84/hello/

Summary:
  Total:        16.2312 secs
  Slowest:      0.3252 secs
  Fastest:      0.1568 secs
  Average:      0.1616 secs
  Requests/sec: 616.0963
  Total data:   660000 bytes
  Size/request: 66 bytes

Status code distribution:
  [200] 10000 responses

Response time histogram:
  0.157 [1]     |
  0.174 [9803]  |∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
  0.190 [96]    |
  0.207 [0]     |
  0.224 [0]     |
  0.241 [0]     |
  0.258 [0]     |
  0.275 [0]     |
  0.292 [0]     |
  0.308 [0]     |
  0.325 [100]   |

Latency distribution:
  10% in 0.1576 secs
  25% in 0.1583 secs
  50% in 0.1593 secs
  75% in 0.1608 secs
  90% in 0.1632 secs
  95% in 0.1661 secs
  99% in 0.3152 secs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;針對 Ambassador 的情況進行測試：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% docker run --rm  williamyeh/boom  \
    -n 10000 -c 100  http://35.224.99.169/hello2/

Summary:
  Total:        16.8132 secs
  Slowest:      0.3857 secs
  Fastest:      0.1571 secs
  Average:      0.1662 secs
  Requests/sec: 594.7715
  Total data:   660000 bytes
  Size/request: 66 bytes

Status code distribution:
  [200] 10000 responses

Response time histogram:
  0.157 [1]     |
  0.180 [9595]  |∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
  0.203 [304]   |∎
  0.226 [0]     |
  0.249 [0]     |
  0.271 [0]     |
  0.294 [0]     |
  0.317 [0]     |
  0.340 [0]     |
  0.363 [8]     |
  0.386 [92]    |

Latency distribution:
  10% in 0.1596 secs
  25% in 0.1607 secs
  50% in 0.1623 secs
  75% in 0.1656 secs
  90% in 0.1717 secs
  95% in 0.1786 secs
  99% in 0.3596 secs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;儘管不夠嚴謹，但仍可以約略看出 Ambassador 的性能已經逼近 Nginx ingress。以才兩歲半的 Envoy &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;、才滿兩歲的 Ambassador &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; 來說，已經很不容易了。&lt;/p&gt;

&lt;p&gt;這是一個值得開始嘗試的好物。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;對於 API gateway 來龍去脈感興趣的，可參考 Ricky 的文章〈&lt;a href=&#34;https://rickhw.github.io/2018/01/24/AWS/Study-Notes-Overview-API-Gateway/&#34;&gt;Overview API Gateway&lt;/a&gt;〉、Andrew 的文章〈&lt;a href=&#34;https://columns.chicken-house.net/2017/07/11/microservice8-case-study-p3/&#34;&gt;架構師觀點 - 轉移到微服務架構的經驗分享 (Part 3)&lt;/a&gt;〉。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;對於 Ambassador 早期發展歷程感興趣的，可參考他們寫的這兩篇文章：“&lt;a href=&#34;https://medium.com/@datawire/building-ambassador-an-open-source-api-gateway-on-kubernetes-and-envoy-33637a9fa6f8&#34;&gt;Building Ambassador, an Open Source API Gateway on Kubernetes and Envoy&lt;/a&gt;” 及 “&lt;a href=&#34;https://blog.getambassador.io/kubernetes-ingress-nodeport-load-balancers-and-ingress-controllers-6e29f1c44f2d&#34;&gt;Kubernetes Ingress 101: NodePort, Load Balancers, and Ingress Controllers&lt;/a&gt;”。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;Envoy &lt;a href=&#34;https://github.com/envoyproxy/envoy/tree/v1.0.0&#34;&gt;1.0.0 版&lt;/a&gt;發布日期為 2016 年 9 月。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;Ambassador &lt;a href=&#34;https://github.com/datawire/ambassador/blob/master/CHANGELOG.md&#34;&gt;0.1.3 版&lt;/a&gt;發布日期為 2017 年 3 月。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>在 Windows 上復刻 Mac 使用習慣</title>
      <link>//william-yeh.net/post/2019/03/wsl-cmder-zsh/</link>
      <pubDate>Thu, 14 Mar 2019 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/03/wsl-cmder-zsh/</guid>
      
        <description>&lt;p&gt;改用 Mac 已經六年了。現在要再回頭碰 Windows，還真有點不習慣。&lt;/p&gt;

&lt;p&gt;這年頭，許多軟體其實都有 Mac 及 Windows 版了：Chrome、Firefox、Slack、Evernote、Dropbox、VSCode……最大的差別，應該是終端機命令列工具。&lt;/p&gt;

&lt;p&gt;上古時代，需要靠 &lt;a href=&#34;https://www.cygwin.com/&#34;&gt;Cygwin&lt;/a&gt; 或 &lt;a href=&#34;http://www.mingw.org/&#34;&gt;MinGW&lt;/a&gt; 方案，才能勉強湊出一點點 Unix 的命令列感覺，但地雷超級多，難以作為嚴肅用途。後來，到了 2015 年，從保哥那邊知道有 &lt;a href=&#34;https://cmder.net/&#34;&gt;Cmder&lt;/a&gt; 這個好物 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，微軟又於 2016 年推出 &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/&#34;&gt;WSL (Windows Subsystem for Linux)&lt;/a&gt; 機制，Windows 這邊似乎出現曙光，對 Unix 命令列愛好者展現出久違的吸引力。&lt;/p&gt;

&lt;p&gt;為了在 Windows 10 上面復刻我的 Mac 的體驗：&lt;a href=&#34;https://www.iterm2.com/&#34;&gt;iTerm2&lt;/a&gt; + &lt;a href=&#34;https://www.zsh.org/&#34;&gt;Zsh&lt;/a&gt; + &lt;a href=&#34;https://ohmyz.sh/&#34;&gt;Oh My ZSH&lt;/a&gt;，我試了幾天，把步驟整理如下。&lt;/p&gt;

&lt;h2 id=&#34;wsl&#34;&gt;WSL&lt;/h2&gt;

&lt;p&gt;請根據保哥的文章〈&lt;a href=&#34;https://blog.miniasp.com/post/2019/02/01/Useful-tool-WSL-Windows-Subsystem-for-Linux&#34;&gt;介紹好用工具：WSL (Windows Subsystem for Linux)&lt;/a&gt;〉進行以下步驟：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安裝 WSL。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安裝一個 Linux distribution。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第一次執行 WSL，並設定 Linux 的帳號密碼。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;zsh-oh-my-zsh&#34;&gt;Zsh + Oh My ZSH&lt;/h2&gt;

&lt;p&gt;在 WSL 中安裝 zsh 及 oh-my-zsh：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% sudo apt-get install zsh

% sudo sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;將 zsh 設為內定 shell：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% chsh -s $(which zsh)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果你的 zsh theme 含有許多特殊的符號字元，請順便安裝 &lt;a href=&#34;https://github.com/powerline/fonts&#34;&gt;Powerline&lt;/a&gt; 系列字型。&lt;/p&gt;

&lt;h2 id=&#34;cmder&#34;&gt;Cmder&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cmder.net/&#34;&gt;Cmder&lt;/a&gt; 有「完整版」及「迷你版」兩種安裝方式。有了 WSL 之後，msysgit 可以退場，因此，我們只需安裝 Cmder 迷你版。&lt;/p&gt;

&lt;p&gt;用 Chocolatey 套件管理工具安裝比較簡單：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;C:\&amp;gt; choco install cmdermini&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;細節請見 &lt;a href=&#34;https://chocolatey.org/packages/cmdermini&#34;&gt;https://chocolatey.org/packages/cmdermini&lt;/a&gt; 。&lt;/p&gt;

&lt;h2 id=&#34;整合-cmder-與-wsl&#34;&gt;整合 Cmder 與 WSL&lt;/h2&gt;

&lt;p&gt;為了讓 Cmder 以 WSL + Zsh 模式啟動，我們需要新增一個 Cmder 的 &amp;ldquo;Startup / Tasks&amp;rdquo;。&lt;/p&gt;

&lt;p&gt;譬如說，我們可新增一個名叫 &lt;code&gt;{WSL::zsh}&lt;/code&gt; 的 task，將 command 寫成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set &amp;quot;PATH=%ConEmuBaseDirShort%\wsl;%PATH%&amp;quot; &amp;amp; %ConEmuBaseDirShort%\conemu-cyg-64.exe --wsl -C~ -cur_console:p:t:&amp;quot;zsh&amp;quot; -t zsh -l
&lt;/code&gt;&lt;/pre&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/03/cmder-wsl-zsh.png&#34; alt=&#34;新增 Cmder 啟動設定&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/03/cmder-wsl-zsh.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;新增 Cmder 啟動設定&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;存檔完畢，以後只要以 &lt;code&gt;{WSL::zsh}&lt;/code&gt; 模式啟動，Cmder 就會自動套用 WSL + zsh 組態。&lt;/p&gt;

&lt;p&gt;進一步的設定細節，請參考 &lt;a href=&#34;https://conemu.github.io/en/BashOnWindows.html&#34;&gt;https://conemu.github.io/en/BashOnWindows.html&lt;/a&gt; 一文。&lt;/p&gt;

&lt;h2 id=&#34;設定-cmder-熱鍵&#34;&gt;設定 Cmder 熱鍵&lt;/h2&gt;

&lt;p&gt;為了復刻出類似 Mac + iTerm2 的使用習慣，我會花一些時間調整 Cmder 熱鍵設定。請參考保哥的文章〈&lt;a href=&#34;https://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder&#34;&gt;介紹好用工具：Cmder (具有 Linux 溫度的 Windows 命令提示字元工具)&lt;/a&gt;〉進行熱鍵設定。&lt;/p&gt;

&lt;p&gt;在 Windows 與 WSL 之間進行複製貼上的剪貼簿操作時，常會遇到換行問題。此時我也會順便將 Ctrl-V 組合鍵的 “Paste mode #2” 設定成  “Multi lines” &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/03/cmder-paste.png&#34; alt=&#34;調整 Cmder 剪貼簿的換行處理方式&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/03/cmder-paste.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;調整 Cmder 剪貼簿的換行處理方式&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;檔案系統&#34;&gt;檔案系統&lt;/h2&gt;

&lt;p&gt;我習慣將 Windows 的 D: 作為文件儲存專用區。&lt;/p&gt;

&lt;p&gt;預設情況下，WSL 會將 D: 掛載在 &lt;code&gt;/mnt/d&lt;/code&gt;，檔案系統則是 DrvFs：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% mount -l
rootfs on / type lxfs (rw,noatime)
none on /dev type tmpfs (rw,noatime,mode=755)
sysfs on /sys type sysfs (rw,nosuid,nodev,noexec,noatime)
proc on /proc type proc (rw,nosuid,nodev,noexec,noatime)
devpts on /dev/pts type devpts (rw,nosuid,noexec,noatime,gid=5,mode=620)
none on /run type tmpfs (rw,nosuid,noexec,noatime,mode=755)
none on /run/lock type tmpfs (rw,nosuid,nodev,noexec,noatime)
none on /run/shm type tmpfs (rw,nosuid,nodev,noatime)
none on /run/user type tmpfs (rw,nosuid,nodev,noexec,noatime,mode=755) binfmt_misc on /proc/sys/fs/binfmt_misc type binfmt_misc (rw,noatime)
D: on /mnt/d type drvfs (rw,noatime,uid=1000,gid=1000,case=off)
C: on /mnt/c type drvfs (rw,noatime,uid=1000,gid=1000,case=off)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;不過，因為某些複雜的原因 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，我們必須重新設定 &lt;code&gt;/mnt/d&lt;/code&gt; 的 mount 參數，才能讓 Linux 的檔案讀寫權限正常運作。&lt;/p&gt;

&lt;p&gt;我們先卸載 &lt;code&gt;/mnt/d&lt;/code&gt;，再用夾帶 &lt;code&gt;metadata&lt;/code&gt; 的方式重新掛載它：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% sudo umount /mnt/d

% sudo mount -t drvfs D: /mnt/d -o metadata,uid=1000,gid=1000,umask=22,fmask=111&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;先查看是否成功:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% mount -l
rootfs on / type lxfs (rw,noatime)
none on /dev type tmpfs (rw,noatime,mode=755)
sysfs on /sys type sysfs (rw,nosuid,nodev,noexec,noatime)
proc on /proc type proc (rw,nosuid,nodev,noexec,noatime)
devpts on /dev/pts type devpts (rw,nosuid,noexec,noatime,gid=5,mode=620)
none on /run type tmpfs (rw,nosuid,noexec,noatime,mode=755)
none on /run/lock type tmpfs (rw,nosuid,nodev,noexec,noatime)
none on /run/shm type tmpfs (rw,nosuid,nodev,noatime)
none on /run/user type tmpfs (rw,nosuid,nodev,noexec,noatime,mode=755) binfmt_misc on /proc/sys/fs/binfmt_misc type binfmt_misc (rw,noatime)
D: on /mnt/d type drvfs (rw,relatime,uid=1000,gid=1000,umask=22,fmask=111,metadata,case=off)
C: on /mnt/c type drvfs (rw,noatime,uid=1000,gid=1000,case=off)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果成功了，請記得將這設定寫進 &lt;code&gt;/etc/fstab&lt;/code&gt; 裡面，下次 WSL 啟動時就會自動生效：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;D: /mnt/d drvfs rw,relatime,uid=1000,gid=1000,metadata,umask=22,fmask=111 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;docker-與-kubernetes&#34;&gt;Docker 與 Kubernetes&lt;/h2&gt;

&lt;p&gt;雖然保哥的文章推薦在 WSL 裡的 Linux 再安裝一份 Docker engine &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，但我比較傾向&lt;strong&gt;不要&lt;/strong&gt;。我比較傾向共用既有資源，讓 WSL 直接連接到 Docker Desktop for Windows 身上。畢竟，在同一台電腦上，要維護兩套 Docker engine，太累了。&lt;/p&gt;

&lt;p&gt;我參考上官林傑的文章〈&lt;a href=&#34;https://medium.com/@ericsk/%E5%9C%A8-windows-subsystem-for-li
nux-wsl-%E4%B8%8B%E4%BD%BF%E7%94%A8-windows-%E4%B8%8A%E7%9A%84-docker-engine-8dc0040ca240&#34;&gt;在 Windows Subsystem for Linux (WSL) 下使用 Windows 上的 Docker Engine&lt;/a&gt;〉，做好必要的設定，但省略文中提到的 alias 步驟（稍後會說明為什麼）。簡單來說，請先進行這三步驟：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打開 Docker Desktop for Windows 的 &amp;ldquo;Expose daemon on tcp://localhost:2375 without TLS.&amp;rdquo; 選項。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在 WSL 裡設定 &lt;code&gt;DOCKER_HOST&lt;/code&gt; 環境變數：&lt;br/&gt;
&lt;code&gt;export DOCKER_HOST=&amp;quot;tcp://localhost:2375&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在 WSL 裡 &lt;code&gt;sudo visudo&lt;/code&gt; 以下環境變數：&lt;br/&gt;
&lt;code&gt;Defaults env_keep += &amp;quot;DOCKER_HOST&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上述文章建議透過 &lt;code&gt;alias docker=docker.exe&lt;/code&gt; 的方式來使用 Docker Desktop for Windows 的 docker client。不過，這些 alias 未必都能在 script 中展開 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; ——有鬆綁的方法，但我不喜歡破例。我比較傾向在 WSL 裡用簡單的 wrapper script 來處理。&lt;/p&gt;

&lt;p&gt;首先是 &lt;code&gt;/usr/local/bin/docker&lt;/code&gt; 檔案：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;#!/bin/bash

# allow WSL to have access to Docker Desktop for Windows
exec  &amp;#34;/mnt/c/Program Files/Docker/Docker/resources/bin/docker.exe&amp;#34;  &amp;#34;$@&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其次是 &lt;code&gt;/usr/local/bin/docker-compose&lt;/code&gt; 檔案：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;#!/bin/bash

# allow WSL to have access to Docker Desktop for Windows
exec  &amp;#34;/mnt/c/Program Files/Docker/Docker/resources/bin/docker-compose.exe&amp;#34;  &amp;#34;$@&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;別忘記打開它們的 &lt;code&gt;&#39;x&#39;&lt;/code&gt; 權限：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% sudo chmod a+x  /usr/local/bin/docker  /usr/local/bin/docker-compose&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;也別忘了，要將 Windows 上面的 Kubernetes 設定連接過來：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% ln -s /mnt/c/Users/xxx/.kube/config ~/.kube/config&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;好了，現在已經復刻一部分 Mac 的使用習慣了。是該要好好享受一下這種混血環境了。&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      2019-04-17 後續發展
    
  &lt;/div&gt;
  

&lt;p&gt;使用了一個月，不太能夠忍受 Cmder 不夠穩定的顯示邏輯：在視窗尺寸變化時，無法正確處理字元位置。因此，我改用〈&lt;a href=&#34;//william-yeh.net/post/2019/04/wsltty-tmux/&#34;&gt;WSLtty + tmux 組合技&lt;/a&gt;〉。&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;保哥於 2015 年九月舉辦過【&lt;a href=&#34;https://www.accupass.com/event/1509231111031581814500&#34;&gt;打造一個具有 Linux 溫度的 Windows 命令提示字元工具&lt;/a&gt;】線上講座，也寫了〈&lt;a href=&#34;https://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder&#34;&gt;介紹好用工具：Cmder&lt;/a&gt;〉一文。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Cmder 的剪貼簿設定細節，請見 &lt;a href=&#34;https://conemu.github.io/en/SettingsPaste.html&#34;&gt;https://conemu.github.io/en/SettingsPaste.html&lt;/a&gt; 。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;關於 WSL DrvFs 的 metadata 權限設定細節，請參考這三篇文章：“&lt;a href=&#34;https://blogs.msdn.microsoft.com/commandline/2018/01/12/chmod-chown-wsl-improvements/&#34;&gt;Chmod/Chown WSL Improvements&lt;/a&gt;”、“&lt;a href=&#34;https://www.brianketelsen.com/going-overboard-with-wsl-metadata/&#34;&gt;Going Overboard with WSL metadata&lt;/a&gt;”、〈&lt;a href=&#34;https://segmentfault.com/a/1190000016677670&#34;&gt;WSL 配置指北：打造 Windows 最强命令行&lt;/a&gt;〉。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;保哥的文章〈&lt;a href=&#34;https://blog.miniasp.com/post/2018/06/15/My-Windows-Subsystem-for-Linux-WSL-Setup-2018&#34;&gt;我的 Windows Subsystem for Linux (WSL) 終極開發人員配置 - 2018 版&lt;/a&gt;〉。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;Bash 的行為是：“Aliases are not expanded when the shell is not interactive, unless…”，請參考 “&lt;a href=&#34;https://unix.stackexchange.com/questions/1496/why-doesnt-my-bash-script-recognize-aliases&#34;&gt;Why doesn&amp;rsquo;t my Bash script recognize aliases?&lt;/a&gt;” 這類文章。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Kubernetes Best Practices 資料</title>
      <link>//william-yeh.net/post/2019/02/k8s-best-practice/</link>
      <pubDate>Mon, 25 Feb 2019 12:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/02/k8s-best-practice/</guid>
      
        <description>&lt;p&gt;Kubernetes 演化速度令人驚訝。彈性之大，令人聯想到當年  Perl 圈子奉為圭臬的 &lt;a href=&#34;https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it&#34;&gt;TIMTOWTDI&lt;/a&gt; 口號。&lt;/p&gt;

&lt;p&gt;選擇過多也會帶來問題。發展到某個階段，也該適時沈澱收斂出較佳的實務建議準則。&lt;/p&gt;

&lt;p&gt;因此，我稍微搜尋一下相關資料，作為參考。&lt;/p&gt;

&lt;p&gt;（這應該會是一份需要常常更新的文件）&lt;/p&gt;

&lt;h2 id=&#34;整體建議&#34;&gt;整體建議&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/top-5-kubernetes-best-practices-from-sandeep-dines&#34;&gt;Top 5 Kubernetes Best Practices From Sandeep Dinesh (Google)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.slideshare.net/BillLiu31/kubernetes-best-practices&#34;&gt;Kubernetes best practices&lt;/a&gt; by Bill Liu&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe
  style=&#34;width: 100%; height: 500px;&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;
  src=&#34;https://www.slideshare.net/slideshow/embed_code/78464702&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://medium.com/google-cloud/kubernetes-best-practices-8d5cd03446e2&#34;&gt;Kubernetes Best Practices&lt;/a&gt; by Daz Wilkin&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.openshift.com/kubernetes-application-operator-basics/&#34;&gt;Kubernetes Application Operator Basics&lt;/a&gt; by Michael Hausenblas&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;資源設定建議&#34;&gt;資源設定建議&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/overview/&#34;&gt;Configuration Best Practices&lt;/a&gt; by Kubernetes&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.replex.io/blog/9-best-practices-and-examples-for-working-with-kubernetes-labels&#34;&gt;9 Best Practices and Examples for Working with Kubernetes Labels&lt;/a&gt; by Hasham Haider&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/&#34;&gt;Recommended Labels&lt;/a&gt; by Kubernetes&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/blog/2016/08/kubernetes-namespaces-use-cases-insights/&#34;&gt;Kubernetes Namespaces: use cases and insights&lt;/a&gt; by Mike Altarace &amp;amp; Daz Wilkin&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;套件管理建議&#34;&gt;套件管理建議&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://helm.sh/docs/chart_best_practices/&#34;&gt;The Chart Best Practices Guide&lt;/a&gt; by Helm&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;資安建議&#34;&gt;資安建議&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://dev.to/petermbenjamin/kubernetes-security-best-practices-hlk&#34;&gt;Kubernetes Security Best-Practices&lt;/a&gt; by Peter Benjamin&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cncf.io/blog/2019/01/14/9-kubernetes-security-best-practices-everyone-must-follow/&#34;&gt;9 Kubernetes Security Best Practices Everyone Must Follow&lt;/a&gt; by CNCF&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://rancher.com/blog/2019/2019-01-17-101-more-kubernetes-security-best-practices/&#34;&gt;101 More Security Best Practices for Kubernetes&lt;/a&gt; by Adrian Goins&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>技術領導者微培訓</title>
      <link>//william-yeh.net/post/2019/01/tech-leader-reading/</link>
      <pubDate>Sat, 19 Jan 2019 10:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/01/tech-leader-reading/</guid>
      
        <description>&lt;p&gt;最近，我們研發組織有幅度不算小的變動，某些技術人會被要求承擔更多的技術領導責任。&lt;/p&gt;

&lt;p&gt;不過，正如&lt;a href=&#34;https://en.wikipedia.org/wiki/Gerald_Weinberg&#34;&gt;溫伯格&lt;/a&gt;大師在《&lt;a href=&#34;https://www.books.com.tw/products/0010467750&#34;&gt;領導者，該想什麼？&lt;/a&gt;》所說，技術人常會面臨天人交戰：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;儘管學校教育告訴我說，每一個好公民都應該負起領導責任，但痛苦經歷讓我害怕擔任任何領導者的角色。我學會盡可能推卻成為領導者的機會。面對領導的問題，我常假裝它是不存在的。為保證我永遠不會涉及到需要運用領導技能的場合，我選擇電腦軟體作為我的職業。&lt;/p&gt;

&lt;p&gt;事情發展非我所願。每當我在所負責的技術性工作上有出色表現時，同事就知道要對我更加尊敬，似乎把我當成他們的領導者。沒有人勉強我當領導者，是我自己陷入這樣一個矛盾的情境。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;為了讓過渡階段更順暢，雖然我在這裡只剩下很短的時間能夠幫忙了，但還是想略盡棉薄之力。&lt;/p&gt;

&lt;p&gt;以下是我的【技術領導者微培訓】企劃案。&lt;/p&gt;

&lt;h2 id=&#34;培訓目標&#34;&gt;培訓目標&lt;/h2&gt;

&lt;p&gt;引述《&lt;a href=&#34;https://www.books.com.tw/products/0010467750&#34;&gt;領導者，該想什麼？&lt;/a&gt;》第一章的列表，只要你對以下課題感到疑惑，這本書、這門課，對你應該都會有些幫助：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;領導者真的那麼愚蠢嗎？有時他們的確給人那種印象嗎？&lt;/li&gt;
&lt;li&gt;我能成為領導者，但不要像一般領導者那樣嗎？&lt;/li&gt;
&lt;li&gt;我能一面當領導者，一面繼續提升我的技術能力嗎？&lt;/li&gt;
&lt;li&gt;一個毫無技術背景的人，有可能在技術界成為領導者嗎？&lt;/li&gt;
&lt;li&gt;一旦成為領導者，我必須犧牲多少技術專業能力？&lt;/li&gt;
&lt;li&gt;我能得到多少回報？&lt;/li&gt;
&lt;li&gt;如果我是領導者，我需要擺出上司架式，對屬下頤指氣使嗎？&lt;/li&gt;
&lt;li&gt;我能藉由讀書習得領導技能嗎？&lt;/li&gt;
&lt;li&gt;我還可以從何處學習成為領導者呢？&lt;/li&gt;
&lt;li&gt;為何人們視我為領導者，而我卻不認為自己是領導者呢？&lt;/li&gt;
&lt;li&gt;為何我自認為很能幹，人們卻不把我當成領導者呢？&lt;/li&gt;
&lt;li&gt;倘若我不想承擔領導責任，又如何？&lt;/li&gt;
&lt;li&gt;到底什麼是領導？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這本書、這門課，沒辦法讓你一夕之間脫胎換骨，但能給你經過證實可行的方向。能獲得多少，端看你認真投入的程度、誠實面對自己的態度、敏銳觀察及切實反思的職場人紀律。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果他們的態度不夠嚴謹，那麼我建議他們做的任何事情，都是在浪費我的時間。 (p. 122)&lt;/p&gt;
&lt;/blockquote&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/01/tech-leader-book.png&#34; alt=&#34;Becoming a Technical Leader&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/01/tech-leader-book.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Becoming a Technical Leader&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;進度&#34;&gt;進度&lt;/h2&gt;

&lt;p&gt;請依照指定進度，先自行&lt;strong&gt;想辦法&lt;/strong&gt;閱讀指定讀物《&lt;a href=&#34;https://www.books.com.tw/products/0010467750&#34;&gt;領導者，該想什麼？&lt;/a&gt;》，並填寫學習單。&lt;/p&gt;

&lt;h3 id=&#34;第一週-領導概說&#34;&gt;第一週／領導概說&lt;/h3&gt;

&lt;p&gt;閱讀進度：第一章～第五章。&lt;/p&gt;

&lt;p&gt;學習單：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;準備一張清單，列舉說明哪些情境因為你的出現，使得他人的生產力因而「提升」。請準備另一張清單，列舉說明哪些情境因為你的出現，使得他人的生產力因而「下降」。你能找出這兩類情境的差異之處，並能分辨出它們的特色嗎？列出這張清單，能讓你更認識自己，及更認識讓你獲得授權的環境嗎？ (pp. 41&amp;ndash;42)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;根據前一個問題所準備的兩張清單內容來看，你是所屬團體的&lt;strong&gt;資產&lt;/strong&gt;還是&lt;strong&gt;負債&lt;/strong&gt;？ (p. 42)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你帶一組人做事，用什麼方法促使成員從不同角度檢討目前執行情形？獨自一人做事時，你又用什麼方法自我檢討？有任何途徑可幫助你改善目前自我檢討的方法嗎？ (p. 68)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;下一次帶一組人執行任務，列出你在行使領導技能時所做的所有事情。若未能列出至少十件事，請你再做一遍該任務，一直做到為了完成一個任務，至少要做十件有助於領導的事。列出此份清單後，試著將它們依&lt;strong&gt;瞭解問題&lt;/strong&gt;、&lt;strong&gt;控制點子的流通&lt;/strong&gt;、&lt;strong&gt;維持品質&lt;/strong&gt;分門別類。分類後，能看得出你的領導風格傾向於其中一類嗎？你做的哪些事無法歸類到這三類？ (p. 68)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你多久沒有登上一個新的&lt;strong&gt;高原期&lt;/strong&gt;了？你還在享受目前位於高原期的好日子嗎？為順利攀登下一個高原期，你做了哪些準備？ (p. 82)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你上一次針對職業生涯做重大改變，到現在有多久的時間了？在整個過程中，令你印象最深刻的事情或感受是什麼？ (p. 97)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最近一次你熟識的人做了重大職業改變，你的反應為何？你有沒有藉此機會想到自身處境？ (p. 97)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;第二週-創新&#34;&gt;第二週／創新&lt;/h3&gt;

&lt;p&gt;閱讀進度：第六章～第九章。&lt;/p&gt;

&lt;p&gt;學習單：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;至少閱讀一本你所景仰人物的自傳。在日記裡寫下該自傳中最讓你感到驚訝的事，以及最讓你感動的情節。 (p. 129)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你想出很多點子，後來怎麼樣了？大多數都實現了嗎？有多少點子因為創新程度不夠而胎死腹中？有多少點子因為環境不支援而被迫消失？領導不當或領導能力不足，是你犯該錯誤的主因嗎？何種訓練有助於提升你在上述案例行使領導技能的品質？ (改編合併自 p. 140 &amp;amp; p. 141)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你是否讓成功的事實變成繼續前進的絆腳石？如果你超越了目前的成就，哪些東西會跟著改變？你會怎麼做？ (p. 156)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你記得職業生涯中最淒慘的一段經歷嗎？你難以承受的是什麼？你如何從人生的最低潮走出來？你學到了什麼功課？再遇到人生低潮時，你會用不同方式處理嗎？ (p. 156)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;和他人打交道時，他們瞭解你的動機嗎？你希望他們瞭解你的動機嗎？你如何確認他們是否瞭解你的動機？ (p. 156)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;畫出你的&lt;strong&gt;事業線&lt;/strong&gt;。可能的話，找一位或多位朋友分享你的經歷，和他們討論你的人生起伏。記得將事業線延伸到未來。設想它是一部電影或一部小說，你會取什麼樣的名字？你希望由何人擔任這部電影的主角？ (p. 156)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;第三週-動機&#34;&gt;第三週／動機&lt;/h3&gt;

&lt;p&gt;閱讀進度：第十章～第十五章。&lt;/p&gt;

&lt;p&gt;學習單：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;試著回想你最近做過的一些蠢事。別人發現你做了那些蠢事，你作何反應？在追求攀登職涯高峰的過程中，你的&lt;strong&gt;自我防禦心理&lt;/strong&gt;越來越重或越來越輕？對於你採取的自我防禦作為，你如何處置它們？ (p. 174)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你曾否將事務置於人之上，現在你後悔了？你曾否將人置於事務之上，現在你後悔了？ (p. 187)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;玩遊戲的時候，你對得分較有興趣，還是對遊戲本身較有興趣？玩團隊遊戲的時候，你對團隊的得分較在意？還是對自己的得分較在意？這兩種心態，如何影響你貢獻力量於團隊，對於團隊成績有何影響？如果是團隊工作呢？ (p. 225)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你是否曾在某團隊中毫無貢獻？當你察覺到這一點時，你的感受是什麼？ (p. 239)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;回憶最近一次你進行&lt;strong&gt;力量交易&lt;/strong&gt;遭逢失敗的事例。你從這次交易中學到什麼？你能否以現在的新觀點從那件事再學習？ (p. 239)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;哪些在你內心運作的事，你努力不顯現於外？你知道其中運作的情形嗎？如果你將這些精力用在別處，結果將如何？ (p. 239)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;第四週-組織&#34;&gt;第四週／組織&lt;/h3&gt;

&lt;p&gt;閱讀進度：第十六章～第十九章。&lt;/p&gt;

&lt;p&gt;學習單：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在目前的工作環境裡，你擁有幾種不同的力量？你如何將這些力量轉換為更有效用的型態？你如何運用轉換得來的力量？ (p. 252)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果你在團隊中擔任決策者，你如何判知自己表現良好？你是否紀錄決策內容，並在事後檢視？你是否詢問團隊成員，這項決策對他們有何影響？如果你沒問，原因是什麼？ (p. 264)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你是否因組織缺乏效率受獎勵？或給予缺乏效率的組織獎勵？你能否創造一個相反的工作環境？ (p. 273)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;列一張清單，寫出你可以&lt;strong&gt;觀察&lt;/strong&gt;並&lt;strong&gt;實驗&lt;/strong&gt;組織運作的各個機會。再列一張清單，寫出你可以觀察並實驗，但你未加以利用的各個機會。你能否從第二張清單中挑出一個項目，找出未利用的原因，然後清除？ (p. 284)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;回想一下你是否有下述經驗：全力以赴的時候，卻被認為沒有盡力。當時你有何感受？你是否為自己辯護？結果如何？ (p. 285)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;回想某次，你認為某人沒有做出貢獻的情況。你是否能解讀為，在那種情況下，他已經盡力而為？當時那個人試圖解決什麼問題？下次再發生類似狀況時，你能否找出原因？ (p. 285)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;第五週-轉變&#34;&gt;第五週／轉變&lt;/h3&gt;

&lt;p&gt;閱讀進度：第二十章～第二十四章。&lt;/p&gt;

&lt;p&gt;學習單：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;上次新主管上任時，你首先注意到他哪一點？你花多少時間才信任這位新主管？他的哪一項動作獲得你的信任？哪一項動作減少你的信任？你積極和新主管配合，還是奮力和新主管作對？為什麼？ (p. 299)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果你預先知道你將接受某項考驗，你的情緒反應如何？如果你突然發現自己將接受考驗，你的情緒反應又是如何？兩者有何不同？是否有可以相互借鏡之處？ (p. 311)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你的工作環境是否有持續發生的衝突？你能否想出三種改變&lt;strong&gt;組織&lt;/strong&gt;的方式，以避免這些衝突？或是三種改變&lt;strong&gt;人際關係&lt;/strong&gt;的方式？哪一種型態適合你發揮長處？哪一種型態你運作起來較順手？ (p. 311)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你能否舉出三位同事，能給予你技術能力方面的指導？如果你想不出來，你為什麼還在這家公司上班？如果你有三位老師，你如何善用這項資源？ (p. 321)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;這一年來，你參加過哪些課程、讀過哪些書？這些對於你的技術能力和領導能力有何助益？你從中是否能學得更多？未來一年，你計畫參加哪些課程、讀哪些書？你應該做哪些事前準備，以獲益更多？ (p. 322)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你能否忍受無所事事的時間？你是否有時間審視你的周遭，審視你自己，以找出沒有更多時間的原因？為什麼沒有充裕的時間？如果確實沒有時間，請停止閱讀，開始檢討。 (p. 331)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;檢視你的&lt;strong&gt;個人支援網絡&lt;/strong&gt;的成員名單。哪些人你願意維持良好關係，以繼續獲得支援？這份名單在哪個部分顯得不足，必須加以補強？ (p. 343)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;上課前&#34;&gt;上課前&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;瀏覽學習單。&lt;/li&gt;
&lt;li&gt;速讀：每一份指定讀物，請在不超過 2 小時之內速讀完畢第一次。&lt;/li&gt;
&lt;li&gt;填寫學習單。&lt;/li&gt;
&lt;li&gt;如有時間，可再回頭重讀細讀內容。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;上課時&#34;&gt;上課時&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;攜帶學習單。&lt;/li&gt;
&lt;li&gt;以 &lt;a href=&#34;http://www.liberatingstructures.com/&#34;&gt;liberating structures&lt;/a&gt; 及互動討論方式，進行個案研討。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;有些個案討論有隱私性考量，為促成坦誠討論，參與者需宣誓對現場討論內容保密 (咦)。&lt;/p&gt;

&lt;h2 id=&#34;全部課程結束後&#34;&gt;全部課程結束後&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;從頭再看一次過去寫的學習單。這陣子，你有什麼改變了嗎？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;從《&lt;a href=&#34;https://www.books.com.tw/products/0010467750&#34;&gt;領導者，該想什麼？&lt;/a&gt;》書中不時可看出，&lt;a href=&#34;https://en.wikipedia.org/wiki/Gerald_Weinberg&#34;&gt;溫伯格&lt;/a&gt;受到&lt;a href=&#34;https://en.wikipedia.org/wiki/Virginia_Satir&#34;&gt;薩提爾&lt;/a&gt;的影響很深。請再讀讀《&lt;a href=&#34;https://www.books.com.tw/products/0010694726&#34;&gt;激發員工潛力的薩提爾教練模式&lt;/a&gt;》及《&lt;a href=&#34;https://www.books.com.tw/products/0010770522&#34;&gt;薩提爾的對話練習&lt;/a&gt;》兩本書，以進一步了解如何在職場上運用薩提爾模式。或者，直接去上薩提爾課程吧！&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>年假可讀的軟體領域輕讀物</title>
      <link>//william-yeh.net/post/2019/01/soft-reading-list/</link>
      <pubDate>Thu, 17 Jan 2019 15:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/01/soft-reading-list/</guid>
      
        <description>

&lt;p&gt;中午時，非 RD 的同事請我推薦適合泛軟體產業從業人員的五份輕讀物，可在春節連續假期時好好補血。&lt;/p&gt;

&lt;p&gt;年假，自然不方便啃太過於生硬艱澀、理論宏偉的讀物。我挑選這五份輕讀物：四本書，一組網路系列文章。敘事風格親切，高潮迭起，應該可以帶來不少啟發。&lt;/p&gt;

&lt;h2 id=&#34;it-實境小說&#34;&gt;IT 實境小說&lt;/h2&gt;

&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010765203&#34;&gt;鳳凰專案&lt;/a&gt;》，體會一下研發、維運、行銷、安控、財務等部門相互掣肘的慘劇，以及如何以 DevOps「三步工作法」來解決的戲劇性發展。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;你還沒有達到解決專案可交付成果、故障處理、審計合規等問題所需要的那種對工作的理解程度。在你對工作的內涵有更好的理解之前，任何關於控制工作的討論都會讓你茫然無措。正所謂：夏蟲不可語冰。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;敏捷神話&#34;&gt;敏捷神話&lt;/h2&gt;

&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010785434&#34;&gt;Scrum：用一半的時間做兩倍的事&lt;/a&gt;》，不要被聳動的書名騙了，這是本不吹牛不浮誇的好書。這本由 Scrum 發明人之一 Jeff Sutherland 所寫的書，揭露 Scrum 發展過程中的軼事。讀了之後，你會領會更多 Scrum 規則背後的精神。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我在書中提及，Scrum 源自於豐田生產系統，以及空戰的 OODA 循環。你會在接下來的內容中看到，從開發價格實惠、每加侖汽油能跑一百哩的車子，到協助美國聯邦調查局 (FBI) 建立 21 世紀的資料庫系統，任何東西都可以用 Scrum 來打造。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;跨出框架-需要練習&#34;&gt;跨出框架，需要練習&lt;/h2&gt;

&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010789923&#34;&gt;Pepper 開發者從 0 到 1 的創新工作法&lt;/a&gt;》，讓不是創業家、自由工作者、研究者的平凡上班族，也能習得具體的創新做法。你可以看到開發出 &lt;a href=&#34;https://zh.wikipedia.org/wiki/Pepper_(%E6%A9%9F%E5%99%A8%E4%BA%BA)&#34;&gt;Pepper&lt;/a&gt; 人型機器人的 &lt;a href=&#34;https://www.linkedin.com/in/kanamehayashi&#34;&gt;Kaname Hayashi&lt;/a&gt;，是如何有紀律地自我要求刻意練習。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;從 0 到 1 需要的不是「才能」，而是「練習」。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;外國月亮&#34;&gt;外國月亮&lt;/h2&gt;

&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010796709&#34;&gt;給力&lt;/a&gt;》，軟體／媒體科技業巨頭 Netflix 獨一無二的企業文化，但不要驟下「國情不合」的結論。多讀幾次，試著感受適度的低情境 (low context)、直接否定 (direct negative feedback)、平權式領導 (egalitarian) 風格有什麼殊勝之處。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;留住員工、使員工高度投入的方法，應該是招募對此計劃興趣濃厚、且傾向在同一工作待上很長時間的人才，而不是靠著提供他們四種加味水及設置員工睡眠艙來留住他們。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;是技術-也是藝術&#34;&gt;是技術，也是藝術&lt;/h2&gt;

&lt;p&gt;這原本是&lt;a href=&#34;//william-yeh.net/post/2018/12/practice-of-managers/&#34;&gt;【主管的修練】讀書會&lt;/a&gt;的輔助讀物，但單獨抽出來閱讀，也行。&lt;/p&gt;

&lt;p&gt;系列文 / 專案管理的藝術&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;⓪ &lt;a href=&#34;https://www.projectup.net/article/view/id/260&#34;&gt;決策的平衡點&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;① &lt;a href=&#34;https://www.projectup.net/article/view/id/259&#34;&gt;拉高視野、見林但不見樹&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;② &lt;a href=&#34;https://www.projectup.net/article/view/id/258&#34;&gt;平衡需求、但別想討好所有人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;③ &lt;a href=&#34;https://www.projectup.net/article/view/id/256&#34;&gt;重點掌握、如何抓大放小&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;④ &lt;a href=&#34;https://www.projectup.net/article/view/id/255&#34;&gt;主動發現、弭禍於無形之中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⑤ &lt;a href=&#34;https://www.projectup.net/article/view/id/253&#34;&gt;醜話先說，對事但不對人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⑥ &lt;a href=&#34;https://www.projectup.net/article/view/id/251&#34;&gt;品質管制、追求標準、一致、與穩定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⑦ &lt;a href=&#34;https://www.projectup.net/article/view/id/69&#34;&gt;降低流言、合適的訊息分享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⑧ &lt;a href=&#34;https://www.projectup.net/article/view/id/68&#34;&gt;沒有英雄、人員培育與接班計畫&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⑨ &lt;a href=&#34;https://www.projectup.net/article/view/id/67&#34;&gt;避免發散、一切都跟收斂有關&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⑩ &lt;a href=&#34;https://www.projectup.net/article/view/id/65&#34;&gt;歷史借鏡、能重複應用的才有價值&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;過完年，再來一場討論會吧。&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      補充
    
  &lt;/div&gt;
  

&lt;p&gt;好友 &lt;a href=&#34;https://www.facebook.com/91agile/&#34;&gt;91 (Joey)&lt;/a&gt; 隨後也發表了另一份春節期間的推薦讀物。分成三大類：① 輕讀物，② 重一點，需要系列性連串看完的書，③ 想趁著連假，消化一下大部頭的書。&lt;/p&gt;

&lt;p&gt;意者，請去看看那份&lt;a href=&#34;https://www.facebook.com/91agile/posts/1110269312481019&#34;&gt;清單&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Scrum 與《從 A 到 A&#43;》</title>
      <link>//william-yeh.net/post/2019/01/scrum-good-to-great/</link>
      <pubDate>Fri, 11 Jan 2019 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/01/scrum-good-to-great/</guid>
      
        <description>&lt;p&gt;最近重新溫習近二十年的老書《&lt;a href=&#34;https://www.books.com.tw/products/0010202911&#34;&gt;從 A 到 A+&lt;/a&gt;》，啟發頗多。&lt;/p&gt;

&lt;p&gt;《從 A 到 A+》作者們的實證研究方法很嚴謹 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。他們從 1965～1995 年名列 Fortune 500 的企業名單中，挑選「十五年累計股票報酬率」超越股市整體表現三倍以上，且不受產業循環影響的企業，研究這些績優公司從「優秀」到「卓越」的關鍵因素。最後，作者們提出「&lt;a href=&#34;https://www.jimcollins.com/concepts/the-flywheel.html&#34;&gt;飛輪效應&lt;/a&gt;」來統一解釋他們的發現：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/01/flywheel.jpg&#34; alt=&#34;飛輪效應&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/01/flywheel.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;飛輪效應&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;某方面來說，軟體研發圈講究的 Scrum，還滿符合《從 A 到 A+》所講的飛輪效應。&lt;/p&gt;

&lt;h2 id=&#34;飛輪的比喻&#34;&gt;飛輪的比喻&lt;/h2&gt;

&lt;p&gt;《從 A 到 A+》第八章如此說明飛輪的比喻：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;無論最後的結果是多麽戲劇化，「從優秀到卓越」的轉型過程都絕非一蹴可幾。優秀公司躍升為卓越企業，靠的是累積的努力——腳踏實地一步一步，一個行動接著一個行動，一個決定接著一個決定，一圈接著一圈的轉動飛輪，點點滴滴累積起來，終於達到了持久不墜的非凡績效。&lt;/p&gt;

&lt;p&gt;「從優秀到卓越」的公司，和對照公司一樣，都會面臨華爾街要求短期績效的壓力。然而和對照公司不同的是，在壓力下，「從優秀到卓越」的公司仍然有足夠的&lt;strong&gt;耐性&lt;/strong&gt;和&lt;strong&gt;紀律&lt;/strong&gt;遵循先厚植實力、再突飛猛進的飛輪模式。最後，他們終能展現驚人的績效，即使照著華爾街的標準來看，都非常成功。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這，是不是跟 Scrum 嚴守五事件 (sprint, sprint planning, daily scrum, sprint review, sprint retrospective)、三產物 (product backlog, sprint backlog, increment) 的紀律，有異曲同工之妙呢？&lt;/p&gt;

&lt;h2 id=&#34;第五級領導&#34;&gt;第五級領導&lt;/h2&gt;

&lt;p&gt;《從 A 到 A+》第二章如此說明「第五級領導」的特色：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;第五級領導人具備了雙重特質：宅心仁厚，但意志堅定；謙沖為懷，但勇敢無畏。&lt;/p&gt;

&lt;p&gt;所有「從優秀到卓越」的公司，在蛻變期都出現了第五級領導人，而對照公司卻普遍缺乏。由於第五級領導人的概念違背了傳統智慧——公司變革必須仰賴備受矚目的救星來推動，務必請切記，第五級領導人是實證研究的發現，而不是空談得到的觀念。&lt;/p&gt;

&lt;p&gt;最大的諷刺是，通常一個人能夠位高權重，是因為他積極進取，野心勃勃，這卻和第五級領導所要求的謙虛性格背道而馳。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這，是不是跟 Scrum master 所講究的「僕人式領導」、product owner 講究的「為 product backlog 當責」，有異曲同工之妙呢？&lt;/p&gt;

&lt;h2 id=&#34;找對人&#34;&gt;找對人&lt;/h2&gt;

&lt;p&gt;《從 A 到 A+》第三章如此說明「先找對人，再決定要做什麼」的觀念：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;推動優秀公司邁向卓越的企業領導人，並非先找出巴士該往哪裡開，然後要員工把車子開過去。他們反而先找對人上車（要求不適合的人下車），接下來才弄清楚車子該往哪個方向開。&lt;/p&gt;

&lt;p&gt;第一，如果你先思考「該找什麼人」，而不是「該做什麼」，將比較容易因應瞬息萬變的世界。其次，如果你找對了人上車，根本就不太需要操心激勵員工和管理員工的問題。第三，如果找錯了人，就算你找到了正確的方向都沒用。&lt;/p&gt;

&lt;p&gt;卓越公司的領導人通常都了解，成長的最大瓶頸不在於市場、技術、競爭或產品，「能不能延攬到適合的人才，並且留住人才」的重要性凌駕於這一切。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;《從 A 到 A+》的後記，甚至如此主張：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;放寬「用對人」的定義，多關注這個人性格上的優點，不要太強調專業知識。他們可以學習技能，獲得知識，但是卻無法透過學習，培養出適合組織的基本人格特質。&lt;/p&gt;

&lt;p&gt;應該善用景氣不好的時候，多方延攬卓越的人才，即使當時你腦中還沒有想到適當的職位。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這，讓我聯想到 &lt;a href=&#34;https://www.scrumguides.org/&#34;&gt;&lt;em&gt;The Scrum Guide&lt;/em&gt;&lt;/a&gt; 主張的五大價值觀：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;當 Scrum Team 體現和活化承擔 (commitment)、勇氣 (courage)、專注 (focus)、開放 (openness) 和尊重 (respect) 這五種價值觀時，Scrum 的三根支柱：透明性 (transparency)、檢視性 (inspection)、調適性 (adaptation) 就會出現並幫助大家建立信任。隨著 Scrum Team 成員從事 Scrum 角色、活動和產出物的過程中，他們就會學習和探索這些價值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;若不幸找到錯的人，這五大價值觀是否能夠很快灌輸在他們身上呢？&lt;/p&gt;

&lt;h2 id=&#34;真實與透明&#34;&gt;真實與透明&lt;/h2&gt;

&lt;p&gt;《從 A 到 A+》第四章如此說明「面對殘酷現實，但決不喪失信心」的觀念：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;領導力和願景有關，但是領導力也和創造能聽到真話和面對現實的環境有關。&lt;/p&gt;

&lt;p&gt;如果你是很有領袖魅力的強人，應該花時間好好想一想，領袖魅力是資產，也是負債。你性格上的優點也可能埋下了問題的種子，員工會自動過濾資訊，不讓你接觸到殘酷的真相。你仍然可以克服領袖魅力帶來的問題，但是必須有充分的自覺，長期投注心力注意這個問題。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這，是不是跟 Scrum 的 sprint review 及 sprint retrospective 所講究的重點，有異曲同工之妙呢？&lt;/p&gt;

&lt;h2 id=&#34;刺蝟原則&#34;&gt;刺蝟原則&lt;/h2&gt;

&lt;p&gt;《從 A 到 A+》第五章主張：「從優秀躍升到卓越，必須對於三個互相交集的圓圈有深入的理解，並且把這種理解轉化為單純而清楚的概念」：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:20em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/01/hedgehog-principle.jpg&#34; alt=&#34;刺蝟原則&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/01/hedgehog-principle.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;刺蝟原則&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;「從優秀到卓越」的公司比較像刺蝟——單純、憨厚，只懂得「一件大事」，但卻能一以貫之。對照公司則比較像狐狸——詭計多端、行動敏捷，懂得許多事情，但卻前後矛盾，缺乏一致性。&lt;/p&gt;

&lt;p&gt;「從優秀到卓越」的公司，平均要花四年的時間，才能釐清他們的刺蝟原則。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在較微觀的尺度來說，這，是不是跟 Scrum 的 sprint goal，有異曲同工之妙呢？&lt;/p&gt;

&lt;h2 id=&#34;紀律&#34;&gt;紀律&lt;/h2&gt;

&lt;p&gt;《從 A 到 A+》第六章主張「企業應該建立起一種文化，讓員工能在三個圓圈中採取有紀律的行動，堅守刺蝟原則」：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:20em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/01/discipline.jpg&#34; alt=&#34;紀律&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/01/discipline.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;紀律&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;自由與責任，紀律，凡此種種，是不是跟 Scrum 的「自組織文化」與紀律，有異曲同工之妙呢？&lt;/p&gt;

&lt;h2 id=&#34;科技&#34;&gt;科技&lt;/h2&gt;

&lt;p&gt;《從 A 到 A+》第七章主張要以合宜態度面對科技：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「從優秀到卓越」公司的領導人，都有一股發自內心的創造性驅動力，因為渴望追求卓越而追求卓越；至於表現平平的公司，領導人背後的驅動力通常只是害怕落後。&lt;/p&gt;

&lt;p&gt;「從優秀到卓越」的背後驅動力，絕不是恐懼。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這，是不是跟 Scrum 的 DoD (definition of done) 品質紀律，甚至&lt;a href=&#34;https://agilemanifesto.org/principles.html&#34;&gt;敏捷原則&lt;/a&gt;第九條 &amp;ldquo;Continuous attention to technical excellence and good design enhances agility.&amp;rdquo; 所揭櫫的重點，有異曲同工之妙呢？&lt;/p&gt;

&lt;h2 id=&#34;按部就班&#34;&gt;按部就班&lt;/h2&gt;

&lt;p&gt;《從 A 到 A+》的後記，在回答「我應該從什麼地方開始做起？」問題時，如此提醒：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;首先，熟讀所有的發現。切記，不能單靠其中任何一項發現來造就卓越的企業，你必須把它當成一體，照著我們的架構，按部就班一一實施整套做法。&lt;/p&gt;

&lt;p&gt;本書循序漸進的陳述架構，正好符合我們所觀察到的企業做法和步驟，因此，本書的結構就是你們的最佳指南。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這，是不是跟 Scrum 兩位發明人在《&lt;a href=&#34;https://www.books.com.tw/products/0010647604&#34;&gt;告別瀑布，擁抱敏捷&lt;/a&gt;》所提的警告，有異曲同工之妙呢？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scrum 不是可以被隨意修改，來迎合既有企業文化的流程，反而是應該調整企業文化來適應 Scrum。&lt;/p&gt;

&lt;p&gt;如果沒有用 Scrum 來建立敏捷、透明的開發環境，那隱藏的問題將會一直留在企業內損害企業的利益。那就失去了使用 Scrum 最主要的好處。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;持續的改進&#34;&gt;持續的改進&lt;/h2&gt;

&lt;p&gt;《從 A 到 A+》第八章在談到飛輪效應時，有這麼一段語重心長的觀察：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「從優秀到卓越」的公司，比較不喜歡在八字還沒有一撇的時候，就對外大肆宣揚偉大的目標。他們只是開始轉動飛輪——先深入了解，然後採取具體行動，一步接著一步，一圈接著一圈。等到飛輪慢慢累積了龐大的動能之後，他們才抬起頭來說：「嘿，如果我們一直這樣推動下去，沒有理由達不到目標。」&lt;/p&gt;

&lt;p&gt;我們發現，當有了適當的條件時，員工的投入、團結、激勵和變革等問題，都自然會迎刃而解，完全不是問題。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這麼美好的飛輪，要啟動，關鍵在於「有了適當的條件」。&lt;/p&gt;

&lt;p&gt;如果從 Scrum 角度來看，你認為，什麼是所謂的「適當的條件」呢？這是值得你我深思的大哉問。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010202911&#34;&gt;從 A 到 A+&lt;/a&gt;》附錄一說明作者們採取的研究方法及篩選過程：①根據 1965～1995 年 Fortune 500 名單，從所有美國公司中選出 1,435 家公司，②根據平均複合投資人報酬率，從 1,435 家公司到 126 家公司，③根據累積股票報酬率，訂出 11 則淘汰標準，從 126 家公司到 19 家公司。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>你要一直打野戰嗎？</title>
      <link>//william-yeh.net/post/2019/01/field-battle-only/</link>
      <pubDate>Thu, 03 Jan 2019 13:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/01/field-battle-only/</guid>
      
        <description>&lt;p&gt;去年十二月，接連把超讚的兩本書讀完。&lt;/p&gt;

&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010802878&#34;&gt;什麼才是經營最難的事&lt;/a&gt;》較偏草創期的戰鬥智慧，《&lt;a href=&#34;https://www.books.com.tw/products/0010796709&#34;&gt;給力&lt;/a&gt;》較偏成長期的經營智慧。兩種規模，兩種思維，激盪我許多想法。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/01/powerful-and-hard-things.jpg&#34; alt=&#34;兩種極端的好書&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/01/powerful-and-hard-things.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;兩種極端的好書&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;不同的生存階段，不同的公司地位，需要的手法會不同。&lt;/p&gt;

&lt;p&gt;但這並非截然二分。像《&lt;a href=&#34;https://www.books.com.tw/products/0010802878&#34;&gt;什麼才是經營最難的事&lt;/a&gt;》第七章，儘管強調戰時執行長與平時執行長的對比 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，卻也說：「平時執行長重視員工培訓，以員工成就感與職涯發展為己任。戰時執行長也重視員工訓練，以免大家在戰場淪為砲灰。」&lt;/p&gt;

&lt;p&gt;有些事，不分平時戰時，都需要顧及到的。&lt;/p&gt;

&lt;p&gt;所以，當我看到朋友 &lt;a href=&#34;https://medium.com/@vincekuoyu&#34;&gt;Vince&lt;/a&gt; 最近引述《&lt;a href=&#34;https://www.books.com.tw/products/0010802878&#34;&gt;什麼才是經營最難的事&lt;/a&gt;》第七章的一段話，很有感觸：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:20em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/01/wartime-ceo.png&#34; alt=&#34;戰時執行長&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/01/wartime-ceo.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;戰時執行長&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這段話，讓我聯想到金庸。&lt;/p&gt;

&lt;h2 id=&#34;岳飛不讀兵書&#34;&gt;岳飛不讀兵書？&lt;/h2&gt;

&lt;p&gt;金庸小說《&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%B0%84%E9%B5%B0%E8%8B%B1%E9%9B%84%E5%82%B3&#34;&gt;射鵰英雄傳&lt;/a&gt;》第三十六回，提到岳飛對於兵法的獨特見解：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;岳飛少年時只喜野戰，上司宗澤說道：「爾勇智才藝，古良將不能過。然好野戰，非萬全計。」因授以布陣之法。岳飛說道：「陣而後戰，兵法之常。運用之妙，存乎一心。」宗澤對他的話也頗為首肯。但岳飛後來征伐既多，也知執泥舊法固然不可，但以陣法教將練卒，再施之於戰場，亦大有制勝克敵之功。這番經過也都記在《武穆遺書》之中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;當然啦，《武穆遺書》云云，只是金庸在小說中杜撰的。那麼，真實的歷史呢？&lt;/p&gt;

&lt;p&gt;看看《宋史》吧！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;戰開德、曹州皆有功，澤大奇之，曰：「爾勇智才藝，古良將不能過，然好野戰，非萬全計。」因授以陣圖。飛曰：「陣而後戰，兵法之常，運用之妙，存乎一心。」澤是其言。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;mdash; 《宋史》&lt;a href=&#34;https://zh.wikisource.org/zh-hant/%E5%AE%8B%E5%8F%B2/%E5%8D%B7365&#34;&gt;卷365&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;乍看之下，成年之後的岳飛，似乎只擅長野戰，輕視兵書佈陣之法；但《宋史》也記載年少時岳飛的另一面：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;人少負氣節，沈厚寡言，家貧力學，尤好《左氏春秋》、孫吳兵法。生有神力，未冠，挽弓三百斤，弩八石。學射於周同，盡其術，能左右射。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;mdash; 《宋史》&lt;a href=&#34;https://zh.wikisource.org/zh-hant/%E5%AE%8B%E5%8F%B2/%E5%8D%B7365&#34;&gt;卷365&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可見，相關經典，他早就讀過了，甚至可說是讀通了——在實踐中融會貫通。&lt;/p&gt;

&lt;p&gt;融會「常」與「變」，才有資格講「運用之妙，存乎一心」。&lt;/p&gt;

&lt;p&gt;一代大將如此，你我呢？&lt;/p&gt;

&lt;h2 id=&#34;短線與長線&#34;&gt;短線與長線&lt;/h2&gt;

&lt;p&gt;Bryan 新文章〈&lt;a href=&#34;https://www.projectup.net/article/view/id/16556&#34;&gt;會賺錢就是好公司？賺錢公司其實有兩種，你現在待的是哪一種？&lt;/a&gt;〉也提到一則妙喻：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;小米雷軍有句名言：「站在風口上，豬都會飛。」而更多時候，馬雲這段話讓人更有感：「豬碰上風也會飛，但風過去摔死的還是豬！」（最近大陸的豬還真可憐～）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，你想當只會打野戰、只會搭順風火箭的人嗎？&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010802878&#34;&gt;什麼才是經營最難的事&lt;/a&gt;》第七章，將執行長分成平時執行長 (peacetime CEO) 與戰時執行長 (wartime CEO) 兩種類型。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>【主管的修練】讀書會</title>
      <link>//william-yeh.net/post/2018/12/practice-of-managers/</link>
      <pubDate>Mon, 24 Dec 2018 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/12/practice-of-managers/</guid>
      
        <description>&lt;p&gt;稍早草擬的〈&lt;a href=&#34;//william-yeh.net/post/2018/11/succession-planning/&#34;&gt;接班人計畫&lt;/a&gt;〉偏向一對一的培訓。&lt;/p&gt;

&lt;p&gt;若是一對多呢？&lt;/p&gt;

&lt;p&gt;於是乎，就有了這份企劃：【主管的修練】讀書會。&lt;/p&gt;

&lt;p&gt;這一部分是模仿《&lt;a href=&#34;https://www.kingstone.com.tw/book/book_page.asp?kmcode=2014940760328&#34;&gt;利潤的故事&lt;/a&gt;》的做法 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，尤其是&lt;a href=&#34;https://wiki.mbalib.com/zh-tw/%E8%A9%B9%E5%A7%86%E6%96%AF%C2%B7%E9%9F%A6%E4%BC%AF%C2%B7%E6%89%AC&#34;&gt;楊傑美&lt;/a&gt;的「前端載入」方法。但我還融入剛學到的 &lt;a href=&#34;http://www.liberatingstructures.com/&#34;&gt;liberating structures&lt;/a&gt; 等技巧 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。改成速讀 + 互動討論的形式，應該既緊湊又有趣吧。&lt;/p&gt;

&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/front-end-loading.jpg&#34; alt=&#34;「前端載入」&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/front-end-loading.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;「前端載入」&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;以下是企劃內容。&lt;/p&gt;

&lt;h2 id=&#34;簡介&#34;&gt;簡介&lt;/h2&gt;

&lt;p&gt;探討初階中階主管的六大課題：領導與管理思維、參與式決策、人才管理教育和支持、溝通與衝突化解、團隊績效的考核標準、團隊文化和核心信念 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。課程以個案研討形式為主，有大量課堂討論，學員需要依照進度先行閱讀指定讀物。能配合的，再考慮參加。&lt;/p&gt;

&lt;h2 id=&#34;適合對象&#34;&gt;適合對象&lt;/h2&gt;

&lt;p&gt;已經是，或有志於在職涯中成為主管者。&lt;/p&gt;

&lt;h2 id=&#34;進度&#34;&gt;進度&lt;/h2&gt;

&lt;p&gt;請依照指定進度，先自行&lt;strong&gt;想辦法&lt;/strong&gt;閱讀以下指定讀物。&lt;/p&gt;

&lt;h3 id=&#34;第一週-領導&#34;&gt;第一週／領導&lt;/h3&gt;

&lt;p&gt;主要讀物：《&lt;a href=&#34;https://www.books.com.tw/products/0010445840&#34;&gt;領導，不需要頭銜&lt;/a&gt;》&lt;/p&gt;

&lt;p&gt;輔助讀物：〈&lt;a href=&#34;https://www.projectup.net/article/view/id/2457&#34;&gt;太多領導，太少管理&lt;/a&gt;〉，算是對《領導，不需要頭銜》pp. 78-81 的平衡報導。&lt;/p&gt;

&lt;h3 id=&#34;第二週-管理&#34;&gt;第二週／管理&lt;/h3&gt;

&lt;p&gt;主要讀物：《&lt;a href=&#34;https://www.books.com.tw/products/0010641668&#34;&gt;三年後，你的工作還在嗎？&lt;/a&gt;》&lt;/p&gt;

&lt;p&gt;輔助讀物：系列文 / 專案管理的藝術&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;⓪ &lt;a href=&#34;https://www.projectup.net/article/view/id/260&#34;&gt;決策的平衡點&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;① &lt;a href=&#34;https://www.projectup.net/article/view/id/259&#34;&gt;拉高視野、見林但不見樹&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;② &lt;a href=&#34;https://www.projectup.net/article/view/id/258&#34;&gt;平衡需求、但別想討好所有人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;③ &lt;a href=&#34;https://www.projectup.net/article/view/id/256&#34;&gt;重點掌握、如何抓大放小&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;④ &lt;a href=&#34;https://www.projectup.net/article/view/id/255&#34;&gt;主動發現、弭禍於無形之中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⑥ &lt;a href=&#34;https://www.projectup.net/article/view/id/251&#34;&gt;品質管制、追求標準、一致、與穩定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⑨ &lt;a href=&#34;https://www.projectup.net/article/view/id/67&#34;&gt;避免發散、一切都跟收斂有關&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;第三週-管理&#34;&gt;第三週／管理&lt;/h3&gt;

&lt;p&gt;主要讀物：《&lt;a href=&#34;https://www.books.com.tw/products/0010805719&#34;&gt;可複製的領導力&lt;/a&gt;》&lt;/p&gt;

&lt;p&gt;輔助讀物：系列文 / 專案管理的藝術&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;⑤ &lt;a href=&#34;https://www.projectup.net/article/view/id/253&#34;&gt;醜話先說，對事但不對人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⑦ &lt;a href=&#34;https://www.projectup.net/article/view/id/69&#34;&gt;降低流言、合適的訊息分享&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;第四週-參與式決策&#34;&gt;第四週／參與式決策&lt;/h3&gt;

&lt;p&gt;主要讀物：《&lt;a href=&#34;http://www.eslite.com/product.aspx?pgid=1001187001748080&#34;&gt;誰說我們不能一起做決定&lt;/a&gt;》 ＆ 《&lt;a href=&#34;https://funevo.com/2018/06/15/%E8%AE%8A%E9%9D%A9%E9%A0%98%E5%B0%8E%E8%80%85%E4%BC%81%E6%A5%AD%E6%95%8F%E6%8D%B7%E8%BD%89%E5%9E%8B%E6%8C%87%E5%8D%97/&#34;&gt;原來你才是絆腳石&lt;/a&gt;》&lt;/p&gt;

&lt;p&gt;輔助讀物：系列文 / Titansoft 的經驗談&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;引導：&lt;a href=&#34;https://funevo.com/2016/08/12/agile-scrum-needs-facilitation/&#34;&gt;敏捷 X 引導 – 讓 Scrum 團隊自組織的具體方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;開放空間 #1：&lt;a href=&#34;https://funevo.com/2016/06/25/first-open-space-technology-in-titansoft/&#34;&gt;如魔術般的神奇空間 – 公司內舉辦開放空間會議初體驗&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;開放空間 #2：&lt;a href=&#34;https://funevo.com/2016/09/29/second-open-space-technology-in-titansoft/&#34;&gt;一回生、兩回熟 – 公司內開放空間會議第二彈&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;深度匯談 #1：&lt;a href=&#34;https://funevo.com/2015/10/29/ica%E6%B7%B1%E5%BA%A6%E5%8C%AF%E8%AB%87%E8%AA%B2%E7%A8%8B%E5%BF%83%E5%BE%97-dialogue/&#34;&gt;冒點險讓關係更緊密 – ICA 引導技術之深度匯談課程心得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;深度匯談 #2：&lt;a href=&#34;https://funevo.com/2016/08/03/%E5%85%AC%E5%8F%B8%E7%B5%84%E7%B9%94%E5%85%A7%E8%88%89%E8%BE%A6%E6%B7%B1%E5%BA%A6%E5%8C%AF%E8%AB%87%E5%BC%95%E5%B0%8E%E8%AA%B2%E7%A8%8B/&#34;&gt;再探深度匯談 – 在公司組織內舉辦引導課程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;第五週-人才管理教育和支持&#34;&gt;第五週／人才管理教育和支持&lt;/h3&gt;

&lt;p&gt;主要讀物：《&lt;a href=&#34;https://www.books.com.tw/products/0010730316&#34;&gt;別讓績效管理毀了你的團隊&lt;/a&gt;》&lt;/p&gt;

&lt;p&gt;輔助讀物：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MJ老師〈我的 OKR Action Note 使用技巧說明〉&lt;a href=&#34;http://financemj.com/5782&#34;&gt;文章&lt;/a&gt;及&lt;a href=&#34;https://www.facebook.com/MJ1095/posts/10157115155824625&#34;&gt;影片&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010482108&#34;&gt;下一步，成功&lt;/a&gt;》第二章。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hbrtaiwan.com/article_content_AR0003066.html&#34;&gt;績效管理再進化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.managertoday.com.tw/articles/view/56451&#34;&gt;想讓組織變敏捷，導入 Scrum 工作法只是開始！人資還該做的 2 件事&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;第六週-團隊文化和核心信念&#34;&gt;第六週／團隊文化和核心信念&lt;/h3&gt;

&lt;p&gt;主要讀物：《&lt;a href=&#34;https://www.books.com.tw/products/0010796709&#34;&gt;給力&lt;/a&gt;》&lt;/p&gt;

&lt;p&gt;輔助讀物：系列文 / 專案管理的藝術&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;⑧ &lt;a href=&#34;https://www.projectup.net/article/view/id/68&#34;&gt;沒有英雄、人員培育與接班計畫&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;輔助讀物：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010482108&#34;&gt;下一步，成功&lt;/a&gt;》第四章。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hbrtaiwan.com/article_content_AR0006825.html&#34;&gt;如何管理比你聰明的人&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;第七週-總結&#34;&gt;第七週／總結&lt;/h3&gt;

&lt;p&gt;主要讀物：《&lt;a href=&#34;https://www.books.com.tw/products/0010782941&#34;&gt;原則&lt;/a&gt;》第一部分 ＆ &lt;a href=&#34;https://tw.voicetube.com/videos/70025&#34;&gt;&lt;em&gt;Principles For Success&lt;/em&gt; 影片&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;輔助讀物：系列文 / 專案管理的藝術&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;⑩ &lt;a href=&#34;https://www.projectup.net/article/view/id/65&#34;&gt;歷史借鏡、能重複應用的才有價值&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;上課前&#34;&gt;上課前&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;瀏覽學習單。&lt;/li&gt;
&lt;li&gt;速讀：每一份指定讀物，請在不超過 2 小時之內速讀完畢第一次。&lt;/li&gt;
&lt;li&gt;填寫學習單。&lt;/li&gt;
&lt;li&gt;如有時間，可再回頭重讀細讀內容。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;上課時&#34;&gt;上課時&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;攜帶學習單。&lt;/li&gt;
&lt;li&gt;以 &lt;a href=&#34;http://www.liberatingstructures.com/&#34;&gt;liberating structures&lt;/a&gt; 及互動討論方式，進行個案研討。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;有些個案討論有隱私性考量，為促成坦誠討論，參與者需宣誓對現場討論內容保密 (咦)。&lt;/p&gt;

&lt;h2 id=&#34;全部課程結束後&#34;&gt;全部課程結束後&lt;/h2&gt;

&lt;p&gt;讀一讀 Andrew Grove 的《&lt;a href=&#34;https://www.books.com.tw/products/0010617863&#34;&gt;葛洛夫給經理人的第一課&lt;/a&gt;》。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;關於《&lt;a href=&#34;https://www.kingstone.com.tw/book/book_page.asp?kmcode=2014940760328&#34;&gt;利潤的故事&lt;/a&gt;》這本書，我在〈&lt;a href=&#34;//william-yeh.net/post/2018/12/2018-retrospective/&#34;&gt;2018 個人回顧&lt;/a&gt;〉一文有更詳細的介紹。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;我是在 Scrum.org 在台北舉辦的 &lt;a href=&#34;https://www.eventbrite.co.uk/e/scrumon-tickets-51310998578&#34;&gt;ScrumOn&lt;/a&gt; 活動中，第一次體驗有趣的 &lt;a href=&#34;http://www.liberatingstructures.com/&#34;&gt;liberating structures&lt;/a&gt; 技巧。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;這六大主題的界定，其中有五項是參考【&lt;a href=&#34;https://www.knack.com.tw/Event/ManagerSkill&#34;&gt;帶人的技術&lt;/a&gt;】線上課程的廣告文案。他們的文案列了五點：①建立成長型管理思維和觀念，②學會高素質人才管理、教育和支持，③檢視團隊內溝通與衝突化解方法，④評估團隊績效的適用考核標準，⑤樹立超強團隊文化和核心信念。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>2018 個人回顧</title>
      <link>//william-yeh.net/post/2018/12/2018-retrospective/</link>
      <pubDate>Thu, 20 Dec 2018 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/12/2018-retrospective/</guid>
      
        <description>&lt;p&gt;到了年終，又開始要做個總回顧，再對來年許願。&lt;/p&gt;

&lt;p&gt;如果說 &lt;a href=&#34;https://school.soft-arch.net/blog/6676/2016-retrospective&#34;&gt;2016&lt;/a&gt; 和 &lt;a href=&#34;https://school.soft-arch.net/blog/13083/2017-retrospective&#34;&gt;2017&lt;/a&gt; 都是華麗冒險年，那麼，2018 對我來說，是收攝靜觀的一年。&lt;/p&gt;

&lt;p&gt;去除一些不便揭露的事情，以下是簡單的回顧。&lt;/p&gt;

&lt;h2 id=&#34;補血課程&#34;&gt;補血課程&lt;/h2&gt;

&lt;p&gt;這一年，由於財務及時間問題，參加的補血課程大幅減少。只能精選再精選。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.projectup.net/activity/view/id/16498&#34;&gt;體驗式課程的遊戲設計與操作實務&lt;/a&gt; (&lt;a href=&#34;https://school.soft-arch.net/blog/16072/board-game-creation&#34;&gt;心得&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://shop.darencademy.com/product/view/id/70&#34;&gt;510 / 專案監管的系統思考及 KPI 設計攻防&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這兩門課，都是後座力十足，不管是觀念上還是實務上。後面都會提到。&lt;/p&gt;

&lt;p&gt;至於專題演講及研討會，參加的場次就多了，不及備載。&lt;/p&gt;

&lt;p&gt;其中悸動最深的，就屬 &lt;a href=&#34;https://en.wikipedia.org/wiki/Maria_Gomori&#34;&gt;Maria Gomori&lt;/a&gt; 的【&lt;a href=&#34;http://www.shiuhli.org.tw/class/class_detail.jsp?cp_id=CP1518514359291&#34;&gt;大師對談：在關係中重生－從糾纏到滋養&lt;/a&gt;】講座了。能親炙高齡 98 的國寶級大師，多麼難得的機緣呀！&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/maria-gomori.jpg&#34; alt=&#34;Maria Gomori, 2018-05-06, Taipei&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/maria-gomori.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Maria Gomori, 2018-05-06, Taipei&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這麼難得的機緣，說什麼，都得買第一排搖滾區的座位。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/listen-to-maria-gomori.jpg&#34; alt=&#34;第一排搖滾區&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/listen-to-maria-gomori.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;第一排搖滾區&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;坐在第一排，近距離觀察許多互動細節，驚喜發現，去年我在三梯次薩提爾培訓課程學到的 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，果然與 Maria Gomori 大師是一脈相承的。一整天的活動，彷彿一場總複習。&lt;/p&gt;

&lt;p&gt;而且是大師親自帶領的總複習。超值！&lt;/p&gt;

&lt;h2 id=&#34;演講及授課&#34;&gt;演講及授課&lt;/h2&gt;

&lt;p&gt;今年，演講次數也大幅減少：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/williamyeh/agile-transition-a-toc-perspective&#34;&gt;從限制理論角度談敏捷導入階段&lt;/a&gt; (@ Agile Summit 2018)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;取而代之的，是授課及工作坊：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;系統思考的四堂課 (@ &lt;a href=&#34;https://school.soft-arch.net/blog/17180/sys-thinking-workshop&#34;&gt;公司內訓&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://school.soft-arch.net/blog/18620/thinking-weight-training&#34;&gt;DevOpsDays Taipei 2018&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SBE 的四堂課 (@ 公司內訓)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;敏捷原理與團隊塑造・二日精修版 (&lt;a href=&#34;https://school.soft-arch.net/blog/16072/board-game-creation&#34;&gt;給學員的話&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;//william-yeh.net/post/2018/12/agile-measurement/&#34;&gt;為了精準估算，你必須付出什麼代價？&lt;/a&gt; (@ Agile Tour Kaohsiung 2018)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自從受過【&lt;a href=&#34;https://www.projectup.net/activity/view/id/16498&#34;&gt;體驗式課程的遊戲設計與操作實務&lt;/a&gt;】的洗禮，又讀過《&lt;a href=&#34;https://www.books.com.tw/products/0010752714&#34;&gt;刻意練習&lt;/a&gt;》及《&lt;a href=&#34;https://www.books.com.tw/products/0010471926&#34;&gt;豐田形學&lt;/a&gt;》，我越來越喜歡工作坊這種「微培訓」形式。明年應該也會繼續這樣子吧。&lt;/p&gt;

&lt;h2 id=&#34;量化之旅&#34;&gt;量化之旅&lt;/h2&gt;

&lt;p&gt;「精進量化技能」被我在 2017 年底列入&lt;a href=&#34;https://school.soft-arch.net/blog/13083/2017-retrospective&#34;&gt;來年許願項目&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;到了今年七月，因緣際會之下，參加了君婷老師這場開腦洞的首發課程。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:20em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/510-kpi-course.jpg&#34; alt=&#34;510 / 專案監管的系統思考及 KPI 設計攻防&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/510-kpi-course.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;510 / 專案監管的系統思考及 KPI 設計攻防&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這是專案管理課程。像「milestone 重於 WBS」的觀念，之前只是隱隱約約感覺到；但在課堂上被專家一語道破，我就更放心了。還有許許多多內容，都讓我可以融入到慣用的敏捷模型中。畢竟，人性是普遍的，箇中蘊含的系統動力也是普遍的。&lt;/p&gt;

&lt;p&gt;後來，我持續探索〈&lt;a href=&#34;//william-yeh.net/post/2018/11/agile-pmo/&#34;&gt;Agile PMO&lt;/a&gt;〉、〈&lt;a href=&#34;//william-yeh.net/post/2018/11/agile-value/&#34;&gt;敏捷的價值與指標&lt;/a&gt;〉、〈&lt;a href=&#34;//william-yeh.net/post/2018/11/devops-value/&#34;&gt;DevOps 的價值與指標&lt;/a&gt;〉、〈&lt;a href=&#34;//william-yeh.net/post/2018/12/process-and-metrics/&#34;&gt;改變／改革：流程與衡量指標&lt;/a&gt;〉等議題，都是發軔自此課程的啟發。&lt;/p&gt;

&lt;p&gt;但這不僅僅是專案管理課程，更是開眼的「數字」教育。之後，再看其他涉及量化管理／公司治理的書，都格外有感：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/510-kpi-course-effect.png&#34; alt=&#34;對數字開始懷疑&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/510-kpi-course-effect.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;對數字開始懷疑&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;的確是打通任督二脈的補血課程！&lt;/p&gt;

&lt;h2 id=&#34;等比級數的推坑力&#34;&gt;等比級數的推坑力&lt;/h2&gt;

&lt;p&gt;要「精進量化技能」，免不了要更認識獲利模式。&lt;/p&gt;

&lt;p&gt;對工程背景的我來說，這是大工程。因此，我選擇用「系統閱讀」的方式去建構這方面的基本知識。&lt;/p&gt;

&lt;p&gt;起點是《&lt;a href=&#34;http://www.books.com.tw/products/0010473958&#34;&gt;10 年後會留在書架上的 100 本書&lt;/a&gt;》&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 。按圖索驥，挑選勝間和代的《&lt;a href=&#34;https://www.books.com.tw/products/0010474528&#34;&gt;創造利潤的方程式&lt;/a&gt;》來讀。這真是扎實建構思維模型的好書。讀完一次花了一整個禮拜，需要沉澱。改天還真想把這本書的精髓畫成 CLD 呢。&lt;/p&gt;

&lt;p&gt;事情還沒結束。&lt;/p&gt;

&lt;p&gt;勝間和代還推坑了另一本奇書《&lt;a href=&#34;https://www.kingstone.com.tw/book/book_page.asp?kmcode=2014940760328&#34;&gt;利潤的故事&lt;/a&gt;》 (&lt;a href=&#34;https://www.amazon.com/dp/0446692271/&#34;&gt;&lt;em&gt;The Art of Profitability&lt;/em&gt;&lt;/a&gt;)。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/the-art-of-profitability.jpg&#34; alt=&#34;創造利潤的方程式&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/the-art-of-profitability.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;創造利潤的方程式&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;拙作《創造利潤的方程式》的反面可說就是《利潤的故事》這種書。我是在「如果弄成只有一種利潤模型，會如何呢？」的想法之下，寫了那本書的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這就引起我的好奇心了：能夠讓勝間和代專門寫一本書來 &lt;del&gt;打對台&lt;/del&gt; 對比的，想必是不簡單的對手。&lt;/p&gt;

&lt;p&gt;果真如此。&lt;/p&gt;

&lt;p&gt;《利潤的故事》體裁雖然是商業小說，有趣，但不是本容易徹底消化的書。作者還特別提醒：不能讀得太快。得有耐心，照著書中的步調，乖乖寫作業（是的！有作業！）。更可怕的是，這本書居然也是個書坑，幾乎每一份作業，都順道規定一兩本指定讀物——簡直是等比級數的推坑力。&lt;/p&gt;

&lt;p&gt;既然《利潤的故事》也暗中運用系統閱讀的方法來安排章節及作業順序，既然我也下定決心要系統閱讀這議題，那麼，就乖乖的照著最右邊這本大書坑，按圖索驥吧。&lt;/p&gt;

&lt;p&gt;自己手邊只有老版本的《&lt;a href=&#34;https://www.books.com.tw/products/0010759410&#34;&gt;十倍速時代&lt;/a&gt;》與《&lt;a href=&#34;https://www.books.com.tw/products/0010590883&#34;&gt;愛因斯坦的夢&lt;/a&gt;》，靠著 TAAZE 才補上一些拼圖——但還是不齊。等簡體書及原文書到齊，再合拍一張吧。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/profitability-books.jpg&#34; alt=&#34;《利潤的故事》及推坑的叢書&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/profitability-books.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;《利潤的故事》及推坑的叢書&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;《&lt;a href=&#34;https://www.kingstone.com.tw/book/book_page.asp?kmcode=2014940760328&#34;&gt;利潤的故事&lt;/a&gt;》推坑書單如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.books.com.tw/products/0010264438&#34;&gt;洞悉大師亞當斯&lt;/a&gt; / &lt;a href=&#34;https://www.amazon.com/dp/0990790916&#34;&gt;&lt;em&gt;Obvious Adams&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;燃燒的權力 / &lt;a href=&#34;https://www.amazon.com/dp/1559723351/&#34;&gt;&lt;em&gt;Power to Burn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://sanmin.com.tw/Product/index/004047596&#34;&gt;數盲&lt;/a&gt; / &lt;a href=&#34;https://www.amazon.com/dp/0679726012/&#34;&gt;&lt;em&gt;Innumeracy&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.books.com.tw/products/0010759410&#34;&gt;十倍速時代&lt;/a&gt; / &lt;a href=&#34;https://www.amazon.com/dp/0385483821/&#34;&gt;&lt;em&gt;Only the Paranoid Survive&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.books.com.tw/products/0010450016&#34;&gt;創意的生成&lt;/a&gt; / &lt;a href=&#34;https://www.amazon.com/dp/1434102750/&#34;&gt;&lt;em&gt;A Technique for Producing Ideas&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.books.com.tw/products/0010590883&#34;&gt;愛因斯坦的夢&lt;/a&gt; / &lt;a href=&#34;https://www.amazon.com/dp/140007780X/&#34;&gt;&lt;em&gt;Einstein&amp;rsquo;s Dreams&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;艾西莫夫論太空 / &lt;a href=&#34;https://www.amazon.com/dp/051727924X/&#34;&gt;&lt;em&gt;Asimov On Astronomy&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.books.com.tw/products/0010791866&#34;&gt;富甲天下&lt;/a&gt; (新版) / &lt;a href=&#34;https://www.kingstone.com.tw/book/book_page.asp?kmcode=2024990010069&#34;&gt;天下第一店&lt;/a&gt; (舊版) / &lt;a href=&#34;https://www.amazon.com/dp/0385468474/&#34;&gt;&lt;em&gt;Sam Walton: Made in America: My Story&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.kingstone.com.tw/book/book_page.asp?kmcode=2014940421779&#34;&gt;獲利寶典&lt;/a&gt; / &lt;a href=&#34;https://www.amazon.com/dp/0812933044/&#34;&gt;&lt;em&gt;The Profit Zone&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://sanmin.com.tw/Product/index/005170987&#34;&gt;一個廣告人的自白&lt;/a&gt; / &lt;a href=&#34;https://www.amazon.com/dp/190491537X/&#34;&gt;&lt;em&gt;Confessions of an Advertising Man&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://sanmin.com.tw/Product/index/004045819&#34;&gt;奧格威談廣告&lt;/a&gt; / &lt;a href=&#34;https://www.amazon.com/dp/039472903X/&#34;&gt;&lt;em&gt;Ogilvy on Advertising&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;閱讀初步 / &lt;a href=&#34;https://www.amazon.com/dp/0811218937/&#34;&gt;&lt;em&gt;ABC of Reading&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;孫子兵法&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.books.com.tw/products/0010064462&#34;&gt;Starbucks 咖啡王國傳奇&lt;/a&gt; / &lt;a href=&#34;https://www.amazon.com/dp/0786883561/&#34;&gt;&lt;em&gt;Pour Your Heart Into It&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.books.com.tw/products/0010131327&#34;&gt;永恆的價值&lt;/a&gt; / &lt;a href=&#34;https://www.amazon.com/dp/1681841649/&#34;&gt;&lt;em&gt;Of Permanent Value&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;典範 / &lt;a href=&#34;https://www.amazon.com/dp/0887306470/&#34;&gt;&lt;em&gt;Paradigms&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.books.com.tw/products/0010137157&#34;&gt;利潤模式&lt;/a&gt; / &lt;a href=&#34;https://www.amazon.com/dp/0812931181/&#34;&gt;&lt;em&gt;Profit Patterns&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.kingstone.com.tw/book/book_page.asp?kmcode=2014940657314&#34;&gt;創造新財富&lt;/a&gt; / &lt;a href=&#34;https://www.amazon.com/dp/0875846327/&#34;&gt;&lt;em&gt;Value Migration&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;羅素的制勝法則 / &lt;a href=&#34;https://www.amazon.com/dp/0525945989/&#34;&gt;&lt;em&gt;Russell Rules&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;力量之泉 / &lt;a href=&#34;https://www.amazon.com/dp/0262534290/&#34;&gt;&lt;em&gt;Sources of Power&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.books.com.tw/products/0010137625&#34;&gt;數位革命&lt;/a&gt; / &lt;a href=&#34;https://www.amazon.com/dp/0679762906/&#34;&gt;&lt;em&gt;Being Digital&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.books.com.tw/products/0010190543&#34;&gt;他們的數位化經營策略&lt;/a&gt; / &lt;a href=&#34;https://www.amazon.com/dp/0609607707/&#34;&gt;&lt;em&gt;How Digital Is Your Business?&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;洋洋灑灑，這就是我這兩個月以來沈重的閱讀清單呀。&lt;/p&gt;

&lt;p&gt;雖然沈重，但，浸潤在這種「藝術的學習」境界，也挺過癮的。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:20em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/levels-of-learning.jpg&#34; alt=&#34;學習，有五種層次 -- 《利潤的故事》&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/levels-of-learning.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;學習，有五種層次 -- 《利潤的故事》&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;收攝靜觀&#34;&gt;收攝靜觀&lt;/h2&gt;

&lt;p&gt;十二月，特地安排兩件事，讓自己有收攝靜觀的機會。&lt;/p&gt;

&lt;p&gt;距離上次親自玩 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%A8%82%E9%AB%98%E8%AA%8D%E7%9C%9F%E7%8E%A9&#34;&gt;LSP&lt;/a&gt; 也已經一年半了。正巧好友 Sam 要舉辦一場【&lt;a href=&#34;https://www.accupass.com/event/1811220930071664437086&#34;&gt;策略會議引導・樂高認真玩&lt;/a&gt;】，趕緊報名參加。&lt;/p&gt;

&lt;p&gt;年終，給自己一個沉澱的時間與空間。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:20em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/lsp-artwork.jpg&#34; alt=&#34;我的 LSP 作品之一 (2018-12-12)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/lsp-artwork.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;我的 LSP 作品之一 (2018-12-12)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;本週二，應好友之邀，去現場看看真正的 &amp;ldquo;scrum&amp;rdquo;。&lt;/p&gt;

&lt;p&gt;身為 Scrum Master，沒親眼去現場看橄欖球，像話嗎？呵。年末，總是要熱血一下。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/rugby-game.png&#34; alt=&#34;2018 亞洲 U19 青年橄欖球錦標賽&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/rugby-game.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;2018 亞洲 U19 青年橄欖球錦標賽&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;從這兩場高強度的賽事中，領悟到不少 Scrum，甚至團隊經營的點點滴滴：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;衝刺，再衝刺&lt;/li&gt;
&lt;li&gt;傳球&lt;/li&gt;
&lt;li&gt;佈陣&lt;/li&gt;
&lt;li&gt;局部最佳化&lt;/li&gt;
&lt;li&gt;後勤&lt;/li&gt;
&lt;li&gt;目標&lt;/li&gt;
&lt;li&gt;Ａ咖&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Try&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Swarm&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Baseline&lt;/li&gt;
&lt;li&gt;Pivot&lt;/li&gt;
&lt;li&gt;餘裕&lt;/li&gt;
&lt;li&gt;下一步&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;太多太多聯想與感想。也不禁令我思考起自己的下一步。&lt;/p&gt;

&lt;h2 id=&#34;2019-許願&#34;&gt;2019 許願&lt;/h2&gt;

&lt;p&gt;2019 年，希望自己能做到：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;繼續更深度的 BOSA 探索與實踐。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;繼續精進量化技能。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;正式正視與深化教練技能。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;重讀一次福爾摩斯（這是這兩年遺憾沒能做到的）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;增進商務英語聽說能力。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;開放冒險選項。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;就醬。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;我在 2017 年上了三梯次的薩提爾培訓課程。相關心得請見〈&lt;a href=&#34;https://school.soft-arch.net/blog/8734/satir-workshop&#34;&gt;六日薩提爾體驗&lt;/a&gt;〉及〈&lt;a href=&#34;https://school.soft-arch.net/blog/10660/facilitator-mindset&#34;&gt;引導者，要懂心理&lt;/a&gt;〉這兩篇文章。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;我在〈&lt;a href=&#34;//william-yeh.net/post/2016/08/reading-vs-extensive-reading/&#34;&gt;精讀 vs 泛讀&lt;/a&gt;〉一文中，有提到《&lt;a href=&#34;http://www.books.com.tw/products/0010473958&#34;&gt;10 年後會留在書架上的 100 本書&lt;/a&gt;》這本書。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>為了精準估算，你必須付出什麼代價？</title>
      <link>//william-yeh.net/post/2018/12/agile-measurement/</link>
      <pubDate>Wed, 19 Dec 2018 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/12/agile-measurement/</guid>
      
        <description>&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/dilbert-measurement.jpg&#34; alt=&#34;開場對話&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/dilbert-measurement.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;開場對話&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;研發團隊，常會被問到一個問題：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「請問一下，這個Ａ功能，大概要多久才能完成？」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這個問題，不會因為你跑的是敏捷，就自動免疫。那麼，身為經過敏捷思維洗禮的人，該如何做出合宜的應對？&lt;/p&gt;

&lt;p&gt;我在 &lt;a href=&#34;https://agilekaohsiung.kktix.cc/events/agiletourkaohsiung2018&#34;&gt;Agile Tour Kaohsiung 2018&lt;/a&gt; 開辦一場 2.5 小時的工作坊，帶領大家親自體驗這個議題。&lt;/p&gt;

&lt;p&gt;不過，這個題材的背後，其實還有三段故事。&lt;/p&gt;

&lt;p&gt;故事，要從一年半前講起。&lt;/p&gt;

&lt;h2 id=&#34;第一段故事-結構化流程&#34;&gt;第一段故事：結構化流程&lt;/h2&gt;

&lt;p&gt;一年半前，我曾提過一個心願：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我想用&lt;strong&gt;結構化的 Sprint Planning 流程&lt;/strong&gt;，讓錨定效應、以關係為中心、目的型談判自然發生，讓參與其中的人，逐漸在刻意不遮掩的建設性衝突中，潛移默化。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這個心願，即使我今年已經將自己的招牌課程【敏捷原理與團隊塑造】進化到二日版 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，也都還未能夠實現。要完整實現，恐怕得擴充至二天半，甚至三日版。&lt;/p&gt;

&lt;p&gt;這是一個小缺憾。&lt;/p&gt;

&lt;p&gt;年底正好有個在 &lt;a href=&#34;https://agilekaohsiung.kktix.cc/events/agiletourkaohsiung2018&#34;&gt;Agile Tour Kaohsiung 2018&lt;/a&gt; 舉辦工作坊的機會，我就來小試一下心中設想的「結構化的 Sprint Planning 流程」，以後再看看有沒有機會將這次經驗併入招牌課程。&lt;/p&gt;

&lt;h2 id=&#34;第二段故事-衡量&#34;&gt;第二段故事：衡量&lt;/h2&gt;

&lt;p&gt;設計工作坊，要先定義好最核心的體驗內容。&lt;/p&gt;

&lt;p&gt;Sprint planning，或者 release planning，都有一個共同議題：&lt;strong&gt;衡量&lt;/strong&gt;。正好這陣子我一直在研究這類衡量、指標等相關議題 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，便將工作坊的題目訂為【為了精準估算，你必須付出什麼代價？】。&lt;/p&gt;

&lt;p&gt;核心的體驗內容決定好了，體驗的動線，則以《&lt;a href=&#34;https://www.books.com.tw/products/0010622743&#34;&gt;如何衡量萬事萬物&lt;/a&gt;》這本書做為參考標的。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/how-to-measure-anything.jpg&#34; alt=&#34;如何衡量萬事萬物&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/how-to-measure-anything.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;如何衡量萬事萬物&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;第一次看到這本書名，是在《&lt;a href=&#34;https://www.books.com.tw/products/0010738675&#34;&gt;精實企業&lt;/a&gt;》及《&lt;a href=&#34;https://www.books.com.tw/products/0010580487&#34;&gt;精實執行&lt;/a&gt;》。能同時被這兩本經典引述，想必非泛泛之書。&lt;/p&gt;

&lt;p&gt;當時只覺得可以從中借用到一些衡量妙法，像是&lt;a href=&#34;https://en.wikipedia.org/wiki/Fermi_problem&#34;&gt;費米推論&lt;/a&gt;之類的。萬萬沒想到，這簡直是改變三觀的奇書。恰好又跟我這陣子在系統閱讀的主軸相吻合，讀來可說是點頭如搗蒜。&lt;/p&gt;

&lt;p&gt;看懂這本書，內化並實踐，有助於從根本解決一些盤根錯節的敏捷持久落地的企業面難題。&lt;/p&gt;

&lt;p&gt;初步啃完這本奇書，就花了我好幾天，累積起來共十七個小時。十七小時的心得，在短短的 2.5 小時的工作坊是無法盡數展現出來的，我只能先揀選一個雖粗淺但稱得上是全貌的流程，作為工作坊的體驗主動線。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/aie-flow.png&#34; alt=&#34;AIE 通用衡量方法&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/aie-flow.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;AIE 通用衡量方法&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;第三段故事-pdca&#34;&gt;第三段故事：PDCA&lt;/h2&gt;

&lt;p&gt;核心的體驗內容決定好了，體驗的動線也決定好了，就剩下體驗的劇本了。&lt;/p&gt;

&lt;p&gt;既然要辦的是工作坊，重點自然不是說教，而是體驗，而且是能成為肌肉記憶的體驗。&lt;/p&gt;

&lt;p&gt;這一點比較簡單。自從經過【&lt;a href=&#34;https://www.projectup.net/activity/view/id/16498&#34;&gt;體驗式課程的遊戲設計與操作實務&lt;/a&gt;】的洗禮 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，我的招牌課程【敏捷原理與團隊塑造】調整成「&lt;strong&gt;高速高頻率 PDCA 循環&lt;/strong&gt;」的風格，獲得不錯的迴響，已成為自己的拿手招術。&lt;/p&gt;

&lt;p&gt;因此，我決定這次的工作坊，也比照辦理。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/speech-1215.png&#34; alt=&#34;高速高頻率 PDCA 循環&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/speech-1215.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;高速高頻率 PDCA 循環&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;在敏捷世界裡，不管是 sprint planning 還是 release planning，都很強調全員參與。因此，我的工作坊劇本也設計成要全員參與，以反應真實情況：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在這兩個半小時的體驗活動中，我會用真實案例的改編版本，帶大家體驗 Sprint Planning 及 Backlog Refinement 的核心要素。不管你是 PO、PM、UX、RD、QA，都能從活動中親自體認到，我們到底有沒有必要追求精準的估算？以及，萬一真的有必要，我們又該做什麼樣的準備？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;分組方法有很多，有安全穩當的，也有刺激難以掌控的。當天在 &lt;a href=&#34;https://agilekaohsiung.kktix.cc/events/agiletourkaohsiung2018&#34;&gt;Agile Tour Kaohsiung 2018&lt;/a&gt; 活動現場，看到大家非常專業，便臨時起意，將現場人士分成三大組：Scrum Master 組、PO 組、developer 組。&lt;/p&gt;

&lt;p&gt;非常冒險的決定。但，敏捷，本來就是要冒必要的險嘛！&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/measurement-groups.png&#34; alt=&#34;分組&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/measurement-groups.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;分組&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;整場 2.5 小時的活動，有笑聲，有&lt;del&gt;吵架聲&lt;/del&gt;激辯聲（過程中一度擦出火花），也有嚴肅的制憲大會——像極了真實的職場情境：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/process-meeting.png&#34; alt=&#34;流程會議&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/process-meeting.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;流程會議&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;感謝超強的參與者，尤其是始料未及的 Scrum Master 組，讓我這場首發的工作坊，得到超出我預期的效果／笑果。&lt;/p&gt;

&lt;p&gt;「&lt;strong&gt;高速高頻率 PDCA 循環&lt;/strong&gt;」風格，在這 2.5 小時中，應該算是嚴格貫徹了。&lt;/p&gt;

&lt;h2 id=&#34;未央歌&#34;&gt;未央歌&lt;/h2&gt;

&lt;p&gt;一年半前許下的心願「&lt;strong&gt;結構化的 Sprint Planning 流程&lt;/strong&gt;」，這次 2.5 小時的工作坊，大約實現了六成。&lt;/p&gt;

&lt;p&gt;要完全實現，全程可能要 3 小時。&lt;/p&gt;

&lt;p&gt;在改版成功之前，先貼出這場 2.5 小時 Workshop 可公開的部分。&lt;/p&gt;

&lt;iframe
  style=&#34;width: 100%; height: 500px;&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;
  src=&#34;https://www.slideshare.net/slideshow/embed_code/125954954&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;

&lt;p&gt;下一步呢？請靜待吧。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;我在〈&lt;a href=&#34;https://school.soft-arch.net/blog/10559/sprint-planning-as-negotiation&#34;&gt;以談判角度看 Sprint Planning&lt;/a&gt;〉文章中，談到我對高品質的 Sprint Planning 有著不一樣的願景。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;今年我將自己的招牌課程【敏捷原理與團隊塑造】升級成【二日精修版】，承載更多我想傳達的核心理念。最近剛結束的公開班是 &lt;a href=&#34;https://school.soft-arch.net/blog/16072/board-game-creation&#34;&gt;2018-09-13～09-14&lt;/a&gt; 這一梯次。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;這陣子研究衡量、指標等相關議題，相關心得請見〈&lt;a href=&#34;//william-yeh.net/post/2018/11/agile-value/&#34;&gt;敏捷的價值與指標&lt;/a&gt;〉、〈&lt;a href=&#34;//william-yeh.net/post/2018/11/devops-value/&#34;&gt;DevOps 的價值與指標&lt;/a&gt;〉、〈&lt;a href=&#34;//william-yeh.net/post/2018/12/process-and-metrics/&#34;&gt;改變／改革：流程與衡量指標&lt;/a&gt;〉等文。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;詳見〈&lt;a href=&#34;https://school.soft-arch.net/blog/16072/board-game-creation&#34;&gt;三週生出一款新桌遊，一段奇幻旅程&lt;/a&gt;〉一文。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>改變／改革：流程與衡量指標</title>
      <link>//william-yeh.net/post/2018/12/process-and-metrics/</link>
      <pubDate>Fri, 07 Dec 2018 13:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/12/process-and-metrics/</guid>
      
        <description>

&lt;p&gt;改革，很不容易；摧毀改革，卻很簡單。知名的&lt;a href=&#34;//william-yeh.net/post/2016/06/change-framework/&#34;&gt;改革框架&lt;/a&gt;，莫不注重改革的整合與固化。&lt;/p&gt;

&lt;p&gt;敏捷亦然。&lt;/p&gt;

&lt;p&gt;敏捷三叔公 David Ko 在 Scrum 社群裡&lt;a href=&#34;https://www.facebook.com/groups/179345672472/permalink/10156121996637473/&#34;&gt;轉貼&lt;/a&gt;了一篇&lt;a href=&#34;https://mp.weixin.qq.com/s/p8pDpC80iOMSY28SWSeZyg&#34;&gt;文章&lt;/a&gt;，一則可悲的故事：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/agile-fever.png&#34; alt=&#34;慢慢的，公司内敏捷的热度就退了.....&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/agile-fever.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;慢慢的，公司内敏捷的热度就退了.....&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;时隔一年后，我偶然路过他们的办公区，才发现一切并没有照着 “理所当然” 发展，而是都恢复了原样。&lt;/p&gt;

&lt;p&gt;团队成员坐在各自的工位上埋头工作，他们不再聚集在白板前。项目经理每周一将工作分配好，并定期检查状态。工作区气氛严肃而沉闷，一个似乎是 Leader 的人大声训斥着员工，指责他反复犯同样的错误。&lt;/p&gt;

&lt;p&gt;似乎，敏捷从未来过。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看著這故事，頓時讓我聯想到&lt;a href=&#34;https://en.wikipedia.org/wiki/Eliyahu_M._Goldratt&#34;&gt;高德拉特&lt;/a&gt;的《&lt;a href=&#34;https://www.books.com.tw/products/0010562789&#34;&gt;目標&lt;/a&gt;》。&lt;/p&gt;

&lt;h2 id=&#34;好的商業小說-需要對等的識讀力&#34;&gt;好的商業小說，需要對等的識讀力&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Eliyahu_M._Goldratt&#34;&gt;高德拉特&lt;/a&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010562789&#34;&gt;目標&lt;/a&gt;》一書，最為人所知的，不外乎是&lt;a href=&#34;https://www.projectup.net/article/view/id/3124&#34;&gt;聚焦五步驟&lt;/a&gt;與 &lt;a href=&#34;https://wiki.mbalib.com/zh-tw/%E9%BC%93-%E7%BC%93%E5%86%B2-%E7%BB%B3%E6%B3%95&#34;&gt;DBR 法&lt;/a&gt;，或者再戲謔一點說，是可憐的&lt;a href=&#34;http://designerica.cc/2017/09/5-focusing-steps/&#34;&gt;賀比&lt;/a&gt;老兄。&lt;/p&gt;

&lt;p&gt;從功利主義角度來讀這本書，求仙丹妙藥，固然有所收穫；但是，如果只知道這個角度，可謂買櫝還珠。&lt;/p&gt;

&lt;p&gt;你知道高德拉特這本 1984 年初試啼聲之作，有一位共同作者 &lt;a href=&#34;http://www.jeffcox.com/&#34;&gt;Jeff Cox&lt;/a&gt;，一位專業小說家嗎？&lt;/p&gt;

&lt;p&gt;找正牌小說家當共同作者，可想而知，高德拉特不只想要文以載道，更希望增添真實商業環境的複雜性，以及人性。否則，直接寫成商管書籍就好了，為什麼要拐彎抹角大費周章寫成商業小說呢？ &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010562789&#34;&gt;目標&lt;/a&gt;》所陳述的故事及種種轉折，還有很多值得深入思考的地方 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 。今天我只談其中的一段獨白與一段對話，很少被人提到的橋段。&lt;/p&gt;

&lt;h2 id=&#34;伏筆&#34;&gt;伏筆&lt;/h2&gt;

&lt;p&gt;在書中，主角羅哥 (Alex Rogo) 是優尼公司白靈頓鎮的工廠廠長。他與工廠財務長劉梧 (Lou)、生產經理唐納凡 (Bob Donovan) 等人，努力拯救工廠的經營危機。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/rogo-and-others.png&#34; alt=&#34;羅哥、劉梧、唐納凡 (From: The Goal)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/rogo-and-others.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;羅哥、劉梧、唐納凡 (From: The Goal)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;他們終於立下了顯赫戰功，主角羅哥升官，將要執掌三個工廠的事業部。因此，他們認真反思過去三個月跌跌撞撞的過程，試圖歸納出可複製的成功因素。《目標》第 32～40 章，充滿這類機鋒對話；&lt;a href=&#34;https://www.projectup.net/article/view/id/3124&#34;&gt;聚焦五步驟&lt;/a&gt;就是在這思辨交鋒過程中總結出來的。&lt;/p&gt;

&lt;p&gt;不過，《目標》第 32～40 章，其實還隱藏一個重要的改革訣竅。這個訣竅，埋在兩個伏筆上面，分別是一段獨白與一段對話：&lt;/p&gt;

&lt;p&gt;❶ 在第 40 章，羅哥有一段內心獨白：「唐納凡說得對，劉梧對&lt;strong&gt;衡量指標&lt;/strong&gt;簡直有一種偏執。」這是第一個哏。&lt;/p&gt;

&lt;p&gt;❷ 在第 36 章，羅哥對唐納凡說了一句話：「假如劉梧對&lt;strong&gt;衡量指標&lt;/strong&gt;很執著，那麼你（唐納凡）一定是對&lt;strong&gt;流程&lt;/strong&gt;很執著了。」這是第二個哏。&lt;/p&gt;

&lt;p&gt;你能體會為什麼高德拉特會刻意埋這兩個所謂偏執、執著的伏筆嗎？&lt;/p&gt;

&lt;p&gt;我也是不斷反思改革的成與敗，才漸漸體會到這伏筆的精妙。&lt;/p&gt;

&lt;h2 id=&#34;敏捷-亦然&#34;&gt;敏捷，亦然&lt;/h2&gt;

&lt;p&gt;敏捷轉型，既然是一種改變／改革，也會遵循類似的軌跡。&lt;/p&gt;

&lt;p&gt;像前面那篇&lt;a href=&#34;https://mp.weixin.qq.com/s/p8pDpC80iOMSY28SWSeZyg&#34;&gt;文章&lt;/a&gt;最後提出三點「想讓改變不再是一陣風」的建議：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;改变考核机制，在改变的初期调低原有 KPI 指标，增加对辅助工具（敏捷，精益或其他方法）的使用情况的考核。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在改变过程中，发现对组织有益的流程，要加入到 KPI 中，变为日常考核的一部分。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;给所有好的 “动因” 以正向的反馈，即使结果看起来没那么炫目。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;這三點建議，豈不正好與《目標》第 32～40 章的&lt;strong&gt;流程&lt;/strong&gt;與&lt;strong&gt;衡量指標&lt;/strong&gt;兩大伏筆相互呼應嗎？&lt;/p&gt;

&lt;p&gt;看到這裡，不禁對埋哏的高德拉特肅然起敬。《目標》第 32～40 章，真的值得用思辨的大腦多讀幾遍呀。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;改變／改革要固化，需要內外兼修。其中，流程與衡量指標，是關鍵的外在要素。因此，除了擘劃&lt;a href=&#34;//william-yeh.net/post/2016/06/change-framework/&#34;&gt;改變的框架&lt;/a&gt;，別忘了也要設置適當的衡量指標。&lt;/p&gt;

&lt;p&gt;衡量指標是兩面刃，要謹慎，尤其是均衡感。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; 掌握到均衡感，將能促進改變／改革的固化。&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      系列文章
    
  &lt;/div&gt;
  

&lt;p&gt;❶ &lt;a href=&#34;//william-yeh.net/post/2016/06/change-framework/&#34;&gt;改變的框架&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❷ 改變／改革：流程與衡量指標&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;順便也講一下個人感想：用故事，甚至連載小說來文以載道，不錯；但是，如果你不是文豪，請找位責任編輯，或是找正牌小說家當共同作者。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://willy0936.blogspot.com/&#34;&gt;林俊哲&lt;/a&gt;的〈&lt;a href=&#34;https://willy0936.blogspot.com/2018/06/blog-post_22.html&#34;&gt;《廠長的聖經》 - 目標內容十三問&lt;/a&gt;〉一文，對於《目標》有很精彩的提問與剖析。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;針對衡量指標的均衡感，請參考我的兩篇文章：〈&lt;a href=&#34;//william-yeh.net/post/2018/11/agile-value/&#34;&gt;敏捷的價值與指標&lt;/a&gt;〉與〈&lt;a href=&#34;//william-yeh.net/post/2018/11/devops-value/&#34;&gt;DevOps 的價值與指標&lt;/a&gt;〉。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      
    </item>
    
    <item>
      <title>Scrum 沒有明說的事：休耕期</title>
      <link>//william-yeh.net/post/2018/12/fallow/</link>
      <pubDate>Tue, 04 Dec 2018 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/12/fallow/</guid>
      
        <description>&lt;p&gt;Scrum 的官方白皮書 &lt;a href=&#34;https://www.scrumguides.org/&#34;&gt;&lt;em&gt;The Scrum Guide&lt;/em&gt;&lt;/a&gt; 非常輕薄短小（像 &lt;a href=&#34;https://scrumguides.org/docs/scrumguide/v2017/2017-Scrum-Guide-US.pdf&#34;&gt;Nov 2017 版&lt;/a&gt;只有 19 頁），它的理念是：只制定最核心的原則、價值、角色、活動、產出物，其餘的則交給團隊根據經驗主義 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 去調適出最適合自己的細節。&lt;/p&gt;

&lt;p&gt;想當然爾，有很多事，Scrum 並沒有明說。&lt;/p&gt;

&lt;p&gt;那麼，沒有明說的事，就不需要做、就不能做了嗎？做了，就違反 Scrum 嗎？&lt;/p&gt;

&lt;p&gt;這是許多奉 &lt;a href=&#34;https://www.scrumguides.org/&#34;&gt;&lt;em&gt;The Scrum Guide&lt;/em&gt;&lt;/a&gt; 為圭臬的人，常有的盲點。&lt;/p&gt;

&lt;h2 id=&#34;對-sprint-的誤解&#34;&gt;對 Sprint 的誤解&lt;/h2&gt;

&lt;p&gt;譬如說，有人對 sprint 這種百米賽跑的壓力提出&lt;a href=&#34;https://www.facebook.com/groups/179345672472/permalink/10156062491697473/&#34;&gt;疑問&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Run scrum 一陣子了，有感覺到一些跟傳統軟體開發專案不一樣的壓力。以前這種方式對 team member 來說，會有淡季跟旺季的差別，所以大家比較好安排自己的休假，或者在淡季的時候安排一些 researching、training 的工作。&lt;/p&gt;

&lt;p&gt;現在 run scrum 覺得每個 sprint 壓力都好大，每個 sprint 都好趕，都剛剛好在最後一刻達到 sprint goal。大家也會因為齊步走的關係，所以都不太好意思請長一點的假。以前一年可能最多面臨四次 milestone review 的壓力，現在是至少每四週都會面臨一次這種壓力，Scrum guide 又說 sprint 開始以後就是一個 sprint 接一個下去，中間不會有間斷，但我們真的好想暫停 0.5 個 sprint 讓大家喘口氣。&lt;/p&gt;

&lt;p&gt;前輩們都怎麼處理休假問題跟這種持續性壓力的問題呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Scrum 真的沒有「暫停」這件事嗎？&lt;/p&gt;

&lt;p&gt;首先，回到 &lt;a href=&#34;https://www.scrumguides.org/&#34;&gt;&lt;em&gt;The Scrum Guide&lt;/em&gt;&lt;/a&gt; 原始文本，看看它是怎麼說的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The Sprint&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sprints have consistent durations throughout a development effort. A new Sprint starts immediately after the conclusion of the previous Sprint.&lt;/p&gt;

&lt;p&gt;Sprint 長度在整個開發過程中都是固定的，前一個
Sprint 結束後，下一個新的 Sprint 立刻接著開始。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果只以形式主義來說，這些 sprints 的確好像是一棒接著一棒，棒棒相傳，不漏接，無止息。&lt;/p&gt;

&lt;p&gt;再進一步思考 sprint 這個載具的原始目的——即所謂 &lt;strong&gt;sprint goal&lt;/strong&gt;，就可發現，goal 的意義，是由我們來賦予的。就連 &lt;em&gt;The Scrum Guide&lt;/em&gt; 都叫你要保持彈性，不要形式主義：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Each Sprint may be considered a project with no more than a one-month horizon. Like projects, Sprints are used to &lt;strong&gt;accomplish something&lt;/strong&gt;. Each Sprint has a &lt;strong&gt;goal&lt;/strong&gt; of what is to be built, a design and &lt;strong&gt;flexible plan&lt;/strong&gt; that will guide building it, the work, and the resultant product increment.&lt;/p&gt;

&lt;p&gt;每個 Sprint 可視為一個不超過一個月的專案，如同其他專案一般，Sprint 是用來完成某些事情的。每個 Sprint 有著要打造些什麼的目標，而由一份設計和有&lt;strong&gt;彈性&lt;/strong&gt;的計畫來引導其打造的過程、工作與最後的產品 Increment。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sprint goal 的意義，是由我們來賦予的。&lt;/p&gt;

&lt;p&gt;你想賦予什麼意義呢？&lt;/p&gt;

&lt;p&gt;市場探索，可不可以是一種 sprint goal 呢？用戶調研，可不可以是一種 sprint goal 呢？五日 &lt;a href=&#34;https://www.gv.com/sprint/&#34;&gt;design sprint&lt;/a&gt;，可不可以是一種 sprint goal 呢？&lt;/p&gt;

&lt;p&gt;甚至有點離經叛道的講：恢復元氣，能不能算是一種 sprint goal 呢？&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/sprint-rest.png&#34; alt=&#34;地力需要恢復，人力也是。&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/sprint-rest.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;地力需要恢復，人力也是。&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;休耕期&#34;&gt;休耕期&lt;/h2&gt;

&lt;p&gt;恢復軟體本身的元氣，有一個更正式的名詞——&lt;strong&gt;休耕期&lt;/strong&gt; (fallow)。&lt;/p&gt;

&lt;p&gt;在《&lt;a href=&#34;https://www.books.com.tw/products/0010511808&#34;&gt;編程的頂尖對話&lt;/a&gt;》中，大神 Douglas Crockford 如此解釋軟體研發領域的&lt;strong&gt;休耕期&lt;/strong&gt;觀點： &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/fallow.jpg&#34; alt=&#34;軟體研發的休耕期&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/fallow.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;軟體研發的休耕期&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;大神 Douglas Crockford 毫不客氣挑明地講：「管理層很難看到這一點⋯⋯管理層很久之後才會發現。」&lt;/p&gt;

&lt;p&gt;如果沒有這種特地保留起來的休耕期，那麼，重構、技術債的議題，幾乎註定會一直被推遲到比馬里亞納海溝還更低的順位。這將嚴重破壞 Scrum 的基石：&lt;a href=&#34;//william-yeh.net/post/2018/10/agile-criteria/#scrum-的判準&#34;&gt;PSPI&lt;/a&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;敏捷陣營也有人呼應這種想法。像 Toronto Agile Conference 2017 有一場演講 “&lt;a href=&#34;https://www.youtube.com/watch?v=iJoLe0fnWKc&amp;amp;feature=youtu.be&amp;amp;t=54m2s&#34;&gt;Technical Debt Is a Systemic Problem, Not A Personal Failing&lt;/a&gt;”，用的是 &amp;ldquo;technical-debt sprints&amp;rdquo; 一詞，還畫出 CLD 呢：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/12/td-sprints.png&#34; alt=&#34;Technical-Debt Stories and Sprints&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/12/td-sprints.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Technical-Debt Stories and Sprints&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;「休耕期」觀念，不是出於傳統的 Scrum 論述，&lt;a href=&#34;https://www.scrumguides.org/&#34;&gt;&lt;em&gt;The Scrum Guide&lt;/em&gt;&lt;/a&gt; 也沒講，你認為它有違反 Scrum 嗎？&lt;/p&gt;

&lt;h2 id=&#34;如何做&#34;&gt;如何做？&lt;/h2&gt;

&lt;p&gt;那麼，該如何踏出第一步呢？或者更敏感地講：誰該去在貓脖子上掛鈴鐺？&lt;/p&gt;

&lt;p&gt;大神 Douglas Crockford 說：「團隊應該知道什麼時候合適，管理層很久之後才會發現。」&lt;/p&gt;

&lt;p&gt;所以，請先自問：你們有規律地跑 retrospective 嗎？在團隊層次，甚至在更大的組織層次？&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      2018-12-21 補充
    
  &lt;/div&gt;
  

&lt;p&gt;我參加 Scrum.org 在台北舉辦的 &lt;a href=&#34;https://www.eventbrite.co.uk/e/scrumon-tickets-51310998578&#34;&gt;#ScrumOn&lt;/a&gt; 活動。經過六十分鐘 &lt;a href=&#34;https://www.scrum.org/professional-scrum-master-i-certification&#34;&gt;PSM I&lt;/a&gt; 洗禮，以及敏捷專家學會 Percy 的推坑，特地去查閱 &lt;a href=&#34;https://www.scrum.org/resources/nexus-guide&#34;&gt;&lt;em&gt;Nexus Guide&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;發現，裡面正好有特地提到技術債議題。特地摘錄於此：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;軟體開發必須在&lt;strong&gt;技術債&lt;/strong&gt;變得讓 Nexus 不可接受前，找出並解析依賴關係。若缺乏透明度，不可能有效指引 Nexus 有效地將風險最小化並將價值最大化。&lt;/p&gt;

&lt;p&gt;Software must be developed so that dependencies are detected and resolved before &lt;strong&gt;technical debt&lt;/strong&gt; becomes unacceptable to the Nexus. A lack of complete transparency will make it impossible to guide a Nexus effectively to minimize risk and maximize value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://www.scrumguides.org/&#34;&gt;&lt;em&gt;The Scrum Guide&lt;/em&gt;&lt;/a&gt; 說：「Scrum 是立基於經驗導向的流程控制理論 (empirical process control theory)，或是經驗主義。經驗主義立論於知識來自於經驗和依照已知的資訊來下判斷。Scrum 使用迭代和逐步 increment 的方式，來最大化可預測性和控制風險。」
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Douglas Crockford 在 CUSEC 2010 Keynote - &lt;a href=&#34;https://blogs.msdn.microsoft.com/cdndevs/2010/02/06/cusec-2010-keynote-douglas-crockford-the-software-crisis/&#34;&gt;The Software Crisis&lt;/a&gt; 這場演講主張：&amp;rsquo;Perhaps we should take advice from Exodus: &amp;ldquo;Plant and harvest crops for six years, but let the land rest and lie fallow during the seventh year.&amp;rdquo; Maybe do six sprints where you add new features, but on the seventh sprint, don’t add new features at all.&amp;rsquo;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;我個人認為，Scrum 的判準，就在於 increment，以及能否在各個迭代過程中，捍衛並精進這個 increment 的整全狀態。詳見〈&lt;a href=&#34;//william-yeh.net/post/2018/10/agile-criteria/&#34;&gt;敏捷的判準&lt;/a&gt;〉一文。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>為什麼 LeSS 這麼迷人，可是總是輸給 SAFe？</title>
      <link>//william-yeh.net/post/2018/11/why-safe-over-less/</link>
      <pubDate>Fri, 30 Nov 2018 15:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/11/why-safe-over-less/</guid>
      
        <description>

&lt;p&gt;在一篇 &lt;a href=&#34;https://medium.com/terryisbloggingonagile/%E9%80%99%E6%98%AF%E5%80%8B%E5%B0%8D%E8%A9%B1%E7%B4%80%E9%8C%84-ebca3a63bbde&#34;&gt;Terry &amp;amp; Ruddy 對話紀錄&lt;/a&gt;中，看到一系列有趣的 &lt;a href=&#34;https://less.works/&#34;&gt;LeSS&lt;/a&gt; vs. &lt;a href=&#34;https://www.scaledagileframework.com/&#34;&gt;SAFe&lt;/a&gt; 討論：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「為什麼 &lt;a href=&#34;https://less.works/&#34;&gt;LeSS&lt;/a&gt; 這麼迷人，可是總是輸給 &lt;a href=&#34;https://www.scaledagileframework.com/&#34;&gt;SAFe&lt;/a&gt;？」&lt;/p&gt;

&lt;p&gt;「SAFe 是敏捷跟辦公室政治作出了完美的妥協（應該吧？），所以大家比較 Buy-in 吧。」&lt;/p&gt;

&lt;p&gt;「可是 LeSS 乾淨啊，所有會 Scrum 的人讀到 LeSS 都會喜歡啊。」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;正好這陣子也在思考這議題，便忍不住狗尾續貂一下。我只從「控制權」角度補充一則觀察。&lt;/p&gt;

&lt;h2 id=&#34;less&#34;&gt;LeSS&lt;/h2&gt;

&lt;p&gt;LeSS 直接就在名字表明它的「乾淨」立場，它就是崇尚 “less is more”、“&lt;a href=&#34;https://less.works/less/principles/more-with-less.html&#34;&gt;more with less&lt;/a&gt;” 哲學的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;LeSS can be viewed as a &lt;em&gt;scaling&lt;/em&gt; framework for product development, but can also be viewed as a &lt;em&gt;descaling&lt;/em&gt; framework for organizations.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;mdash; LeSS / Principles / &lt;a href=&#34;https://less.works/less/principles/more-with-less.html&#34;&gt;More with LeSS&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;崇尚 less 結構，也崇尚 less 控制與監管。LeSS 主張「支持，而非控制」：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The managers’ frame of mind must be &lt;strong&gt;support&lt;/strong&gt;, not &lt;strong&gt;control&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Management support from the person(s) who has the organizational authority to make structural changes in your group&amp;mdash;usually the head of your product group. This support must be&amp;hellip; &lt;strong&gt;supporting&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;True volunteering is a powerful way of engaging peoples’ minds and hearts. It’s underused, probably due to the feeling of &lt;strong&gt;loss of control&lt;/strong&gt; by managers. But for people in teams it feels empowering.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;mdash; LeSS / Adoption / &lt;a href=&#34;https://less.works/less/adoption/three-principles.html&#34;&gt;Three Principles&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這些「支持，而非控制」的傾向，可直接上溯至敏捷思維的源頭——2001 年揭櫫的敏捷根本原則「&lt;strong&gt;自組織團隊&lt;/strong&gt;」：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The best architectures, requirements, and designs
emerge from &lt;strong&gt;self-organizing teams&lt;/strong&gt;.
最佳的架構、需求與設計皆來自於能自我組織的團隊。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;mdash; &lt;a href=&#34;https://agilemanifesto.org/principles.html&#34;&gt;Principles behind the Agile Manifesto&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以前面那則&lt;a href=&#34;(https://medium.com/terryisbloggingonagile/%E9%80%99%E6%98%AF%E5%80%8B%E5%B0%8D%E8%A9%B1%E7%B4%80%E9%8C%84-ebca3a63bbde)&#34;&gt;對話紀錄&lt;/a&gt;評論道「可是 LeSS 乾淨啊」。&lt;/p&gt;

&lt;h2 id=&#34;safe&#34;&gt;SAFe&lt;/h2&gt;

&lt;p&gt;從這角度來看，SAFe 的「自組織團隊」程度就比較偏低了。&lt;/p&gt;

&lt;p&gt;在 SAFe 的 &lt;a href=&#34;https://www.scaledagileframework.com/value-stream-coordination/&#34;&gt;value stream coordination&lt;/a&gt; 體系之下，有結構化的&lt;strong&gt;敏捷發布火車&lt;/strong&gt; (&lt;a href=&#34;https://www.scaledagileframework.com/agile-release-train/&#34;&gt;agile release train&lt;/a&gt;; ART)，有與之搭配的一系列結構化機制；以及⋯⋯專屬角色。&lt;/p&gt;

&lt;p&gt;儘管 SAFe 第九原則是 “&lt;a href=&#34;https://www.scaledagileframework.com/decentralize-decision-making/&#34;&gt;decentralize decision-making&lt;/a&gt;”，但是，從這些專屬機制與角色的配置來看，監管與控制的程度，SAFe 顯然較對傳統組織的胃口：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/safe-product-and-solution-mgmt.png&#34; alt=&#34;Product and Solution Management (from SAFe)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/safe-product-and-solution-mgmt.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Product and Solution Management (from SAFe)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;沒有明言的事&#34;&gt;沒有明言的事&lt;/h2&gt;

&lt;p&gt;沒有明講的，不代表就不會存在。&lt;/p&gt;

&lt;p&gt;Scrum 規模一但擴大，就必定會需要某種程度的&lt;strong&gt;協調&lt;/strong&gt;與&lt;strong&gt;對齊&lt;/strong&gt;。SAFe 和 LeSS 都不否認這些事情的存在，差別在因應的態度、處理的方式。&lt;/p&gt;

&lt;p&gt;SAFe 認為，要主動定義這些&lt;strong&gt;控制&lt;/strong&gt;機制：新角色、新決策小組、新節奏。&lt;/p&gt;

&lt;p&gt;LeSS 認為，more with less，不須大動干戈引進新角色、新決策小組、新節奏。既有的 Scrum 三角色直接沿用，只要原班人馬再組成 &lt;a href=&#34;https://less.works/less/less-huge/area-product-owner.html&#34;&gt;product owner team&lt;/a&gt; 即可（頂多再有個 &lt;a href=&#34;https://less.works/less/structure/organizational-structure.html&#34;&gt;head of product group&lt;/a&gt; 做為組織結構上的管理者）。&lt;/p&gt;

&lt;p&gt;對於「控制權」不同的態度，決定了不同的導入方式。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;SAFe 和 LeSS 孰優孰劣，我沒有資格論斷。至少你可以從「控制權」角度，重新思考本文開頭的提問：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「為什麼 &lt;a href=&#34;https://less.works/&#34;&gt;LeSS&lt;/a&gt; 這麼迷人，可是總是輸給 &lt;a href=&#34;https://www.scaledagileframework.com/&#34;&gt;SAFe&lt;/a&gt;？」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以及，換作是你，會做什麼選擇。&lt;/p&gt;

&lt;p&gt;以及，你的選擇，還需要哪些配套措施（文章開頭引述的&lt;a href=&#34;https://medium.com/terryisbloggingonagile/%E9%80%99%E6%98%AF%E5%80%8B%E5%B0%8D%E8%A9%B1%E7%B4%80%E9%8C%84-ebca3a63bbde&#34;&gt;對話紀錄&lt;/a&gt;中，已經有提示了）。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>「從 Ops 角度看 DevOps」的感想</title>
      <link>//william-yeh.net/post/2018/11/opsdev-talk-18/</link>
      <pubDate>Wed, 28 Nov 2018 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/11/opsdev-talk-18/</guid>
      
        <description>&lt;p&gt;在台灣（或許在其他地方也是），DevOps 的話語權，很大幅度都被 Dev 一方把持。我們很少聽到 Ops 一方的說法。&lt;/p&gt;

&lt;p&gt;成功的改革，需要兼顧各方利益者的需求及痛點。隨著 DevOps 守備範圍日益擴大，這種失衡狀態必須改變。&lt;/p&gt;

&lt;p&gt;今晚參加 &lt;a href=&#34;https://www.facebook.com/DevOpsTaiwan/&#34;&gt;DevOps Taiwan 社群&lt;/a&gt;舉辦的講座：【&lt;a href=&#34;https://devops.kktix.cc/events/meetup17-opsdev&#34;&gt;從 Ops 角度看 DevOps&lt;/a&gt;】，聽聽&lt;a href=&#34;https://www.facebook.com/roberthu.tw&#34;&gt;胡士亮 (Robert Hu)&lt;/a&gt; 從正統 Ops 角度來詮釋 DevOps，甚至 OpsDev，收穫頗大。&lt;/p&gt;

&lt;p&gt;聽知識，聽心得，也聽熱情與願景。&lt;/p&gt;

&lt;p&gt;也更確定自己設想的方向，是符合正統 Ops 下一步思維的：&lt;a href=&#34;https://dzone.com/articles/predictive-analytics-in-devops-applications-and-be&#34;&gt;predictive analysis&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://www.bmc.com/blogs/what-is-aiops/&#34;&gt;AIOps&lt;/a&gt;。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/opsdev-recap.jpg&#34; alt=&#34;OpsDev recap (from Robert Hu)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/opsdev-recap.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;OpsDev recap (from Robert Hu)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;這場講座印象最深的觀念是：同一件事情，在某些時候，由 Dev 下手較好；在某些時候，卻是由 Ops 下手較好。所以，手握 Dev 及 Ops 雙邊武器，就有較大的選擇彈性。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/devops-vs-opsdev.jpg&#34; alt=&#34;DevOps vs. OpsDev (from Robert Hu)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/devops-vs-opsdev.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;DevOps vs. OpsDev (from Robert Hu)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這就讓我想到，以前搞 microservices 時，如果不透過 &lt;a href=&#34;https://netflix.github.io/&#34;&gt;NetflixOSS&lt;/a&gt; 之類的 Dev 黑魔法，就很難做出那些瞠目結舌的機制。而現在，透過 &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; + &lt;a href=&#34;https://istio.io/&#34;&gt;Istio&lt;/a&gt; 之類的 nonintrusive Ops 黑魔法（或者更精準地說：&lt;a href=&#34;http://www.servicemesher.com/awesome-servicemesh/&#34;&gt;service mesh&lt;/a&gt;），就不必改變 Dev 的 coding 習慣。&lt;/p&gt;

&lt;p&gt;譬如說：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/bliki/CircuitBreaker.html&#34;&gt;Circuit breaker&lt;/a&gt;：過去要靠 Java &lt;a href=&#34;https://martinfowler.com/bliki/CircuitBreaker.html&#34;&gt;Hystrix&lt;/a&gt;、C# &lt;a href=&#34;https://github.com/App-vNext/Polly&#34;&gt;Polly&lt;/a&gt;、Python &lt;a href=&#34;https://github.com/danielfm/pybreaker&#34;&gt;PyBreaker&lt;/a&gt; 這些程式語言程式庫的層次才能做到，現在，直接交給 &lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/circuit-breaking/&#34;&gt;Istio&lt;/a&gt; 即可。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://microservices.io/patterns/observability/distributed-tracing.html&#34;&gt;Distributed tracing&lt;/a&gt;：過去要靠 Java &lt;a href=&#34;https://github.com/openzipkin/zipkin&#34;&gt;Zipkin&lt;/a&gt;、Java/C#/Python/etc &lt;a href=&#34;https://opentracing.io/&#34;&gt;OpenTracing&lt;/a&gt; 這些程式語言程式庫的層次才能做到，現在，直接交給 &lt;a href=&#34;https://istio.io/docs/tasks/telemetry/distributed-tracing/&#34;&gt;Istio&lt;/a&gt; 即可。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這也意味著，好好掌握新一代的 Ops 技術，會促進內部協作，也會大幅拉大與競爭對手的差距——那些仍活在舊時代的 infra 對手們。&lt;/p&gt;

&lt;p&gt;時代在進步，現在 Ops 已經不是只能拿冷兵器作戰的小步兵了，而是手持核武的將士——自我升級的鑰匙，在你手裡。&lt;/p&gt;

&lt;p&gt;小小的感想。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;再次感謝 &lt;a href=&#34;https://www.facebook.com/roberthu.tw&#34;&gt;Robert Hu&lt;/a&gt; 這麼精彩的分享！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/roberthutw/ops-devops-devops-from-ops-perspective&#34;&gt;從 Ops 角度看 DevOps&lt;/a&gt;&lt;/strong&gt;
&lt;iframe
  style=&#34;width: 100%; height: 500px;&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;
  src=&#34;https://www.slideshare.net/slideshow/embed_code/124278498&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      2018-11-29 補充
    
  &lt;/div&gt;
  

&lt;p&gt;剛剛看完一場 live online training “&lt;a href=&#34;https://www.safaribooksonline.com/live-training/courses/istio-on-kubernetes-enter-the-service-mesh/0636920221357/&#34;&gt;Istio on Kubernetes: Enter the Service Mesh&lt;/a&gt;”，其中有一段話說得好，可作為文章的註腳：&lt;/p&gt;

&lt;p&gt;“The first generation of microservices was primarily shaped by &lt;a href=&#34;https://netflix.github.io/&#34;&gt;Netflix OSS&lt;/a&gt; and leveraged by numerous &lt;a href=&#34;https://spring.io/projects/spring-cloud&#34;&gt;Spring Cloud&lt;/a&gt; annotations sprinkled all throughout your business logic. The next generation of cloud native apps and microservices will leverage &lt;strong&gt;sidecars&lt;/strong&gt; and a &lt;strong&gt;service mesh&lt;/strong&gt;.”&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>DevOps 的價值與指標</title>
      <link>//william-yeh.net/post/2018/11/devops-value/</link>
      <pubDate>Wed, 28 Nov 2018 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/11/devops-value/</guid>
      
        <description>

&lt;p&gt;看完〈&lt;a href=&#34;//william-yeh.net/post/2018/11/agile-value/&#34;&gt;敏捷的價值與指標&lt;/a&gt;〉之後，很自然的會進一步追問：「那麼，什麼才是 DevOps 圈子所認定的價值，以及對應的指標，尤其是領先指標？」&lt;/p&gt;

&lt;p&gt;這問題其實比較容易回答。畢竟，相較於兄弟領域 agile，控制與監管，原本就是 DevOps 不可分割的一部分。&lt;/p&gt;

&lt;p&gt;再者，DevOps 的價值主張也非常明確具體。根據 SEI 提出的 DevOps 操作型定義：&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps is a set of practices intended to reduce the &lt;strong&gt;time&lt;/strong&gt; between committing a change to a system and the change being placed into normal production, while ensuring high &lt;strong&gt;quality&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因此，時間與品質，就是 DevOps 所認定的價值。&lt;/p&gt;

&lt;p&gt;剩下來的疑問就是：指標？&lt;/p&gt;

&lt;p&gt;來看看兩份經典的說法吧。&lt;/p&gt;

&lt;h2 id=&#34;技術價值流&#34;&gt;技術價值流&lt;/h2&gt;

&lt;p&gt;DevOps 巨著 &lt;a href=&#34;https://www.tenlong.com.tw/products/9787115480170&#34;&gt;&lt;em&gt;The DevOps Handbook&lt;/em&gt;&lt;/a&gt; 第一章，定義技術價值流 (technology value stream) 為：「把業務構想轉化為向客戶交付價值的、由技術驅動的服務所需要的流程。」&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;價值流始於工程師（包括開發、QA、IT 維運和資訊安全人員）向版本控制系統提交了一個變更，止於變更成功地在生產環境中運行，為客戶提供價值，並產生有效的反饋和監控資訊。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由此觀之，DevOps 的指標，必定會緊扣在技術價值流的環節身上。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/devops-value-stream.png&#34; alt=&#34;DevOps value stream (from: Lean Enterprise, p.139)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/devops-value-stream.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;DevOps value stream (from: Lean Enterprise, p.139)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;此書第一章，根據精實原則，提出三項 DevOps 衡量指標：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;前置時間 (lead time)。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;處理時間 (process time)，以及所佔的比例。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;返工指標 (percent complete and accurate)。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;此書第六章，進一步建議要合理設置流程改進的優先級：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;為了積極管理技術債務，要確保至少把 20% 的開發和維運時間投入到重構、自動化工作、架構優化以及非功能需求上。&lt;/p&gt;

&lt;p&gt;如果組織不願意支付這「20% 的税」，那麼技術債務將會最終惡化到靠近所有可用資源的程度。&lt;/p&gt;
&lt;/blockquote&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/invisible-value.png&#34; alt=&#34;將 20% 時間用於創造用戶不可見的正面價值&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/invisible-value.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;將 20% 時間用於創造用戶不可見的正面價值&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;請思考一下，這些算是領先指標，還是落後指標？與「賺錢」之間有強烈的因果關係嗎？&lt;/p&gt;

&lt;h2 id=&#34;高績效組織&#34;&gt;高績效組織&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://itrevolution.com/devops-research/&#34;&gt;DevOps 年度報告&lt;/a&gt;一直是 DevOps 領域的重頭戲。在 2018 年的報告 &lt;a href=&#34;https://cloudplatformonline.com/2018-state-of-devops.html&#34;&gt;&lt;em&gt;Accelerate: State of DevOps 2018&lt;/em&gt;&lt;/a&gt; 中 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，從全球近兩千位專業人士的調查中，歸納出五個關鍵的&lt;strong&gt;軟體交付與維運效能&lt;/strong&gt; (software delivery and operational performance; SDO performance) 層面，以及對應的指標：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;部署頻率 (deployment frequency)&lt;/li&gt;
&lt;li&gt;變更的前置時間 (change lead time)&lt;/li&gt;
&lt;li&gt;服務恢復時間 (MTTR)&lt;/li&gt;
&lt;li&gt;變更失敗率 (change fail rate)&lt;/li&gt;
&lt;li&gt;可用性 (availability)&lt;/li&gt;
&lt;/ol&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/sdo-performance.png&#34; alt=&#34;高績效組織的 SDO 效能指標&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/sdo-performance.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;高績效組織的 SDO 效能指標&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;請思考一下，這些算是領先指標，還是落後指標？與「賺錢」之間有強烈的因果關係嗎？&lt;/p&gt;

&lt;h2 id=&#34;均衡感&#34;&gt;均衡感&lt;/h2&gt;

&lt;p&gt;和&lt;a href=&#34;//william-yeh.net/post/2018/11/agile-value/&#34;&gt;敏捷&lt;/a&gt;一樣，DevOps 也在追求一種巧妙的均衡感。不僅著眼於百米衝刺的短期成效，更著眼於馬拉松的長期績效。&lt;/p&gt;

&lt;p&gt;一言以蔽之：在團隊中，如果看不到這種均衡感，那麼，鐵定不是 DevOps。&lt;/p&gt;

&lt;p&gt;所以，在談要不要 DevOps 之前，務必誠實自問：這種均衡感，是你想追求的嗎？&lt;/p&gt;

&lt;p&gt;若回答「是」，再試著找出這種均衡感的領先指標吧。&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      系列文章
    
  &lt;/div&gt;
  

&lt;p&gt;❶ &lt;a href=&#34;//william-yeh.net/post/2018/11/agile-value/&#34;&gt;敏捷的價值與指標&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❷ DevOps 的價值與指標&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;SEI 提出的 DevOps 操作型定義，可視為一種狹義的 DevOps 定義。詳見〈&lt;a href=&#34;//william-yeh.net/post/2016/01/devops-goals-in-a-nutshell/&#34;&gt;一句話囊括 DevOps 的目標&lt;/a&gt;〉一文。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;返工指標 (percent complete and accuracy)，在 &lt;a href=&#34;https://www.tenlong.com.tw/products/9787115480170&#34;&gt;&lt;em&gt;The DevOps Handbook&lt;/em&gt;&lt;/a&gt; 書中寫成 &lt;code&gt;%C/A&lt;/code&gt; 符號，但在更廣大的 lean 社群中更常用 &lt;code&gt;%C&amp;amp;A&lt;/code&gt; 符號（像 TKMG 維護的 &lt;a href=&#34;https://www.ksmartin.com/lean-terminology/#p&#34;&gt;Lean 術語表&lt;/a&gt;）。個人認為，後者比較妥當。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;這份年度報告，也有簡體中文譯版：〈&lt;a href=&#34;https://mp.weixin.qq.com/s/F5_XZ1G1PrmpNsQKdKwRSQ&#34;&gt;2018 全球 DevOps 现状报告&lt;/a&gt;〉。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      
    </item>
    
    <item>
      <title>敏捷的價值與指標</title>
      <link>//william-yeh.net/post/2018/11/agile-value/</link>
      <pubDate>Tue, 27 Nov 2018 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/11/agile-value/</guid>
      
        <description>&lt;p&gt;同溫層朋友提出一則有趣的&lt;a href=&#34;https://www.facebook.com/groups/179345672472/permalink/10156092663467473/&#34;&gt;提問&lt;/a&gt;：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/agile-value-post.png&#34; alt=&#34;如何衡量敏捷的成效？ by Howie Yu (2018-11-23)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/agile-value-post.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;如何衡量敏捷的成效？ by Howie Yu (2018-11-23)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;從該討論串，以及後續追加的其他&lt;a href=&#34;https://www.facebook.com/groups/179345672472/permalink/10156096944827473/&#34;&gt;討論&lt;/a&gt;看來，「賺錢」算是簡潔扼要又難以反駁的「成效」衡量標準。畢竟，這是商業世界。&lt;/p&gt;

&lt;p&gt;只不過，「賺錢」畢竟已經是落後指標了，有流程改善意識的人，應該要更關注領先指標。&lt;/p&gt;

&lt;p&gt;「錢」是很重要的價值，但「窮得只剩下錢」不該是軟體研發所追求的價值。&lt;/p&gt;

&lt;p&gt;因此，當時我給的簡短&lt;a href=&#34;https://www.facebook.com/groups/179345672472/permalink/10156092663467473/?comment_id=10156092774837473&amp;amp;comment_tracking=%7B%22tn%22%3A%22R6%22%7D&#34;&gt;回答&lt;/a&gt;是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR　對於「價值」是否有增益。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;回頭看看當初導入敏捷的痛點及原因，找出起初認定（或誤認）的價值是什麼。尤其是：這所謂的「價值」，是否可追溯至&lt;a href=&#34;https://agilemanifesto.org/&#34;&gt;敏捷宣言&lt;/a&gt;或 &lt;a href=&#34;http://modernagile.org/&#34;&gt;Modern Agile&lt;/a&gt; 四層面。若追溯不了，或許一開始就投錯藥方了。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;導入敏捷後，是否在敏捷宣言或 Modern Agile 四層面有所進展。進而檢討：這些進展，是否有對應到當初導入敏捷的痛點及原因。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;在導入敏捷之初，或者說，在評估是否要導入敏捷之初，其實應該早就握有一票沈痾清單了。這份沈痾清單，就是大家最在意、最想要增益的「價值」。&lt;/p&gt;

&lt;p&gt;沈痾清單，初期常會以「落後指標」形式來界定；但這還不夠。對於大家最在意的一些落後指標，還需要更進一步，研究出具有強烈因果關係的「領先指標」，才能夠發揮高槓桿的改善。&lt;/p&gt;

&lt;p&gt;什麼才是敏捷圈子所認定的價值，以及對應的指標，尤其是領先指標？&lt;/p&gt;

&lt;p&gt;來看看三本經典的說法吧。&lt;/p&gt;

&lt;h2 id=&#34;敏捷專案儀表板&#34;&gt;敏捷專案儀表板&lt;/h2&gt;

&lt;p&gt;Scrum 發明人 &lt;a href=&#34;https://www.linkedin.com/in/jeffsutherland&#34;&gt;Jeff Sutherland&lt;/a&gt; 及 &lt;a href=&#34;https://kenschwaber.wordpress.com/&#34;&gt;Ken Schwaber&lt;/a&gt; 合著一本小書《&lt;a href=&#34;https://www.books.com.tw/products/0010647604&#34;&gt;告別瀑布，擁抱 Scrum&lt;/a&gt;》，第七章介紹敏捷工作室可採用的評估指標，用來「追蹤和改進專案績效，建置專案和管理報告，追蹤專案歷史，反映目前趨勢，評估工作室的成本和獲利，以此來確定是否需要擴張或縮小工作室」：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/scrum-studio-dashboard.png&#34; alt=&#34;Scrum studio dashboard&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/scrum-studio-dashboard.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Scrum studio dashboard&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;&lt;p&gt;生產效率：利用特定數量的資金，所完成的業務功能的單位個數。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;品質：軟體缺陷個數。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;價值：軟體開發中，投資的每一塊錢，為組織創造價值的效率（用百分比表示）。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;請思考一下，這些算是領先指標，還是落後指標？與「賺錢」之間有強烈的因果關係嗎？&lt;/p&gt;

&lt;h2 id=&#34;衡量敏捷的成功&#34;&gt;衡量敏捷的成功&lt;/h2&gt;

&lt;p&gt;《&lt;a href=&#34;https://www.tenlong.com.tw/products/9787121264528&#34;&gt;洞悉敏捷&lt;/a&gt;》第八章，介紹四個度量維度，作為衡量敏捷效能的框架：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;快速性 (do it fast)：生產力、回應性 (responsiveness)。&lt;/li&gt;
&lt;li&gt;正確性 (do it right)：品質、客戶滿意度。&lt;/li&gt;
&lt;li&gt;及時性 (do it on time)：可預測的交付節奏。&lt;/li&gt;
&lt;li&gt;持續性 (keep doing it)：員工滿意度。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;請思考一下，這些算是領先指標，還是落後指標？與「賺錢」之間有強烈的因果關係嗎？&lt;/p&gt;

&lt;h2 id=&#34;敏捷輪盤&#34;&gt;敏捷輪盤&lt;/h2&gt;

&lt;p&gt;《&lt;a href=&#34;https://www.tenlong.com.tw/products/9789864343263&#34;&gt;The Great ScrumMaster 中文版&lt;/a&gt;》第六章很懇切地提醒：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在開始改變你們的工作方式之前，先搞清楚變革原因會是個好主意，不要只是因為它是個新潮的東西就開始著手去做。&lt;/p&gt;

&lt;p&gt;你們目前的強項有哪些？瓶頸是什麼？你期望的結果是什麼？如果這些期望不夠高、不夠好，那麼或許你還沒準備好面對變革。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本章接著介紹 12 個度量維度，幫助我們判斷現在是否為變革的好時機：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/agile-wheel.jpg&#34; alt=&#34;敏捷輪盤 (Agile Wheel)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/agile-wheel.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;敏捷輪盤 (Agile Wheel)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;書中將這個「敏捷輪盤」視為團隊共識的探詢工具，我則進一步將它視為敏捷效能的指標：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;上市時間。&lt;/li&gt;
&lt;li&gt;客戶滿意度。&lt;/li&gt;
&lt;li&gt;從客戶取得的回饋。&lt;/li&gt;
&lt;li&gt;交付的可預期性。&lt;/li&gt;
&lt;li&gt;團隊健康。&lt;/li&gt;
&lt;li&gt;團隊合作。&lt;/li&gt;
&lt;li&gt;與他人的溝通。&lt;/li&gt;
&lt;li&gt;效率。&lt;/li&gt;
&lt;li&gt;生產力。&lt;/li&gt;
&lt;li&gt;品質。&lt;/li&gt;
&lt;li&gt;持續改善。&lt;/li&gt;
&lt;li&gt;對改革的反應。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;請思考一下，這些算是領先指標，還是落後指標？與「賺錢」之間有強烈的因果關係嗎？&lt;/p&gt;

&lt;h2 id=&#34;價值&#34;&gt;價值&lt;/h2&gt;

&lt;p&gt;看了三本經典條列的 &lt;em&gt;N&lt;/em&gt; 項敏捷的度量指標，可以回頭審視文章開頭的大哉問了。&lt;/p&gt;

&lt;p&gt;敏捷，對於「&lt;strong&gt;價值&lt;/strong&gt;」是否有增益？&lt;/p&gt;

&lt;p&gt;但在試著回答這問題之前，請先試著釐清一個核心議題：&lt;strong&gt;什麼才是敏捷圈子所認定的「價值」？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你嘗試將《&lt;a href=&#34;https://www.books.com.tw/products/0010647604&#34;&gt;告別瀑布，擁抱 Scrum&lt;/a&gt;》、《&lt;a href=&#34;https://www.tenlong.com.tw/products/9787121264528&#34;&gt;洞悉敏捷&lt;/a&gt;》、《&lt;a href=&#34;https://www.tenlong.com.tw/products/9789864343263&#34;&gt;The Great ScrumMaster 中文版&lt;/a&gt;》列的 3 + 4 + 12 項價值指標分類，不難看出，敏捷，不僅著眼於百米衝刺的短期成效，更著眼於馬拉松的長期績效。&lt;/p&gt;

&lt;p&gt;敏捷，是一種巧妙的均衡感。&lt;/p&gt;

&lt;p&gt;這種均衡感，約略可對應到 &lt;a href=&#34;http://modernagile.org/&#34;&gt;Modern Agile&lt;/a&gt; 四層面：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make People Awesome&lt;/li&gt;
&lt;li&gt;Make Safety a Prerequisite&lt;/li&gt;
&lt;li&gt;Experiment &amp;amp; Learn Rapidly&lt;/li&gt;
&lt;li&gt;Deliver Value Continuously&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;這種均衡感，也像極了《&lt;a href=&#34;https://www.books.com.tw/products/0010780648&#34;&gt;投資前的精準判讀&lt;/a&gt;》提出的&lt;strong&gt;永續事業模型&lt;/strong&gt; (model of a sustainable business)。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;一言以蔽之：在團隊中，如果看不到這種均衡感，那麼，鐵定不是敏捷。&lt;/p&gt;

&lt;p&gt;所以，在談要不要敏捷之前，務必誠實自問：這種均衡感，是你想追求的嗎？&lt;/p&gt;

&lt;p&gt;若回答「是」，再試著找出這種均衡感的領先指標吧。&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      系列文章
    
  &lt;/div&gt;
  

&lt;p&gt;❶ 敏捷的價值與指標&lt;/p&gt;

&lt;p&gt;❷ &lt;a href=&#34;//william-yeh.net/post/2018/11/devops-value/&#34;&gt;DevOps 的價值與指標&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;//william-yeh.net/post/2018/11/peak-at-enterprise-value/&#34;&gt;從小提問看企業價值&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Agile PMO</title>
      <link>//william-yeh.net/post/2018/11/agile-pmo/</link>
      <pubDate>Thu, 15 Nov 2018 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/11/agile-pmo/</guid>
      
        <description>

&lt;p&gt;&amp;ldquo;Project&amp;rdquo; 一詞，儼然成為 agile 及 DevOps 圈子的禁語。&lt;/p&gt;

&lt;p&gt;譬如說，敏捷祖師爺 Martin Fowler 的網站有一篇 &amp;ldquo;&lt;a href=&#34;https://martinfowler.com/articles/products-over-projects.html&#34;&gt;Products Over Projects&lt;/a&gt;&amp;rdquo; 文章，DevOps 巨著 &lt;a href=&#34;https://www.tenlong.com.tw/products/9787115480170&#34;&gt;&lt;em&gt;The DevOps Handbook&lt;/em&gt;&lt;/a&gt; 第 7.7 節的篇名叫做〈投資於服務和產品，而非專案〉。最近甚至還有一本新書，直接取名叫做 &lt;a href=&#34;https://itrevolution.com/book/project-to-product/&#34;&gt;&lt;em&gt;Project to Product&lt;/em&gt;&lt;/a&gt; 叫人棄暗投明呢。&lt;/p&gt;

&lt;p&gt;見微知著。這個圈子，褒 product，貶 project，是政治正確的常模。 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;這個圈子，對於 &amp;ldquo;project&amp;rdquo; 反感，對於素來予人控制與監管印象的 &amp;ldquo;PMO&amp;rdquo; (Project Management Office，專案管理辦公室) &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 就更反感了。&lt;/p&gt;

&lt;p&gt;但 PMO 真的與敏捷水火不容嗎？&lt;/p&gt;

&lt;h2 id=&#34;敏捷陣營的聲音&#34;&gt;敏捷陣營的聲音&lt;/h2&gt;

&lt;p&gt;聽聽看 Scrum 領域三位大神的說法吧。&lt;/p&gt;

&lt;p&gt;頭兩位大神 &lt;a href=&#34;https://www.linkedin.com/in/jeffsutherland&#34;&gt;Jeff Sutherland&lt;/a&gt; 及 &lt;a href=&#34;https://kenschwaber.wordpress.com/&#34;&gt;Ken Schwaber&lt;/a&gt; 是 Scrum 發明人。他們合著一本小書《&lt;a href=&#34;https://www.books.com.tw/products/0010647604&#34;&gt;告別瀑布，擁抱 Scrum&lt;/a&gt;》，言簡意賅，完全是務實的經驗談。附錄Ｃ〈企業級敏捷攻略〉專門探討敏捷擴展的議題，難得看到兩位老爹發表與其他基本教義派不同的接地氣觀點。其中對於 &amp;ldquo;project&amp;rdquo; 的看法是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scrum 避免使用傳統的「類」瀑布式的專案&lt;strong&gt;計畫&lt;/strong&gt;，但是策略性的日常&lt;strong&gt;專案管理&lt;/strong&gt;的本質是堅定不移的。高級成員需要觀察每個團隊各自的 iteration 和發佈計畫，才能全面的評估整個專案所處的狀態。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;他們也進一步闡述遠光燈的觀點：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scrum 是追求「近期可能性的藝術」，而不是詳細預測未來 6 到 12 個 sprints 內應該交付什麼的黑色藝術。但隨著團隊的擴大和增加，為了未來較遙遠的 sprint 做額外嚴謹的分析，將有助於避免日後需要對架構做過多的重構。為了能將系統架構未來可能的演變方向看得更清楚，進行額外的發布計畫也是合適的。因此，sprint 計畫會議中，可以「看看過去的幾個 sprint」，也可以進行一些「萬一」(what-if) 的計畫，如此將能夠協助團隊權衡產品待辦清單，並向發起者傳達一個更合理的願景和產品路線圖。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ken Schwaber 創立的 &lt;a href=&#34;https://www.scrum.org&#34;&gt;Scrum.org&lt;/a&gt; 培訓機構，也刊登過一篇 &amp;ldquo;&lt;a href=&#34;https://www.scrum.org/resources/blog/agile-pmo&#34;&gt;The Agile PMO&lt;/a&gt;&amp;rdquo; 文章，說明他們對於 PMO 並未排斥。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;第三位大神 &lt;a href=&#34;https://www.scrumalliance.org/community/profile/mikecohn&#34;&gt;Mike Cohn&lt;/a&gt;，是 CSM/CSPO/CST 等認證的主辦機構 &lt;a href=&#34;https://www.scrumalliance.org/&#34;&gt;Scrum Alliance&lt;/a&gt; 的共同創辦人，著作等身，都是敏捷領域的經典 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。最近也在他的機構 Mountain Goat Software 開辦很精彩的 &lt;a href=&#34;http://learn.mountaingoatsoftware.com/better-user-stories/&#34;&gt;&lt;em&gt;Better User Stories&lt;/em&gt;&lt;/a&gt; 線上課程，是非常活躍的 Scrum 培訓師。&lt;/p&gt;

&lt;p&gt;在敏捷領域，Mike Cohn 雖然是祖師爺等級的人物，但不是基本教義派。譬如說，雖然 &amp;ldquo;project&amp;rdquo; 一詞儼然成為這圈子的禁語，但他可不這麼認為：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Projects provide a planning horizon that is longer than a sprint&amp;mdash;typically in the range of two to six months. This “definite beginning and end” that is focused on a “unique product, service or result” encourages product owners to select truly important things to work on rather than whatever some customer or salesperson screamed about yesterday.&lt;/p&gt;

&lt;p&gt;I always encourage product owners and their teams to identify a milestone they are working toward that is longer than a single sprint.&lt;/p&gt;

&lt;p&gt;Projects remain a useful construct. They provide a motivation to accomplish something grander than could be done in a single iteration.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;mdash; “&lt;a href=&#34;https://www.mountaingoatsoftware.com/blog/is-it-time-to-stop-thinking-about-projects&#34;&gt;Is It Time to Stop Thinking about Projects?&lt;/a&gt;”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;畢竟 milestone 這種&lt;strong&gt;策略控制點&lt;/strong&gt;的設置與控制，原本就是專案管理知識體系的擅長之處。&lt;/p&gt;

&lt;p&gt;他甚至鼓勵將傳統上 &lt;a href=&#34;https://www.pmi.org/pmbok-guide-standards&#34;&gt;PMBOK&lt;/a&gt; 重視的某些活動，引進敏捷開發的節奏中：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Becoming agile does not mean we need to throw out everything we&amp;rsquo;ve learned over the past 100 or so years of doing project management. Some things&amp;mdash;project kickoff meetings included&amp;mdash;remain valuable.&lt;/p&gt;

&lt;p&gt;Risk management is not formally defined as part of agile frameworks like Scrum. And that’s understandable as a lot of risks do go away (or get exposed) with the short iterations common to agile. But there are still projects that benefit from lightweight but explicit risk management. I suggested starting that during the kickoff meeting.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;mdash; “&lt;a href=&#34;https://www.mountaingoatsoftware.com/blog/advice-on-conducting-agile-project-kickoff-meetings&#34;&gt;Advice on Conducting Agile Project Kickoff Meetings&lt;/a&gt;”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;三位大師的論述，像極了《&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%A5%9E%E9%B5%B0%E4%BF%A0%E4%BE%B6&#34;&gt;神鵰俠侶&lt;/a&gt;》中「不滯於物，草木竹石均可為劍」的境界，大師風範，令人佩服。&lt;/p&gt;

&lt;h2 id=&#34;pmo-陣營的聲音&#34;&gt;PMO 陣營的聲音&lt;/h2&gt;

&lt;p&gt;也來聽聽看 PMO 領域的說法吧。&lt;/p&gt;

&lt;p&gt;PMO 並不是像敏捷基本教義派陣營口中那麼僵化守舊的。像 2013 年《&lt;a href=&#34;https://www.books.com.tw/products/CN11396791&#34;&gt;業務驅動的 PMO 最佳實踐&lt;/a&gt;》一書主張，有&lt;strong&gt;成熟敏銳度&lt;/strong&gt; (maturity acumen) 的 PMO，需要根據專案類型與管理方法兩個維度，將組織層級的專案管理分成四個象限，並以宏觀視野統籌處理：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/org-pm-quadrant.jpg&#34; alt=&#34;組織範圍的專案管理&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/org-pm-quadrant.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;組織範圍的專案管理&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;至於最正宗的專案管理國際組織 &lt;a href=&#34;https://www.pmi.org/&#34;&gt;PMI&lt;/a&gt; 是怎麼想的呢？&lt;/p&gt;

&lt;p&gt;在 &amp;ldquo;&lt;a href=&#34;https://www.pmi.org/learning/library/pmo-agile-transformation-6063&#34;&gt;An agile PMO transformation&lt;/a&gt;&amp;rdquo; 一文中，列舉 &amp;ldquo;agile PMO&amp;rdquo; 的「八要八不要」，並且主張：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For many organizations, using the words “PMO” and “agile” in the same sentence could be considered an oxymoron. It may come as a surprise to expect the PMO to lead the agile transformation, but we think that &lt;em&gt;for organizations to reach the full potential of the approaches outlined in this update, such as managing the enterprise-level portfolio and creating stable teams, the PMO will need to be engaged and lead the way.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If PMOs are ready and willing to transform, they can greatly influence the success of their organization&amp;rsquo;s agile transformation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可見，狀似傳統僵化的 PMO，其實也已經正視敏捷變革。因此，我們不時可看到新名詞 &amp;ldquo;agile PMO&amp;rdquo; 出現，連管顧公司也湊熱鬧湊出一個 &amp;ldquo;Lean-Agile PMO&amp;rdquo; 呢。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&#34;正名&#34;&gt;正名？&lt;/h2&gt;

&lt;p&gt;敏捷陣營常會對 &amp;ldquo;agile PMO&amp;rdquo; 一詞嗤之以鼻，認為只是換湯不換藥。&lt;/p&gt;

&lt;p&gt;因此，Mike Cohn 挑明地說，為了避免困擾，不妨考慮換個名字：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A project management office (PMO) that is engaged in and supportive of transitioning to Scrum can be a tremendous boon.&lt;/p&gt;

&lt;p&gt;Many PMOs choose to rename themselves to better match their revised role. Though there is no one standard name, I have heard these most frequently: &lt;em&gt;Scrum center of excellence&lt;/em&gt;, &lt;em&gt;Scrum competence center&lt;/em&gt;, &lt;em&gt;Scrum office&lt;/em&gt;, and &lt;em&gt;development support&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Many people have become cynical and suspicious of name changes and of well-crafted names. That cynicism will be directed at the PMO if it is renamed but remains otherwise unchanged. So, whatever it&amp;rsquo;s called, the PMO that supported the organization&amp;rsquo;s sequential development process will need to change more than just its name to succeed with Scrum.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;mdash; “&lt;a href=&#34;https://www.mountaingoatsoftware.com/articles/the-roles-of-the-project-management-office-in-scrum&#34;&gt;The Roles of the Project Management Office in Scrum&lt;/a&gt;”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PMI 在 &lt;a href=&#34;https://www.pmi.org/pmbok-guide-standards/practice-guides/agile&#34;&gt;&lt;em&gt;Agile Practice Guide&lt;/em&gt;&lt;/a&gt; 第六章也提及 “&lt;strong&gt;center of excellence&lt;/strong&gt;” 一詞：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some organizations have been transforming their PMOs into agile centers of excellence&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;至於崇尚極簡作風的 LeSS 陣營，則主張廢棄 &amp;ldquo;project&amp;rdquo; 或 &amp;ldquo;office&amp;rdquo; 字眼，改用 &amp;ldquo;Head of Product Group&amp;rdquo; 概念，以及 &amp;ldquo;&lt;a href=&#34;https://less.works/less/management/go-see.html&#34;&gt;Go See&lt;/a&gt;&amp;rdquo; 管理：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No project/program organization or project/program management office (PMO). No support groups such as configuration management, continuous integration support, or “quality and process”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Head of the Product Group&lt;/strong&gt; — Most LeSS organizations still have managers including a “head of product group.” They support the teams by Go See and help them remove obstacles and improve. LeSS organizations don’t have matrix structures and there are no “dotted-line” managers.&lt;/p&gt;

&lt;p&gt;“Head of Product Group” is called differently in different organization, here we mean the hierarchical manager of all the teams.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;mdash; LeSS &lt;a href=&#34;https://less.works/less/structure/organizational-structure.html&#34;&gt;Organizational Structure&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看了這麼多論點，你認為 &amp;ldquo;agile PMO&amp;rdquo; 是噱頭嗎？&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;儘管敏捷圈子普遍褒 product 而貶 project，但有趣的是，&lt;a href=&#34;https://www.scrumguides.org/&#34;&gt;&lt;em&gt;The Scrum Guide&lt;/em&gt;&lt;/a&gt; 對於 sprint 卻有這種類比：“Each Sprint may be considered a &lt;strong&gt;project&lt;/strong&gt; with no more than a one-month horizon 每個 Sprint 可視為一個不超過一個月的&lt;strong&gt;專案&lt;/strong&gt;。”
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;想在五分鐘之內快速了解 PMO 是什麼東西，可讀讀 Joe 寫的這篇文章：&lt;a href=&#34;https://www.projectup.net/article/view/id/9&#34;&gt;What is PMO&lt;/a&gt;。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;Mike Cohn 在敏捷領域的名作：&lt;a href=&#34;https://www.amazon.com/gp/product/0321205685/&#34;&gt;&lt;em&gt;User Stories Applied: For Agile Software Development&lt;/em&gt;&lt;/a&gt; (2004)、&lt;a href=&#34;https://www.amazon.com/dp/0131479415&#34;&gt;&lt;em&gt;Agile Estimating and Planning&lt;/em&gt;&lt;/a&gt; (2005)、&lt;a href=&#34;https://www.amazon.com/gp/product/0321579364/&#34;&gt;&lt;em&gt;Succeeding with Agile: Software Development Using Scrum&lt;/em&gt;&lt;/a&gt; (2009)。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;&lt;a href=&#34;https://www.forbes.com/sites/forbesfinancecouncil/2018/06/13/the-many-benefits-of-an-agile-pmo-what-you-should-know/&#34;&gt;The Many Benefits Of An Agile PMO: What You Should Know&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      
    </item>
    
    <item>
      <title>接班人計畫</title>
      <link>//william-yeh.net/post/2018/11/succession-planning/</link>
      <pubDate>Thu, 08 Nov 2018 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/11/succession-planning/</guid>
      
        <description>&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/the-nigmatic-1068159-unsplash.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/the-nigmatic-1068159-unsplash.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;彼得・杜拉克説：經理人的基本任務，除了平衡長短期的需要外，最重要的就是培養下一代的經理人。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;諾爾・提區説：成功組織會贏，贏在它的領導人不斷栽培組織上下每個層級的其他領導人。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;其實我很早就在默默做這件事了。畢竟以長遠來看，&lt;strong&gt;堅實的中階主管層，決定一個組織能走得多久多遠&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;就像&lt;a href=&#34;https://www.jianshu.com/p/dc2f701c166e&#34;&gt;此文&lt;/a&gt;所說：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;只要组织内部没有足够数量的领导，一个庞大的组织是无法在短时间内发生改变的。国家也好，大企业也罢，要想进行改革，需要的不是一个具备卓越能力的明星领袖，而是具备领导能力的人超过一定的数量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;想要「具備領導能力的人，超過一定的數量」，是需要佈局的。&lt;/p&gt;

&lt;h2 id=&#34;佈局&#34;&gt;佈局&lt;/h2&gt;

&lt;p&gt;我 2017 年初就開始佈局了，先從共同語言開始&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;（2017 年）三月，自掏腰包，拿《&lt;a href=&#34;https://www.books.com.tw/products/0010641668&#34;&gt;三年後，你的工作還在嗎&lt;/a&gt;》及〈&lt;a href=&#34;http://drapplehuang.blogspot.com/2017/03/blog-post_23.html&#34;&gt;沒了名片你還剩下什麼？新書發表演講筆記&lt;/a&gt;〉當部門內的讀書會材料，激發大家的工匠魂及總管魂。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;非正式調查，大家對其中的〈&lt;a href=&#34;https://www.darencademy.com/article/view/id/15058&#34;&gt;職場自由之道：第一天就為離開做好準備&lt;/a&gt;〉觀點最有感——很合乎我的預期。&lt;/p&gt;

&lt;p&gt;共同語言有了，之後再推動一些事情，就名正言順多了。&lt;/p&gt;

&lt;p&gt;最近規模比較大的，是在部門內舉辦第一場 Open Space Technology (OST；開放空間會議) ，提煉大家對於 2019 年的部門願景：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/gogolook-server-ost.png&#34; alt=&#34;部門 OST 活動，一隅 (2018-10-19)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/gogolook-server-ost.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;部門 OST 活動，一隅 (2018-10-19)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;從活動過程及結論中，可看出某些人在心態上已經做好承接更大責任的準備。因此，我可以更積極進行這件事了。&lt;/p&gt;

&lt;p&gt;俗氣一點講，是副手計畫；吊書袋的講法，是接班人計畫 (succession planning)。&lt;/p&gt;

&lt;h2 id=&#34;一對一關懷式指導&#34;&gt;「一對一關懷式指導」&lt;/h2&gt;

&lt;p&gt;我所崇敬的作家 Marcus Buckingham 在 &lt;a href=&#34;https://www.willowcreek.com/events/leadership/2017-Domestic-A/&#34;&gt;2017 領導力研習會 (Global Leadership Summit)&lt;/a&gt; 給的【重塑績效管理】演講中&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，提出很簡單卻很有效的 &amp;ldquo;frequent strengths-based check-ins&amp;rdquo; 建議：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/strength-checkins.jpg&#34; alt=&#34;frequent strengths-based check-ins&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/strength-checkins.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;frequent strengths-based check-ins&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;There is one silver bullet that forms the foundation of a great team: frequent strengths-based check-ins about near-term future work. Every week. One-on-One.&lt;/p&gt;

&lt;p&gt;In the one-on-one, managers should ask just two questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What are your priorities for the week?&lt;/li&gt;
&lt;li&gt;How can I help?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One year is made up of 52 little sprints. Your job is to make sure sprint #37 is as energized and focused as sprint #1.&lt;/p&gt;

&lt;p&gt;This is not feedback. There is all sorts of research that shows we go into “fight-or-flight mode” in the face of feedback. People don’t want feedback; they want attention and coaching.&lt;/p&gt;

&lt;p&gt;Leaders should not manage more people than they can honestly have a one-on-one check-in every week. This is leadership.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我想，這種近身的教練模式，正是接班人計畫所需要的落地作法。&lt;/p&gt;

&lt;h2 id=&#34;材料&#34;&gt;材料&lt;/h2&gt;

&lt;p&gt;華倫・班尼斯在《&lt;a href=&#34;https://www.books.com.tw/products/0010445840&#34;&gt;領導，不需要頭銜&lt;/a&gt;》說道：「領導課程只能教你技巧，無法傳授&lt;strong&gt;個性&lt;/strong&gt;或&lt;strong&gt;眼光&lt;/strong&gt;。」&lt;/p&gt;

&lt;p&gt;這也是接班人培訓困難之處。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:20em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/leadership-self-pace.jpg&#34; alt=&#34;領導者：個性和眼光&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/leadership-self-pace.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;領導者：個性和眼光&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;原本是想直接套用現成的《&lt;a href=&#34;https://www.knack.com.tw/Event/ManagerSkill&#34;&gt;帶人的技術 │ 新手主管的必殺訣竅&lt;/a&gt;》線上課程內容。但稍微研究了一下，這線上課程比較適合自學，不太適合近身的教練模式——除非搭配適當的補充材料。&lt;/p&gt;

&lt;p&gt;因此，我還是回到自己慣用的方式：指定讀物，個案研討，行動，回饋。&lt;/p&gt;

&lt;p&gt;培育對象是中階主管，所以我只選擇簡單易讀的，不那麼高大上的材料。&lt;/p&gt;

&lt;h4 id=&#34;基本職涯觀念&#34;&gt;基本職涯觀念&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010641668&#34;&gt;三年後，你的工作還在嗎&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;工具箱&#34;&gt;工具箱&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010681486&#34;&gt;不懂這些，別想加薪&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;領導&#34;&gt;領導&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010445840&#34;&gt;領導，不需要頭銜&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;指導&#34;&gt;指導&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010699844&#34;&gt;教出好幫手&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;問題解決&#34;&gt;問題解決&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010675840&#34;&gt;破解問題的技術&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;會議&#34;&gt;會議&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;繁體版《&lt;a href=&#34;https://www.taaze.tw/sing.html?pid=11100243769&#34;&gt;誰說我們不能一起做決定&lt;/a&gt;》(2/e)&lt;/li&gt;
&lt;li&gt;簡體版《&lt;a href=&#34;http://www.sanmin.com.tw/product/index/005689892&#34;&gt;結構化研討：參與式決策操作手冊&lt;/a&gt;》(3/e)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;溝通協調&#34;&gt;溝通協調&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;二日課程：【&lt;a href=&#34;https://shop.darencademy.com/product/view/id/28&#34;&gt;A101 職場大人學 - 職場人際關係與優勢策略&lt;/a&gt;】&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;規劃力&#34;&gt;規劃力&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;一日課程：【&lt;a href=&#34;https://shop.darencademy.com/product/view/id/1&#34;&gt;101 / 專案管理一日特訓班&lt;/a&gt;】&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;至於具體的培訓議題順序，則還在研究。或許也不是獨自研究就能成形的，應該要與接班人共同議定吧。&lt;/p&gt;

&lt;p&gt;嗯，就這麼辦。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Photo credit: &lt;a href=&#34;https://unsplash.com/photos/Y4kw_G_xhsQ&#34;&gt;https://unsplash.com/photos/Y4kw_G_xhsQ&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      2018-12-24 後續發展
    
  &lt;/div&gt;
  

&lt;p&gt;我又另外企劃了一對多形式的〈&lt;a href=&#34;//william-yeh.net/post/2018/12/practice-of-managers/&#34;&gt;【主管的修練】讀書會&lt;/a&gt;〉。&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;〈&lt;a href=&#34;https://www.hbrtaiwan.com/article_content_AR0000924.html&#34;&gt;人才培育與傳承的策略思維&lt;/a&gt;〉，哈佛商業評論・中文版，2008 年 10 月號。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://www.managertoday.com.tw/columns/view/55866&#34;&gt;「接班人」培育計畫，該有的正確觀念&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;https://school.soft-arch.net/blog/8494/poogi-by-questions&#34;&gt;以提問角度看 TOC 聚焦五步驟&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;&lt;a href=&#34;http://treymcclain.com/gls-17-buckingham/&#34;&gt;Session notes&lt;/a&gt; of GLS 2017: Session 5 – &lt;em&gt;Reinventing Performance Management&lt;/em&gt; by Marcus Buckingham.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>從小提問看企業價值</title>
      <link>//william-yeh.net/post/2018/11/peak-at-enterprise-value/</link>
      <pubDate>Fri, 02 Nov 2018 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/11/peak-at-enterprise-value/</guid>
      
        <description>&lt;p&gt;如何選人？&lt;/p&gt;

&lt;p&gt;我有一篇舊文〈&lt;a href=&#34;//william-yeh.net/post/2016/07/professional-attitude/&#34;&gt;專業態度的養成&lt;/a&gt;〉是針對中低階領域的提問重點；善用這些切入點，可挖掘出人才潛力股。這也是年度績效面談時，我會提問的重點之一。&lt;/p&gt;

&lt;p&gt;那麼，中高階領域呢？如何選領導者，選團隊，或者更廣泛一點講：如何選公司？&lt;/p&gt;

&lt;p&gt;我有兩個私房切入點，剛好是兩本書教我的。&lt;/p&gt;

&lt;h2 id=&#34;改變的角度&#34;&gt;改變的角度&lt;/h2&gt;

&lt;p&gt;第一本書是《&lt;a href=&#34;https://bookzone.cwgv.com.tw/books/details/BCB313&#34;&gt;關鍵領導九十天&lt;/a&gt;》。這是我每隔幾個月就會重溫的書。&lt;/p&gt;

&lt;p&gt;改變，是中高階人士常會面對，甚至需要主導的議題。此書提出一套「STARS 模式」來分析所處的改善／改變／改革局勢，其中「界定你的學習程序」工具很實用：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;為了使你在學習上的投資獲得最高的報酬，就必須從眼前大量的資訊中，有效地汲取可行的洞見，才能集中力量，營造收集資訊、分析、假設、測試的良性循環。&lt;/p&gt;

&lt;p&gt;你該如何收集初期的引導問題清單？首先，要針對過去、現在、未來提出問題。事情為何會那麼做？那樣做的理由，今天是否仍站得住腳？狀況是否改變，是否未來該有不同的做法？以下針對這三方面，提供了問題範例。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以這套引導問題清單為基礎，再混搭下一本書的模型，可營造出絕佳的說故事時間。圍繞這類事例，正是了解這位領導者，這團隊，或者更廣泛一點講：這間公司的絕佳切入點。&lt;/p&gt;

&lt;h2 id=&#34;永續的角度&#34;&gt;永續的角度&lt;/h2&gt;

&lt;p&gt;第二本書是《&lt;a href=&#34;https://www.books.com.tw/products/0010780648&#34;&gt;投資前的精準判讀&lt;/a&gt;》。畢竟，針對領導者、團隊，甚至公司的價值判定洞見，誰能像價值投資教父華倫・巴菲特那樣經得起考驗呢？&lt;/p&gt;

&lt;p&gt;《投資前的精準判讀》歸納巴菲特的洞見，提出一個很重要的羅盤：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/sustainable-business-model.jpg&#34; alt=&#34;永續事業模型 (model of a sustainable business)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/sustainable-business-model.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;永續事業模型 (model of a sustainable business)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這個&lt;strong&gt;永續事業模型&lt;/strong&gt; (model of a sustainable business)，連指數型基金之父 Jack Bogle 都稱許道：「這張圖像哥白尼一樣，顯示了太陽真正的位置。」&lt;/p&gt;

&lt;p&gt;有時候，連企業掌舵者也未必很清楚知道這一點，遑論各層級的負責人。&lt;/p&gt;

&lt;p&gt;搞懂這個，搞懂這間企業對這事業模型的立場，再談推動改善／改變／改革吧。你所推動的事情，若不和這間企業自己的永續事業模型對齊，你只是努力地在當另一個唐吉訶德。&lt;/p&gt;

&lt;p&gt;更極端的是，如果這間企業根本沒有自己的「永續」想法，那麼，你連唐吉訶德都不必去當了，直接跳船吧。畢竟，孫子兵法說：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;故校之以計，而索其情。曰：主孰有道，將孰有能，天地孰得，法令孰行，兵眾孰強，士卒孰練，賞罰孰明，吾以此知勝負矣。將聽吾計，用之必勝，留之；將不聽吾計，用之必敗，去之。&lt;/p&gt;

&lt;p&gt;夫未戰而廟算勝者，得算多也；未戰而廟算不勝者，得算少也。多算勝，少算不勝，而況無算乎！吾以此觀之，勝負見矣。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;尋找線索&#34;&gt;尋找線索&lt;/h2&gt;

&lt;p&gt;《投資前的精準判讀》的模型及分析角度很有用。&lt;/p&gt;

&lt;p&gt;這本書教我們如何從對話或各種一手資訊中尋找線索：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/culture-clue.jpg&#34; alt=&#34;尋找文化線索&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/culture-clue.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;尋找文化線索&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;也教我們如何從對話或各種一手資訊所體現的溝通風格中，洞悉難以言說的深層事物：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/comm-style.jpg&#34; alt=&#34;溝通風格&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/comm-style.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;溝通風格&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;好書像寶藏，看你怎麼轉化運用。&lt;/p&gt;

&lt;p&gt;譬如說，面談時，不要盡是在瑣碎的事情上面打轉。試著用具體的實例，探出深層的永續事業層面，這才是重點。&lt;/p&gt;

&lt;p&gt;譬如說，專案計畫書、產品路線圖、impact map、product backlog，亦可用這些角度去測出背後的永續事業理念；或者⋯⋯沒有永續可言的理念。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;兩本有趣的私房書，給大家參考。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Lean Startup 的判準</title>
      <link>//william-yeh.net/post/2018/11/lean-startup-criteria/</link>
      <pubDate>Thu, 01 Nov 2018 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/11/lean-startup-criteria/</guid>
      
        <description>

&lt;p&gt;《商業周刊》第 1615 期，有一篇總編輯的話〈&lt;a href=&#34;https://www.businessweekly.com.tw/magazine/Article_mag_page.aspx?id=68134&#34;&gt;拖鞋戰法，先做了再修！&lt;/a&gt;〉：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;網路時代的敏捷開發法，強調「先做了再修改」，中心思想不是「預測」(predict)，而是「順應」(adapt)，讓市場告訴你如何改變。因此「先做出可用、但不完美的產品」後，直接拿到市場測試，根據顧客意見，再回頭修改，反覆這個循環，直到產品上市。&lt;/p&gt;

&lt;p&gt;在快時代下，過去強調「凡事先想透徹」的戰法出現破綻，步伐顯得沉重，而「先做了再改」的敏捷戰法則相對靈活。講到這裡，快低頭看看，你穿的是皮鞋還是拖鞋？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這下子 PO/PdM 可高興了，拿此文所謂「拖鞋戰法」當立論基礎，向團隊臃腫的 Scrum/Kanban DoD 磨刀霍霍。這也在&lt;a href=&#34;https://www.facebook.com/groups/179345672472/&#34;&gt;台灣 Scrum 社群&lt;/a&gt;引發熱烈&lt;a href=&#34;https://www.facebook.com/groups/179345672472/permalink/10156032174387473/&#34;&gt;討論&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;我留的評論是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;其實，這仍然是方法論&lt;strong&gt;判準&lt;/strong&gt;的老問題。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;敏捷有許多流派，不是只有 Scrum 才叫正宗，不是只有 Kanban 才叫適用。&lt;/p&gt;

&lt;p&gt;某些 PO 心中所想的，其實既不是 Scrum 也不是 Kanban，而是 lean startup（精實創業）——儘管他們自己也不知道。&lt;/p&gt;

&lt;p&gt;選錯方法論，選錯判準，自然扞格不入。&lt;/p&gt;

&lt;p&gt;先搞清楚 PO 內心真正要的方法論，搞清楚這方法論背後的世界觀，搞清楚判準，才能進行&lt;del&gt;攻防&lt;/del&gt;對話。&lt;/p&gt;

&lt;h2 id=&#34;lean-startup-的源流&#34;&gt;Lean Startup 的源流&lt;/h2&gt;

&lt;p&gt;Lean startup 路線，比較正式的起源，據 Steve Blank 在哈佛商業評論〈&lt;a href=&#34;https://www.hbrtaiwan.com/article_content_AR0002324.html&#34;&gt;精實創業改變全世界&lt;/a&gt;〉所述：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2004 年，我投資一家由艾瑞克．萊斯 (Eric Ries) 和威爾．哈維 (Will Harvey) 成立的新創公司，並提出一個但書，我堅持他們必須上我的課，我才會投資。&lt;/p&gt;

&lt;p&gt;艾瑞克很快就發現，科技產業傳統採行的「瀑布式開發法」那種線性開發方式，應該改為反覆修正、敏捷回應的開發方式。艾瑞克也看出這套新創業準則，與大家耳熟能詳的、豐田「精實生產」系統之間的共同點，因此，將這套結合顧客開發與敏捷反應的方法稱為「精實創業」。&lt;/p&gt;

&lt;p&gt;這些工具因為一連串的暢銷書，而逐漸廣為人知。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2011 年，Eric Ries 總結自身及他人經驗，出版《&lt;a href=&#34;https://www.books.com.tw/products/0010768288&#34;&gt;精實創業&lt;/a&gt;》一書，替這種路線正式定調。身為教父，他也策展了一系列經典之作：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010580487&#34;&gt;精實執行&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010753559&#34;&gt;快成長時代&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.tenlong.com.tw/products/9787115405319&#34;&gt;精益客戶開發&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/CN11206479&#34;&gt;精益數據分析&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010756527&#34;&gt;精實 UX 設計&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lean startup 理念貌似常識，但若真的要有正確不偏頗的理解，這些輕薄短小的書都是必備讀物，勿等閒視之。&lt;/p&gt;

&lt;h2 id=&#34;lean-startup-的判準&#34;&gt;Lean Startup 的判準&lt;/h2&gt;

&lt;p&gt;Lean startup 在執行時，的確常會與 Scrum 或 Kanban 混搭。像《&lt;a href=&#34;https://www.books.com.tw/products/0010580487&#34;&gt;精實執行&lt;/a&gt;》第二版第 13 章如此建議：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;控制你的功能管線，限制同時間被處理的功能數量，並且僅於你已驗證過所部署之功能具有正面或負面的影響之後（亦即，產生經驗學習），才著手處理新功能。進行這項工作的好方法，就是運用 Kanban。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但在方法論層面，仍然該有所區辨，尤其會涉及到接下來要談的嚴肅話題：判準。&lt;/p&gt;

&lt;p&gt;Lean startup 理念貌似常識，但真正核心的判準，未必都被清楚地認知。&lt;/p&gt;

&lt;p&gt;我個人認為，lean startup 的判準，就是 Ash Maurya 在《&lt;a href=&#34;https://www.books.com.tw/products/0010580487&#34;&gt;精實執行&lt;/a&gt;》書中所勾勒的三大風險、四大階段。如果以 Ash Maurya 發明的精實畫布 (lean canvas) 攤開來看：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/11/lean-startup-risk.jpg&#34; alt=&#34;《精實執行》有系統地消除三大風險&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/11/lean-startup-risk.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;《精實執行》有系統地消除三大風險&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;三大風險、四大階段，彼此的判讀基準如下：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;階段&lt;/th&gt;
&lt;th&gt;產品風險&lt;/th&gt;
&lt;th&gt;顧客風險&lt;/th&gt;
&lt;th&gt;市場風險&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;⓵瞭解問題&lt;/td&gt;
&lt;td&gt;你在解決什麼問題？&lt;/td&gt;
&lt;td&gt;競爭對手是誰？&lt;/td&gt;
&lt;td&gt;誰感到痛苦？&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;⓶定義解決方案&lt;/td&gt;
&lt;td&gt;誰感到痛苦？&lt;/td&gt;
&lt;td&gt;你將如何解決這些問題？&lt;/td&gt;
&lt;td&gt;定價模型為何？&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;⓷定性驗證&lt;/td&gt;
&lt;td&gt;這項產品有什麼令人無法抗拒的地方嗎？&lt;/td&gt;
&lt;td&gt;你有足夠的顧客嗎？&lt;/td&gt;
&lt;td&gt;價格合適嗎？&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;⓸定量驗證&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;至於 lean canvas 的各個空格，該如何制訂質性與量化的指標，就得量身定做了。&lt;/p&gt;

&lt;p&gt;看到這裡，你認為本文開頭所提到的「拖鞋戰法」，是落在 lean startup 哪一個格子呢？&lt;/p&gt;

&lt;h3 id=&#34;合乎現實嗎&#34;&gt;合乎現實嗎？&lt;/h3&gt;

&lt;p&gt;要走 lean startup 路線，就要弄清楚 lean startup 的判準，並致力於判準的實踐品質，這是將方法論落地實施的重要關鍵。&lt;/p&gt;

&lt;p&gt;問題是：這個判準，合乎現實嗎？更進一步的問題是：是怎樣的世界觀，才會催生如此的判準？&lt;/p&gt;

&lt;p&gt;Lean startup 的世界觀就是，我們對萬事萬物的認知，充斥仍待驗證的粗糙假設。能用最少的投入成本，降低最多的不確定性，就是最好的學習。&lt;/p&gt;

&lt;p&gt;認清這個判準，以及這個判準背後代表的方法論及世界觀，有助於你成為高性價比的策略執行家。&lt;/p&gt;

&lt;p&gt;或許更重要的是，你支持這種方法論，卻又得與一知半解者合作，你就應該在這些判準的層次上，盡一切努力守護這些判準的認知與實踐品質，並最大化這些判準的價值能見度。&lt;/p&gt;

&lt;p&gt;在判準的層次動工，比各自表述的爭辯更有力。&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      系列文章
    
  &lt;/div&gt;
  

&lt;p&gt;❶ &lt;a href=&#34;//william-yeh.net/post/2018/10/methodology-and-criteria/&#34;&gt;軟體開發，除了方法論，還有⋯⋯&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❷ &lt;a href=&#34;//william-yeh.net/post/2018/10/agile-criteria/&#34;&gt;敏捷的判準&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❸ Lean Startup 的判準&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>敏捷的判準</title>
      <link>//william-yeh.net/post/2018/10/agile-criteria/</link>
      <pubDate>Wed, 31 Oct 2018 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/10/agile-criteria/</guid>
      
        <description>&lt;p&gt;今年暑假，我第一次去台中的國美館，參觀 &lt;a href=&#34;https://www.ntmofa.gov.tw/information_1078_86836.html&#34;&gt;2018 年全國美術展&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;這年度盛會，分成油畫、水彩、版畫、水墨等十大類。大開眼界之餘，也不禁有個奇想：為什麼要分這麼多類別來競賽？為什麼不選出一個跨十大類別的首獎，就像武林盟主一樣？&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/nBlph7Vp92E&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;很外行吧！畢竟，油畫的美感判準，與版畫的美感判準、攝影的美感判準，本來就有很大不同，不能草率化約在同一把尺來衡量高下境界。&lt;/p&gt;

&lt;p&gt;把照片拍得像油畫，就能夠贏過油畫嗎？&lt;/p&gt;

&lt;p&gt;我們有選擇美術媒材的自由。一旦擇定媒材，就要正視及尊重該媒材的運用手法、該媒材營造的世界觀，以及該媒材表現境界的判準。&lt;/p&gt;

&lt;p&gt;軟體開發，亦然。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;//william-yeh.net/post/2018/10/methodology-and-criteria/&#34;&gt;前一篇文章&lt;/a&gt;初步提到&lt;strong&gt;方法論&lt;/strong&gt;與&lt;strong&gt;判準&lt;/strong&gt;之間的關係，這一篇文章，就來繼續探討幾種常見軟體研發方法的判準。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「多元典範的軟體開發取向」認為：我們可以視問題的性質，採取瀑布或敏捷軟體開發典範。&lt;/p&gt;

&lt;p&gt;然而，採取某種典範，不但要說明自己的&lt;strong&gt;方法論立場&lt;/strong&gt;，而且要採用該一典範的&lt;strong&gt;方法論判準&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;瀑布方法的判準&#34;&gt;瀑布方法的判準&lt;/h2&gt;

&lt;p&gt;敏捷三叔公 David Ko 在〈&lt;a href=&#34;http://kojenchieh.pixnet.net/blog/post/465054452-%E5%8E%9F%E4%BE%86%E7%80%91%E5%B8%83%E8%80%81%E7%A5%96%E6%98%AF%E6%83%B3%E5%81%9A%E6%95%8F%E6%8D%B7%E5%95%8A&#34;&gt;原來瀑布老祖是想做敏捷啊&lt;/a&gt;〉考古文章中指出，瀑布式開發始祖 Winston W. Royce 在 1970 年發表的&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=41801&#34;&gt;會議論文&lt;/a&gt;中，總共提出兩種想法，一種是後來被世人普遍稱為&lt;del&gt;萬惡的&lt;/del&gt; waterfall 的版本，另一種則是帶些更務實風格的修正版。&lt;/p&gt;

&lt;p&gt;兩種想法，背後的核心觀念，其實都是 &lt;a href=&#34;https://www.pmi.org/learning/library/phase-gate-processes-promising-complex-547&#34;&gt;phase gate&lt;/a&gt; 或 &lt;a href=&#34;https://wiki.mbalib.com/zh-tw/%E9%97%A8%E5%BE%84%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F&#34;&gt;stage gate&lt;/a&gt; 的 &amp;ldquo;&lt;strong&gt;gate&lt;/strong&gt;&amp;rdquo; 機制：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/10/royce-1970.png&#34; alt=&#34;Royce 1970 - Managing the development of large software systems: concepts and techniques&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/10/royce-1970.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Royce 1970 - Managing the development of large software systems: concepts and techniques&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;以上圖來說，圓圈圈的部分，就是在各個階段 (phase/stage) 負責把關的守門員：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;PSR: Preliminary Software Review&lt;/li&gt;
&lt;li&gt;CSR: Critical Software Review&lt;/li&gt;
&lt;li&gt;FSAR: Final Software Acceptance Review&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;這就是瀑布方法論的判準。&lt;/p&gt;

&lt;h3 id=&#34;合乎現實嗎&#34;&gt;合乎現實嗎？&lt;/h3&gt;

&lt;p&gt;要走 waterfall 路線，就要弄清楚 waterfall 的判準，並致力於判準的實踐品質，這是將方法論落地實施的重要關鍵。&lt;/p&gt;

&lt;p&gt;問題是：這個判準，合乎現實嗎？更進一步的問題是：是怎樣的世界觀，才會催生如此的判準？&lt;/p&gt;

&lt;p&gt;Waterfall 的世界觀就是，萬事萬物，都有一個自然的、可預測的線性執行順序。在這些自然的線性順序當中，會有一些關鍵的控制點，或者像《&lt;a href=&#34;https://www.kingstone.com.tw/book/book_page.asp?kmcode=2014940760328&#34;&gt;利潤的故事&lt;/a&gt;》所用的「地景的控制點」妙喻：「有些地方，就是比其他地方重要」。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:20em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/10/control-point.jpg&#34; alt=&#34;地景的控制點&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/10/control-point.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;地景的控制點&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這些「地景的控制點」，就是瀑布方法 phase gate 判準之所在。&lt;/p&gt;

&lt;p&gt;不可否認，的確有人在這種方法論、世界觀、判準底下活得很好。認清這個判準，以及這個判準背後代表的方法論及世界觀，有助於你和這類人種互動。&lt;/p&gt;

&lt;p&gt;或許更重要的是，你不同意這種方法論，卻又得與這類人種合作，你就應該在這些判準的層次上，&lt;del&gt;挑戰&lt;/del&gt;關心對方對這些判準的認知與實踐品質。&lt;/p&gt;

&lt;p&gt;在判準的層次動工，比各自表述的爭辯更有力。&lt;/p&gt;

&lt;h2 id=&#34;scrum-的判準&#34;&gt;Scrum 的判準&lt;/h2&gt;

&lt;p&gt;儘管 Scrum 是很精簡的框架，但真正核心的判準，未必都被清楚地認知。&lt;/p&gt;

&lt;p&gt;我個人認為，Scrum 的判準，就在於 &lt;strong&gt;increment&lt;/strong&gt;，或者更具體一點講：&lt;strong&gt;PSPI&lt;/strong&gt; (potentially shippable product increment)。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.scrumguides.org/&#34;&gt;&lt;em&gt;The Scrum Guide&lt;/em&gt;&lt;/a&gt; (2017 版) 說：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scrum 使用迭代和逐步 increment 的方式，來最大化可預測性和控制風險。&lt;/p&gt;

&lt;p&gt;在 Sprint 結束時，increment 是一種可檢視，完成的工作實體，並可支持經驗主義。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;簡言之，Scrum 是以 increment 作為載具、「地景的控制點」，藉以反映出透明性、檢視性、調適性這三大主張，藉以最大化可預測性及控制風險。&lt;/p&gt;

&lt;p&gt;並不是隨隨便便任何一個軟體中間狀態都夠資格稱為 &amp;ldquo;increment&amp;rdquo;，而是有標準的。Scrum 是很精簡的框架，將這標準交由團隊來定義 (DoD; definition of done)，但能否嚴守這個承諾共識，決定了 Scrum 實踐的成敗：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scrum Teams 用迭代和逐步 increment 的方式交付產品，將回饋的機會最大化。用逐步
increment 的方式交付「完成」的產品，可以確保一直提供一個潛在可用的產品版本。&lt;/p&gt;

&lt;p&gt;真正執行的人員和檢視 increment 成果的人員，需要對「完成」之定義，有一個共同的認知。&lt;/p&gt;

&lt;p&gt;在 Sprint 的最後，新的 increment 必須是「完成」的，這意味著它必須是可用的狀態，並符合 Scrum Team 對於「完成」之定義。&lt;/p&gt;

&lt;p&gt;在 Sprint 過程中，對於品質的目標不可以降低。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;簡言之，Scrum 的判準，就在於 increment 的定義，以及能否在各個迭代過程中，捍衛並精進這個 increment 的整全狀態。&lt;/p&gt;

&lt;h3 id=&#34;合乎現實嗎-1&#34;&gt;合乎現實嗎？&lt;/h3&gt;

&lt;p&gt;要走 Scrum 路線，就要弄清楚 Scrum 的判準，並致力於判準的實踐品質，這是將方法論落地實施的重要關鍵。&lt;/p&gt;

&lt;p&gt;問題是：這個判準，合乎現實嗎？更進一步的問題是：是怎樣的世界觀，才會催生如此的判準？&lt;/p&gt;

&lt;p&gt;Scrum 的世界觀就是，萬事萬物，都有一個自然的生物成長順序。或嬰兒，或幼童，或成年，在每一個當下，必然都是整全的生命個體。&lt;/p&gt;

&lt;p&gt;認清這個判準，以及這個判準背後代表的方法論及世界觀，有助於你與其他物種分別為聖。&lt;/p&gt;

&lt;p&gt;或許更重要的是，你支持這種方法論，卻又得與反對者合作，你就應該在這些判準的層次上，盡一切努力守護這些判準的認知與實踐品質，並最大化這些判準的價值能見度。&lt;/p&gt;

&lt;p&gt;在判準的層次動工，比各自表述的爭辯更有力。&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      2019-02-11 補充
    
  &lt;/div&gt;
  

&lt;p&gt;Mike Cohn 在新文章 &lt;a href=&#34;https://www.mountaingoatsoftware.com/blog/why-agile-teams-put-so-much-emphasis-on-being-done-each-iteration&#34;&gt;&lt;em&gt;Why Agile Teams Put So Much Emphasis on Being Done Each Iteration&lt;/em&gt;&lt;/a&gt; 中，對這論點做了更詳細的說明。&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;kanban-的判準&#34;&gt;Kanban 的判準&lt;/h2&gt;

&lt;p&gt;Kanban 是極度精簡的框架，甚至連「框架」都不太能夠稱得上。因此，他的判準很容易辨識，也很容易衡量，那就是 Kanban 的核心規則：拉動系統 (pull)、WIP 限制。&lt;/p&gt;

&lt;p&gt;問題是：這個判準，合乎現實嗎？更進一步的問題是：是怎樣的世界觀，才會催生如此的判準？&lt;/p&gt;

&lt;p&gt;Kanban 的世界觀就是，萬事萬物，都有一個自然的流動順序。我們所該做的，就是讓這流動，以小批量的方式，毫無阻礙地順流而下。&lt;/p&gt;

&lt;p&gt;認清這個判準，以及這個判準背後代表的方法論及世界觀，有助於你掌握這個「入門毒藥」(gateway drug) &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 的殊勝之處，以及⋯⋯潛在的問題。 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;或許更重要的是，你支持這種方法論，卻又得與反對者或不可知論者合作，你就應該在這些判準的層次上，盡一切努力守護這些判準的認知與實踐品質，並最大化這些判準的價值能見度。&lt;/p&gt;

&lt;p&gt;在判準的層次動工，比各自表述的爭辯更有力。&lt;/p&gt;

&lt;h2 id=&#34;善用判準作為施力點&#34;&gt;善用判準作為施力點&lt;/h2&gt;

&lt;p&gt;判準，是將方法論落地實施的重要關鍵，也是方法論歧見的槓桿解。&lt;/p&gt;

&lt;p&gt;畢竟，方法論，甚至背後的世界觀，不是那麼容易就撼動得了。&lt;/p&gt;

&lt;p&gt;試問：你對自己採用的軟體開發方法論，了解它的判準嗎？&lt;/p&gt;

&lt;p&gt;試問：你對其他人採用的不一樣的軟體開發方法論，也了解它的判準嗎？&lt;/p&gt;

&lt;p&gt;理解別人的判準，善用判準作為施力點，在判準的層次動工，比起辯論不同方法論之間的優劣，更有建設性，也更能推動事情的前進。&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      系列文章
    
  &lt;/div&gt;
  

&lt;p&gt;❶ &lt;a href=&#34;//william-yeh.net/post/2018/10/methodology-and-criteria/&#34;&gt;軟體開發，除了方法論，還有⋯⋯&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❷ 敏捷的判準&lt;/p&gt;

&lt;p&gt;❸ &lt;a href=&#34;//william-yeh.net/post/2018/11/lean-startup-criteria/&#34;&gt;Lean Startup 的判準&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://kojenchieh.pixnet.net/blog/post/386166536-%E7%9C%8B%E6%9D%BF%E6%98%AF%E5%85%A5%E9%96%80%E6%AF%92%E8%97%A5-(gateway-drug)&#34;&gt;看板是入門毒藥 (gateway drug)&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;http://teddy-chen-tw.blogspot.com/2017/06/blog-post_21.html&#34;&gt;為什麼看板方法適合控制與能力文化？&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>軟體開發，除了方法論，還有⋯⋯</title>
      <link>//william-yeh.net/post/2018/10/methodology-and-criteria/</link>
      <pubDate>Thu, 25 Oct 2018 12:22:16 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/10/methodology-and-criteria/</guid>
      
        <description>&lt;p&gt;在某些人眼中，「敏捷」是狂熱份子聚集的邪教。&lt;/p&gt;

&lt;p&gt;或許是被困在守舊勢力太久了，敏捷信徒不只有改變世界的熱情，更有捨我其誰的急迫感。不過，在傳播理念或推動改變時，若操之過急，忽略對方所處的情境、歷史及歷程，就很難有建設性對話。在這守舊勢力龐大的世界，自然很容易陣亡。&lt;/p&gt;

&lt;p&gt;但這還只是表象。歧見，單靠對話仍不足以化解，更需要在方法論層次達到理解，方可進退有據。&lt;/p&gt;

&lt;p&gt;尤其在看過《&lt;a href=&#34;https://www.books.com.tw/products/0010791756&#34;&gt;社會科學的理路&lt;/a&gt;》之後，我領悟到一些根源問題及槓桿解。&lt;/p&gt;

&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/10/social-sci.jpg&#34; alt=&#34;圖一　《社會科學的理路》第一版 (2001) 及第四版 (2018)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/10/social-sci.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;圖一　《社會科學的理路》第一版 (2001) 及第四版 (2018)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;方法論形塑世界觀&#34;&gt;方法論形塑世界觀&lt;/h2&gt;

&lt;p&gt;我們都在採用&lt;strong&gt;方法論&lt;/strong&gt;，不管我們自覺或不自覺。&lt;/p&gt;

&lt;p&gt;瀑布模型是一種方法論，敏捷是一種方法論，Scrum 及 Kanban 則是敏捷方法論底下更具體的實踐作法。&lt;/p&gt;

&lt;p&gt;為什麼會決定採取某一種方法論？原因可能很多，本文不予探討。本文想談的是，採取某一種方法論，就會逐漸被該方法論所形塑的&lt;strong&gt;世界觀&lt;/strong&gt;所包圍，以及接下來的連鎖效應——不管我們自覺或不自覺。&lt;/p&gt;

&lt;p&gt;論到方法論及世界觀，我想要引述《&lt;a href=&#34;https://www.books.com.tw/products/0010791756&#34;&gt;社會科學的理路&lt;/a&gt;》的見解。&lt;/p&gt;

&lt;p&gt;本書作者黃光國教授，是台灣社會心理學界的大老。他花了將近十年的工夫寫成本書第一版 (2001 年)，析論二十世紀發展出來的五種科學哲學主要典範之間的關聯。退休後推出的第四版 (2018 年)，將原本具有歷史意義的第一章整個抽換掉，很可惜，所以我仍然留著第一版。&lt;/p&gt;

&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010791756&#34;&gt;社會科學的理路&lt;/a&gt;》，從科學哲學角度指出：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/10/paradigm.jpg&#34; alt=&#34;圖二　方法論與世界觀&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/10/paradigm.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;圖二　方法論與世界觀&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;看起來有點抽象，讓我們從「軟體開發流程」的角度來照樣造句，就會茅塞頓開：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;任何一種&lt;strong&gt;軟體開發流程&lt;/strong&gt;所主張的「&lt;strong&gt;本體論／認識論／方法論&lt;/strong&gt;」，構成了該一開發流程的「&lt;strong&gt;世界觀&lt;/strong&gt;」，它在性質上是一種&lt;strong&gt;形而上學的預設&lt;/strong&gt;，是由軟體開發團隊的&lt;strong&gt;基本信念&lt;/strong&gt;所決定的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一個&lt;strong&gt;軟體開發者&lt;/strong&gt;，對於方法論的回答，必然會受到其「本體論／認識論」立場的&lt;strong&gt;限制&lt;/strong&gt;，而不能隨意選擇。當他決定採用某種方法論的時候，他也必須同時接受其「本體論／認識論」&lt;strong&gt;預設&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，採取瀑布模式的人，採取敏捷模式的人，兩群人的世界觀，以及信念、預設，是非常不一樣的。&lt;/p&gt;

&lt;p&gt;想合作，或是想進一步改變對方，就得先認清這一點：你們的對話，是不同世界觀的對話。&lt;/p&gt;

&lt;h2 id=&#34;方法論之外-還有判準&#34;&gt;方法論之外，還有判準&lt;/h2&gt;

&lt;p&gt;瀑布模型是一種方法論，敏捷是一種方法論。&lt;/p&gt;

&lt;p&gt;不同方法論，有優劣之別嗎？&lt;/p&gt;

&lt;p&gt;或許有吧。但更常見的事實是：不同方法論，各有擅長的場域。&lt;/p&gt;

&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010791756&#34;&gt;社會科學的理路&lt;/a&gt;》第一版的第一章，從科學哲學角度指出：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2018/10/paradigm-criteria.jpg&#34; alt=&#34;圖三　典範的判準&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2018/10/paradigm-criteria.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;圖三　典範的判準&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;文中點出很重要的觀念：「&lt;strong&gt;判準&lt;/strong&gt;」。&lt;/p&gt;

&lt;p&gt;看起來有點抽象，讓我們再從「軟體開發流程」的角度來照樣造句吧！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我是贊同「敏捷運動」的。然而，我卻認為：「敏捷／不敏捷」不能夠作為軟體開發流程好壞的&lt;strong&gt;判準&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;我主張的「多元典範的軟體開發取向」認為：我們可以視問題的性質，採取瀑布或敏捷軟體開發典範。然而，採取某種典範，不但要說明自己的&lt;strong&gt;方法論立場&lt;/strong&gt;，而且要採用該一典範的&lt;strong&gt;方法論判準&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在我看來，軟體開發而沒有判準，是非常不可思議之事。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;判準，是將方法論落地實施的重要關鍵，也是方法論歧見的槓桿解。&lt;/p&gt;

&lt;p&gt;試問：你對自己採用的軟體開發方法論，了解它的判準嗎？&lt;/p&gt;

&lt;p&gt;試問：你對其他人採用的不一樣的軟體開發方法論，也了解它的判準嗎？&lt;/p&gt;

&lt;p&gt;先賣個關子。下一篇文章，再分別針對瀑布與敏捷取向，談談我所認為的方法論判準。&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      系列文章
    
  &lt;/div&gt;
  

&lt;p&gt;❶ 軟體開發，除了方法論，還有⋯⋯&lt;/p&gt;

&lt;p&gt;❷ &lt;a href=&#34;//william-yeh.net/post/2018/10/agile-criteria/&#34;&gt;敏捷的判準&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❸ &lt;a href=&#34;//william-yeh.net/post/2018/11/lean-startup-criteria/&#34;&gt;Lean Startup 的判準&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>平凡人求生之道：別總是直球對決</title>
      <link>//william-yeh.net/post/2016/08/lifetime-keywords/</link>
      <pubDate>Mon, 29 Aug 2016 07:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/08/lifetime-keywords/</guid>
      
        <description>&lt;p&gt;我們的人生，都走了許多冤枉路。回頭來看，總是希望能有系統化的方法，及早認清局勢，預作準備，以求更無懼於永不停歇的變局。&lt;/p&gt;

&lt;p&gt;這是我常常在尋覓的思維方法。&lt;/p&gt;

&lt;p&gt;雖然 Joe 在【&lt;a href=&#34;https://shop.darencademy.com/product/view/id/66&#34;&gt;大人學講座12：別總是直球對決：人生難題的系統思考法&lt;/a&gt;】的文案自謙：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Joe，因為從小就不是功課好的學生、甚至在求學過程自國小開始就深覺不適應。所以很早他就理解，如果只是跟著大部分人走的道路，自己很可能毫無競爭力並終將一事無成。所以成長過程，一直就在思考並探索自己還有甚麼別的選擇？有沒有辦法避開人多的路線，而另闢蹊徑？&lt;/p&gt;

&lt;p&gt;透過 6 段故事、搭配 30 個人生關鍵字，讓你提升策略思考力、讓你更有能力面對後續的每個人生挑戰！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但許多時候，健步如飛、如履平地的天才，不見得容易被平凡人仿效；平凡人所跌的跤，及之後逆轉勝的經驗，反而更具參考價值。&lt;/p&gt;

&lt;p&gt;Joe，就有這麼值得參考的逆轉勝故事。&lt;/p&gt;

&lt;p&gt;當年的「平凡人 Joe」，已經變成「不平凡的 Joe」。箇中心路歷程，及面對種種困境、選擇的取捨標準，是我想好好觀摩體會的。加上身為 J&amp;amp;B 的鐵粉，自然不想錯過這晉升大人的重要思路。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/s012-joe.jpg&#34; alt=&#34;S012 - 別總是直球對決&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/s012-joe.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;S012 - 別總是直球對決&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
整整三個小時的講座，環繞在這 30 個關鍵字：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-0.png&#34; alt=&#34;30 個關鍵字&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-0.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;30 個關鍵字&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
其中，前三個關鍵字，讓天真爛漫的生涯學童，及早面對沒有標準答案的現實世界。正確的認知，才能進一步激發跳出框架的動力：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-1-3.png&#34; alt=&#34;關鍵字 1~3&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-1-3.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;關鍵字 1~3&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
接下來四個關鍵字，讓我重溫之前在【&lt;a href=&#34;//william-yeh.net/post/2016/06/upgrade-adult-thinking-part2/&#34;&gt;A101 職場大人學：職場人際關係與優勢策略&lt;/a&gt;】課堂上受到的洗禮：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-4-7.png&#34; alt=&#34;關鍵字 4~7&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-4-7.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;關鍵字 4~7&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
接下來五個關鍵字，重點濃縮了 Joe &amp;amp; Bryan 在許多文章及課程一再強調的「認清局勢」觀點：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-8-12.png&#34; alt=&#34;關鍵字 8~12&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-8-12.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;關鍵字 8~12&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
接下來三個關鍵字，讓我回想起 Bryan 那仍令人回味不已的【&lt;a href=&#34;https://shop.darencademy.com/product/view/id/57&#34;&gt;大人學講座03 : 尋找天賦與熱情的系統化做法&lt;/a&gt;】（我要回去複習一下 Bryan 講的「礦場主人的矩陣」了）：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-13-15.png&#34; alt=&#34;關鍵字 13~15&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-13-15.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;關鍵字 13~15&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
接下來四個關鍵字，很像《&lt;a href=&#34;http://www.books.com.tw/products/0010641668?loc=P_asb_001&#34;&gt;三年後，你的工作還在嗎？&lt;/a&gt;》的重點濃縮：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-16-19.png&#34; alt=&#34;關鍵字 16~19&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-16-19.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;關鍵字 16~19&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
接下來六個關鍵字，對我來說，是很重的當頭棒喝。多少次我們都陷在競逐的潮流裡，忘卻某些似拙實巧的道理？有些事，欲速則不達呀！&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-20-25.png&#34; alt=&#34;關鍵字 20~25&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-20-25.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;關鍵字 20~25&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;
聽著這五段 Joe 從小到大的故事，提煉出來的 25 個關鍵字，可能會誤以為這只是心靈雞湯（不過，就算是心靈雞湯，也是熬了四十年的原汁原味上等雞湯喔）。不過，更神奇的是，Joe 緊接著用第六段故事，現身說法，證明這 25 個關鍵字，不只是用在個人生涯成長，居然還可以用來搶下一個大型的系統導入案！&lt;/p&gt;

&lt;p&gt;真是太不可思議了！這豈不正像周星馳電影《食神》裡面的摺凳一樣嗎？「好摺凳！摺凳的奧妙之處，它可以藏在民居之中，隨手可得，還可以坐著它來隱藏殺機，就算被警察抓了也告不了你，真不愧為七大武器之首！」&lt;/p&gt;

&lt;p&gt;這摺凳，和我之前看的 Joe &amp;amp; Bryan 部落格文章、專書、大人學及專案管理課程，相互呼應，容易消化。心中更隱隱覺得，這與我這陣子研究取材的「變革」主題，有許多可相互參酌之處。好的心智框架，委實妙用無窮。&lt;/p&gt;

&lt;p&gt;這 25 枚關鍵字，我收下了。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&amp;hellip; &amp;hellip;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;最後五個關鍵字，是整段講座的總結。看似單純，甚至古板蠢笨，但卻是非常踏實的人生哲學，寧靜而致遠。&lt;/p&gt;

&lt;p&gt;尤其是最後一個關鍵字，一秀出來，所有的人都驚呆了：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-26-30.png&#34; alt=&#34;關鍵字 26~30&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/lifetime-keywords-26-30.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;關鍵字 26~30&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;如果直接把這個字端出來，大概百分之兩百的觀眾都會當場大喊：「我又不是來這裡聽心海羅盤的⋯⋯」。不過，花了 180 分鐘，聽了六段故事，蒐集了 30 個「別總是直球對決」的關鍵字，就會覺得這是肺腑之言。沒有置身現場，很難體會這種久違的感動。&lt;/p&gt;

&lt;p&gt;回頭來看，這 30 個關鍵字，的確都是從「心存善念」為出發點，沒有什麼鑽營算計他人的成分，的的確確都是王道、正道。&lt;/p&gt;

&lt;p&gt;我們有多久沒有相信單純的「善」的力量，而競逐於鑽營取巧？&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;收下這 30 枚關鍵字，以後遇到自己或他人的人生難題，我會回想這六段故事裡面的主人翁 Joe，是如何痛苦掙扎、如何認清局勢、如何壯士斷腕、如何砍掉重練、如何潛龍勿用利見大人終日乾乾，相信一定能夠喚起沈睡已久的變化球、慢速球、伸卡球、曲球。&lt;/p&gt;

&lt;p&gt;人生，除了「直球對決」之外，其實還有更好的選擇呀。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>簡報者的小工具</title>
      <link>//william-yeh.net/post/2016/08/presenter-tools/</link>
      <pubDate>Mon, 22 Aug 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/08/presenter-tools/</guid>
      
        <description>

&lt;p&gt;自從去年一月看了 ihower 的〈&lt;a href=&#34;https://ihower.tw/blog/archives/8075&#34;&gt;講個秘訣：技術簡報的好用工具&lt;/a&gt;〉之後，我才想到，身為 Mac 用戶，我好像太疏於好好整頓自己的電腦，讓我在簡報時更順暢。於是，經過一番嘗試，我也建構出自己的工具組合。&lt;/p&gt;

&lt;p&gt;後來，在演講或講課時，總會遇到有人問道：「william，你是用怎麼弄出 xxx 效果的？」每次簡報，屢試不爽；乾脆自己整理一篇文章好了。&lt;/p&gt;

&lt;p&gt;註：此文只列出我最常用的工具，更完整的，請見 ihower 的〈&lt;a href=&#34;https://ihower.tw/blog/archives/8075&#34;&gt;講個秘訣：技術簡報的好用工具&lt;/a&gt;〉。&lt;/p&gt;

&lt;h2 id=&#34;布幕&#34;&gt;布幕&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/desktop-curtain/id414088151?mt=12&#34;&gt;Desktop Curtain&lt;/a&gt;，像舞台的暗紅色簾幕一樣，把雜七雜八的背景遮住，留下乾淨的背景給前景主角發揮。簡報時，我都會用這軟體把不相干的電腦桌面圖示遮起來，讓投影出來的畫面更乾淨，也有助於錄出更具專業感的影片。&lt;/p&gt;

&lt;p&gt;實例：〈&lt;a href=&#34;http://school.soft-arch.net/courses/vm-for-devops/lectures/683503&#34;&gt;第二式：Life cycle - 開機、登入登出、關機 (18:20)&lt;/a&gt;〉這段影片，就用了這款 Desktop Curtain 軟體，讓 live demo 畫面更乾淨。&lt;/p&gt;

&lt;h2 id=&#34;聚光燈&#34;&gt;聚光燈&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://boinx.com/mousepose/overview/&#34;&gt;Mouseposé&lt;/a&gt;，像舞台的聚光燈一樣，把聚光燈打在想凸顯的地方，不重要的地方則弄暗。這軟體也能夠將你按的按鍵放大顯示出來，讓大家方便照著輸入；不過我比較少用到這一招。&lt;/p&gt;

&lt;p&gt;實例：〈&lt;a href=&#34;http://school.soft-arch.net/blog/157917/devops-a-toc-perspective&#34;&gt;從限制理論看 DevOps&lt;/a&gt;〉演講第 47 分鐘開始，就用了這款 Mouseposé 軟體，讓大家容易聚焦在當下的重點區域。&lt;/p&gt;

&lt;h2 id=&#34;放大鏡&#34;&gt;放大鏡&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.zoomitapp.com/&#34;&gt;Zoom It&lt;/a&gt;，其實是我在 Windows 時代就很愛用的軟體。像放大鏡一樣，局部放大重點區域。&lt;/p&gt;

&lt;p&gt;實例：呃，暫時還沒有錄影。因為這一招，我比較常用在時間較長的課堂上，不常用在時間緊湊的演講。改天如果我會直接在演講會場，赤裸裸秀出 GitHub 或 Sublime Text 的程式片段，或許就會順便錄下來做記錄吧。&lt;/p&gt;

&lt;h2 id=&#34;倒數計時器&#34;&gt;倒數計時器&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/tw/app/alinof-timer/id512464723?mt=12&#34;&gt;Alinof Timer&lt;/a&gt;，在進行某些限時活動，或中場休息時，有這個東西，很好用。&lt;/p&gt;

&lt;p&gt;實例：〈&lt;a href=&#34;//william-yeh.net/post/2016/05/devops-a-lean-perspective/&#34;&gt;有了 Agile，為什麼還要有 DevOps？&lt;/a&gt;〉演講第 28 分鐘開始，就用了這款 Alinof Timer，作為倒數計時之用。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;以上僅列出四個我在簡報時最常用的工具，給大家參考。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>精讀 vs 泛讀</title>
      <link>//william-yeh.net/post/2016/08/reading-vs-extensive-reading/</link>
      <pubDate>Tue, 02 Aug 2016 23:30:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/08/reading-vs-extensive-reading/</guid>
      
        <description>&lt;p&gt;每隔一陣子，就有「精讀」與「泛讀」孰優孰劣之辯論。&lt;/p&gt;

&lt;p&gt;其實，就像陳年經典《&lt;a href=&#34;http://www.books.com.tw/products/0010226097&#34;&gt;如何閱讀一本書&lt;/a&gt;》所說，兩種技巧都很需要：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;閱讀的速度並非只有單一的一種，重點在如何讀出&lt;strong&gt;不同的速度感&lt;/strong&gt;，知道在閱讀某種讀物時該用什麼樣的速度。&lt;/p&gt;

&lt;p&gt;更好的秘方是：在閱讀一本書的時候，&lt;strong&gt;慢不該慢到不值得，快不該快到有損於滿足與理解。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;快或慢，端看閱讀的當下，自我定位是在哪一層次：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;基礎閱讀 (elementary reading)&lt;/li&gt;
&lt;li&gt;檢視閱讀 (inspectional reading)、系統化略讀 (skimming systematically)&lt;/li&gt;
&lt;li&gt;分析閱讀 (analytical reading)&lt;/li&gt;
&lt;li&gt;主題閱讀 (syntopical reading)、比較閱讀 (comparative reading)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;此書主張，主動的讀者，至少要掌握到「檢視閱讀」的層次：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;檢視閱讀永遠是充滿&lt;strong&gt;主動&lt;/strong&gt;的，那是需要努力，而非毫不費力的閱讀。&lt;/p&gt;

&lt;p&gt;只要是超越「基礎閱讀」的層次，閱讀的藝術，就是要&lt;strong&gt;以適當的順序，提出適當的問題&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;提出什麼問題呢？至少有四個主要問題：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;整體來說，這本書到底在談些什麼？&lt;/li&gt;
&lt;li&gt;作者細部說了什麼，怎麼說的？&lt;/li&gt;
&lt;li&gt;這本書說得有道理嗎？是全部有道理，還是部分有道理？&lt;/li&gt;
&lt;li&gt;這本書跟你有什麼關係？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;《如何閱讀一本書》這本 1940 年初版、1972 年增訂再版的陳年經典，的確配得「經典」之名。這些論述，不正是後來許許多多讀書方法的書籍反覆闡釋的閱讀角度嗎？&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/on-reading.jpg&#34; alt=&#34;書籍閱讀法的書單&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/on-reading.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;書籍閱讀法的書單&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;泛讀&#34;&gt;泛讀&lt;/h2&gt;

&lt;p&gt;十倍速時代，資訊大爆炸。近年來，泛讀的聲勢高漲，不乏重量級人士站台背書。&lt;/p&gt;

&lt;p&gt;像 Zen大 在〈&lt;a href=&#34;https://zen1976.com/post-1367640680/&#34;&gt;讀書真的重質不重量嗎？&lt;/a&gt;〉提到：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;精讀派的朋友總是愛說，讀書重質不重量，但沒有量的累積，其實質變是發生不了的，因為你用來理解書中知識的基本能力都不具備！&lt;/p&gt;

&lt;p&gt;舉個例子好了，要讀懂海德格或胡賽爾，得先讀多少東西當預備知識？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;他甚至還開了一門「&lt;a href=&#34;https://zen1976.com/post-1360633850/&#34;&gt;超快速讀書法：教你一年輕鬆讀完三百本書&lt;/a&gt;」公開班呢！&lt;/p&gt;

&lt;h3 id=&#34;泛讀流派&#34;&gt;泛讀流派&lt;/h3&gt;

&lt;p&gt;泛讀也有許多流派。&lt;/p&gt;

&lt;p&gt;傳統的速讀派，最核心的技術就是革除默唸、眼腦直映。這是與傳統語文教育大相逕庭（如果稱不上「牴觸」的話）的方法。記得國中的我，被廣告吸引，主動報名楊氏速讀。一個暑假，換得終身受用的技能，很值得。&lt;/p&gt;

&lt;p&gt;體會到實用性，我也一直持續關注新的泛讀流派。我發現，許多泛讀流派都以《&lt;a href=&#34;http://www.books.com.tw/products/0010226097&#34;&gt;如何閱讀一本書&lt;/a&gt;》的「主題閱讀」為目標，但實施過程則改以「檢視閱讀」、「系統化略讀」之類的手法為之。以本田直之《&lt;a href=&#34;http://www.books.com.tw/products/0010378503&#34;&gt;槓桿閱讀術&lt;/a&gt;》為例：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;本書所強調的是「&lt;strong&gt;累積效果&lt;/strong&gt;」。在我常光顧的書店裡，據說一個月重新排列上架的商業類新書超過五百本。當然，也有大量之前出版過的舊書刊。雖然要追上全部的書籍，是不可能的，但是，靠著讀幾本同樣主題的書籍，常常從新書中取得資訊，你就&lt;strong&gt;漸漸&lt;/strong&gt;能掌握各種作者的想法。從這樣的過程中，你將會選出適合自己的讀物，這也是多讀的優點所在。&lt;/p&gt;

&lt;p&gt;你一旦這麼想，縱然對於現在所讀的書的內容還不能融會貫通，但這些內容的&lt;strong&gt;累積&lt;/strong&gt;會變成你的個人資產。接著，可自由運用的時間逐漸增加，最後得到一百倍的回報，並和你的「金融資產」增加連結在一起。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;也有像神田昌典、勝間和代等人大力提倡的，乍看之下頗為詭異的「&lt;a href=&#34;http://www.books.com.tw/products/0010560460&#34;&gt;影像閱讀法&lt;/a&gt;」。因為太詭異了，甚至有點違反直覺，值得獨立挑出來談。&lt;/p&gt;

&lt;h3 id=&#34;影像閱讀法&#34;&gt;影像閱讀法&lt;/h3&gt;

&lt;p&gt;Paul R. Scheele 研發的影像閱讀法 (&lt;a href=&#34;https://www.amazon.com/dp/0925480681/ref=cm_sw_r_tw_dp_x_3HA5yb4M62972&#34;&gt;Photo Reading&lt;/a&gt;)，訴求是：我們可以像照相機一樣，將任何讀物內容快速地攝入腦袋中。&lt;/p&gt;

&lt;p&gt;前提是，請遵照影像閱讀法的五大步驟：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/08/photo-reading.jpg&#34; alt=&#34;影像閱讀法的五大步驟&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/08/photo-reading.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;影像閱讀法的五大步驟&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;即使你不信這一整套方法，也可以只把它當成工具箱，擇優取用。譬如說，我雖然並未練出所謂的「懸頁」、「軟視」、「攝像焦點」狀態，但其他技巧，卻是十分受用。&lt;/p&gt;

&lt;p&gt;就我有限的經驗來說，影像閱讀法的&lt;strong&gt;提問&lt;/strong&gt;及&lt;strong&gt;活化&lt;/strong&gt;方法很管用：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;用影像閱讀看選擇的書。在閱讀之前，一定要明確說出&lt;strong&gt;目的&lt;/strong&gt;。閱讀之後，請進行結束時的&lt;strong&gt;自我肯定&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;優秀的閱讀者總是會抱持著&lt;strong&gt;目的意識&lt;/strong&gt;，&lt;strong&gt;向作者提出問題&lt;/strong&gt;，而且在閱讀時保持高度的&lt;strong&gt;精神集中&lt;/strong&gt;。「精神集中」是積極閱讀者的必要條件。&lt;/p&gt;

&lt;p&gt;要誘導腦部把新的技能反映在行動上。型態療法的治療師把它稱為「&lt;strong&gt;意想遊戲&lt;/strong&gt;」，也就是在心裡面模擬該項行為，而那會成為傳送給腦部的信號，引發所要的行動。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;影像閱讀式的&lt;strong&gt;主題閱讀&lt;/strong&gt;也很有意思：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;阿德勒在《如何閱讀一本書》表示，進行同主題閱讀時使用的思考技巧，是閱讀者的終極目標。因此我們把十倍速影像閱讀法的技巧融入他們的技巧中，讓各式各樣的想法可以在更短的時間內有效整合。&lt;/p&gt;

&lt;p&gt;每次進行同主題閱讀時，都有幾百個或幾千個頭腦，累積幾萬個小時的努力和經驗來幫助你達成目標。當你感覺到這種強大的力量時，就能夠深深體會到同主題閱讀的美妙滋味。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;從這裡可看出，影像閱讀法也是在對《如何閱讀一本書》致敬，儘管細部手法不同。&lt;/p&gt;

&lt;h2 id=&#34;精讀&#34;&gt;精讀&lt;/h2&gt;

&lt;p&gt;其實我最喜歡的是精讀。對我來說，泛讀是不得已的；是找不到值得精讀的對象，或是還沒把自己拉拔到足以精讀的程度，才做的權宜之計。&lt;/p&gt;

&lt;p&gt;找到值得的對象，也自我裝備好了，我往往直接切換成精讀模式。&lt;/p&gt;

&lt;p&gt;就以我的本職學能「軟體開發」為例吧。&lt;em&gt;Ｎ&lt;/em&gt; 年前那本《資訊游俠列傳》的專訪文中就指出：我的電腦書不多，或者說，相對於非電腦書，其實比例不算高。&lt;/p&gt;

&lt;p&gt;怎・麼・可・能？&lt;/p&gt;

&lt;p&gt;答案很簡單，對於電腦專業，我是精讀取向。&lt;/p&gt;

&lt;p&gt;從高中時代愛不釋手的 &lt;a href=&#34;https://en.wikipedia.org/wiki/The_C_Programming_Language&#34;&gt;K&amp;amp;R 第二版&lt;/a&gt;，到研究所時代翻譯的 C++ FAQ、&lt;a href=&#34;http://www.books.com.tw/products/0010181914&#34;&gt;&lt;em&gt;The C++ Programming Language&lt;/em&gt;&lt;/a&gt;、&lt;a href=&#34;http://www.tenlong.com.tw/items/9572054112?item_id=997944&#34;&gt;GoF&lt;/a&gt;，莫不是硬上加硬的原典磚頭。&lt;/p&gt;

&lt;p&gt;磚頭書，不必以多取勝。&lt;/p&gt;

&lt;p&gt;為什麼會選擇濃縮原汁，不選擇稀釋飲品？或許是深受王鼎鈞《&lt;a href=&#34;http://www.books.com.tw/products/0010043322&#34;&gt;開放的人生&lt;/a&gt;》的影響吧：「以大為貴／&lt;strong&gt;看山要看大山。看書要看大書&lt;/strong&gt;。」&lt;/p&gt;

&lt;p&gt;這並不容易，是理解力與意志力的考驗；但攻克之後，為目四顧，登泰山而小天下。反觀坊間書肆一大堆稀釋品，高下立判。（而且，引經據典回答別人的問題，格外有成就感⋯⋯）&lt;/p&gt;

&lt;p&gt;會當凌絕頂，一覽眾山小。有為者，亦若是。&lt;/p&gt;

&lt;p&gt;陸象山說得好：「學苟知本，六經皆我註腳。」&lt;/p&gt;

&lt;h2 id=&#34;泛讀高手-其實也是精讀高手&#34;&gt;泛讀高手，其實也是精讀高手&lt;/h2&gt;

&lt;p&gt;其實，即使是鼓吹大量閱讀、主題閱讀的人，也不敢忽視精讀的重要性。&lt;/p&gt;

&lt;p&gt;他們懂得把精讀的能量放在刀口上。&lt;/p&gt;

&lt;p&gt;像《&lt;a href=&#34;http://www.books.com.tw/products/0010534848&#34;&gt;40歲，好日子才開始&lt;/a&gt;》在推薦主題式讀書法之後，下一頁旋即話鋒一轉：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;很多年長一輩的人後悔當初沒有好好看些書，最多的理由就是「忙得找不出時間」。不想讓人瞧不起，可是沒有時間讀書的人，我建議使用「經典式閱讀法」。&lt;/p&gt;

&lt;p&gt;先找到自己認為最「經典」的書，有空隨手就拿起來讀，以這本書為「基本參考書」，專讀這一本。&lt;/p&gt;

&lt;p&gt;找到自己的「經典」書籍，反覆閱讀到&lt;strong&gt;幾乎將這本書熟記&lt;/strong&gt;的程度。到自己可以&lt;strong&gt;以這本書做演講&lt;/strong&gt;的地步，這樣的熟讀方式有其意義在。&lt;/p&gt;

&lt;p&gt;讀書量多少當然有其影響力。可是如果沒有時間讀很多書的人，可以試試讀熟一本書，熟到幾乎可以背出來的方式，內容確確實實可以完全被自己吸收。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就連大力鼓吹影像閱讀法的勝間和代，在《&lt;a href=&#34;http://www.books.com.tw/products/0010434249&#34;&gt;新．知識生產術&lt;/a&gt;》中，也鼓勵挑戰一些磚頭書：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;最近，大家愈來愈不看書了，太厚的書、字太小的書、太貴的書，幾乎都賣不掉。&lt;/p&gt;

&lt;p&gt;但正因為如此，才更要挑戰那些大家不去看的書，這樣才能建立起與不挑戰的人之間的差異。&lt;/p&gt;

&lt;p&gt;讀書時，如果只讀暢銷書，可能會變成只吃精緻的加工食品一樣，因此希望各位偶爾也要像吃吃略微澀口的新鮮蔬菜一樣，挑戰一下難讀的書籍。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就連大力鼓吹影像閱讀法的神田昌典，在《&lt;a href=&#34;http://www.books.com.tw/products/0010473958&#34;&gt;10 年後會留在書架上的 100 本書&lt;/a&gt;》中，出人意料的對宅急便之父&lt;a href=&#34;http://www.books.com.tw/products/0010675380&#34;&gt;小倉昌男的書&lt;/a&gt;推崇備至。評價高到，不僅要用眼睛看這本書，甚至還要&lt;strong&gt;用嘴巴唸出聲音來&lt;/strong&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;這本書簡直就是訂定經營戰略的最佳教科書，我很想要各位在閱讀各種經營戰略的理論書之前，先拿起本書「讀出聲音來」。&lt;/p&gt;

&lt;p&gt;一字一句讀出聲音，每天早上起床後先花十分鐘讀出來。這本書甚至於到了「只要你能夠到達流利讀出來的地步，自然就能夠體會到如何制定經營戰略」的層次。&lt;/p&gt;

&lt;p&gt;如果想成為他那樣的商業人，就把姿勢坐正、讀出聲音來！&lt;/p&gt;

&lt;p&gt;讀出聲音，可以把它的經營者魂，刻畫在我們的血肉上。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我想，一個人一生中，總要有幾本值得讓我們「把姿勢坐正、讀出聲音來」的精讀書籍呀。&lt;/p&gt;

&lt;h2 id=&#34;最好的記憶&#34;&gt;最好的記憶&lt;/h2&gt;

&lt;p&gt;好書的營養成分，要銘刻在內心。&lt;/p&gt;

&lt;p&gt;唐諾在《&lt;a href=&#34;http://www.books.com.tw/products/0010286827&#34;&gt;閱讀的故事&lt;/a&gt;》如是說：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;最好的記憶，不是一個單獨的、孤立無援的點或原子。最好的記憶，不管是經由刻意地背誦或自然而然的記得，總有它和我們內心&lt;strong&gt;共鳴共振&lt;/strong&gt;的所謂&lt;strong&gt;印象深刻成分&lt;/strong&gt;，它對我們而言總是有線索、有來歷甚至是有（暫時）秩序的，你知道該把它安置在自己記憶的哪個「櫃子」裡，他日要用時你也大概知道存放何處可以把它找出來。&lt;/p&gt;

&lt;p&gt;而因應著如此觸及內心的美好共鳴，通常在那相遇的驚心動魄一刻，你總會要自己&lt;strong&gt;暫時放緩腳步&lt;/strong&gt;甚至停下來。&lt;/p&gt;

&lt;p&gt;嚴格來說，惟有通過如此的記憶過程，那東西才完完全全變成「你的」，甚至它不再只是記憶了，而是你生命的一部份、身體的一部份，彷彿已從抽象的訊息，轉變成實體的筋骨肌理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;值此境界，泛讀或精讀，已不再重要。物我交融，得意而忘言。&lt;/p&gt;

&lt;p&gt;在到達此境界之前，還是先乖乖修煉閱讀的技術吧。&lt;/p&gt;

&lt;p&gt;這是一生受用不盡的技術。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>專業態度的養成</title>
      <link>//william-yeh.net/post/2016/07/professional-attitude/</link>
      <pubDate>Sat, 30 Jul 2016 17:35:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/07/professional-attitude/</guid>
      
        <description>&lt;p&gt;最近在面試資深軟體工程師。幾次下來，對幾家公司培養出來的員工素質，有個概括印象了（或許也帶點偏見）。&lt;/p&gt;

&lt;p&gt;一個最顛覆既定印象的心得是：不是在大公司就一定學得深，不是在新創就一定學得廣。&lt;/p&gt;

&lt;p&gt;重點仍在於自己。在於自己有沒有「&lt;strong&gt;系統思考&lt;/strong&gt;及&lt;strong&gt;換位思考&lt;/strong&gt;的&lt;strong&gt;自覺&lt;/strong&gt;及&lt;strong&gt;行動&lt;/strong&gt;」。&lt;/p&gt;

&lt;p&gt;或者再濃縮成：在於「&lt;strong&gt;專業態度&lt;/strong&gt;」。&lt;/p&gt;

&lt;h2 id=&#34;專業-技能-vs-態度&#34;&gt;專業：技能 vs 態度&lt;/h2&gt;

&lt;p&gt;專業，有技能面及態度面。&lt;/p&gt;

&lt;p&gt;「專業技能」的成長，只要選對適性的方向，早晚都功不唐捐，尤其在學習資源既廣且深的今天。&lt;/p&gt;

&lt;p&gt;但「專業態度」的成長，除了操之於人的機運（天降的好運氣，或天殺的壞運氣），更多是取決於個人的&lt;strong&gt;自覺&lt;/strong&gt;及&lt;strong&gt;行動&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;專業技能固然重要，但是，能夠讓自己從流水帳的制式履歷表欄位中脫穎而出的，終究是專業態度。&lt;/p&gt;

&lt;p&gt;很準。只要針對每一份履歷表，個別客製化追問幾句，幾乎就能分辨出哪些人有下意識追求專業態度的成長。&lt;/p&gt;

&lt;h2 id=&#34;自覺&#34;&gt;自覺&lt;/h2&gt;

&lt;p&gt;專業態度的層面非常多，我最在意的是「&lt;strong&gt;系統思考&lt;/strong&gt;及&lt;strong&gt;換位思考&lt;/strong&gt;的&lt;strong&gt;自覺&lt;/strong&gt;及&lt;strong&gt;行動&lt;/strong&gt;」。&lt;/p&gt;

&lt;p&gt;這類專業態度，由誰來教？&lt;/p&gt;

&lt;p&gt;這不是公司能夠主動教你的。大公司不見得會主動教你，也未必所有公司都有像杜書伍、何飛鵬、稻盛和夫這樣的 mentor，不斷為文內訓（還集結出書）。資源有限的小公司，更是如此。&lt;/p&gt;

&lt;p&gt;如果公司沒有這樣的 mentor，就自己往外找吧。從優質社群找，從有信譽的名師、課程找，或者，從書本找。&lt;/p&gt;

&lt;p&gt;其實，許多情況，回頭讀讀幾本好書，並實踐，你就有許多 mentor 加持了。&lt;/p&gt;

&lt;p&gt;試想：有 Andrew Grove、Peter Drucker、Stephen Covey 當你的私人 mentor，是不是更靠譜？&lt;/p&gt;

&lt;p&gt;少了自覺，就會像我某篇舊文〈南柯一夢二十年〉講的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;遇到這樣的個案。&lt;/p&gt;

&lt;p&gt;第一堂課：「我有 20 年的工作經驗。」&lt;/p&gt;

&lt;p&gt;最後一堂：「現在我才發現，我只有 1 年的工作經驗，只不過重複了 20 年。」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要避免 20 年後發出這樣的喟嘆，就請立刻開始自覺培養起「&lt;strong&gt;系統思考&lt;/strong&gt;」及「&lt;strong&gt;換位思考&lt;/strong&gt;」的專業態度吧。&lt;/p&gt;

&lt;h2 id=&#34;行動&#34;&gt;行動&lt;/h2&gt;

&lt;p&gt;如果工作場域沒有專業態度的學習對象（不要以為大公司就一定有這樣足以學習的對象），可以改從優質社群學，可以從有信譽的名師、課程學，或者，從書本學。&lt;/p&gt;

&lt;p&gt;其實我一直覺得，學生時代講究的預習、複習、作業、考試循環，進了職場，一樣要有這種自我進修意識。&lt;/p&gt;

&lt;p&gt;學生時代，有定期的作業及考試督促你複習及活用；進了職場，沒人出作業練習題給你，該如何&lt;strong&gt;預習&lt;/strong&gt;＋&lt;strong&gt;複習&lt;/strong&gt;＋&lt;strong&gt;活用&lt;/strong&gt;？這就是身為在職場上打滾的成年人，該發揮創意及意志力的地方。像「換位思考」，就是一種在&lt;strong&gt;想像層面&lt;/strong&gt;的預習＋複習。&lt;/p&gt;

&lt;p&gt;新思惟他們有一句我很喜歡的 slogan：「&lt;a href=&#34;http://speak2015.innovarad.tw/create_your_stage/&#34;&gt;沒有機會，製造機會；沒有舞台，搭起舞台！&lt;/a&gt;」這也算是一種主動搭起的&lt;strong&gt;活用&lt;/strong&gt;機會。&lt;/p&gt;

&lt;p&gt;自己搭起實體的或想像的舞台，行動，操練，更有機會變成習慣，變成自覺。&lt;/p&gt;

&lt;h2 id=&#34;問與答&#34;&gt;問與答&lt;/h2&gt;

&lt;p&gt;網路上充斥著「成長」及「求職」的問與答。主動分享成長經驗者有之，但更多的是發問。&lt;/p&gt;

&lt;p&gt;發問是好事，但也要留意在網路上發問的局限性。就像 Joe 的〈&lt;a href=&#34;https://www.darencademy.com/article/view/id/7214&#34;&gt;如何問個好問題&lt;/a&gt;〉一文所說，要提問時，請把握下面五大重點：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;背景故事提供清楚。&lt;/li&gt;
&lt;li&gt;自己要先想一下自己要甚麼，這是別人無法幫你判斷的。&lt;/li&gt;
&lt;li&gt;不要問主觀判斷很重的問題，除非你只是想聊天與抱怨。&lt;/li&gt;
&lt;li&gt;不要讓問題過度開放，列出「選項」才能聽到客觀分析。&lt;/li&gt;
&lt;li&gt;問題討論要自行收斂。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;否則，討論串很容易一下子樓就歪了。&lt;/p&gt;

&lt;p&gt;正因網路問答有如此高的侷限，有時候，回頭讀讀幾本好書，並實踐，會比支離破碎又缺乏背景脈絡的網路問答，更有效。&lt;/p&gt;

&lt;h2 id=&#34;讀書&#34;&gt;讀書&lt;/h2&gt;

&lt;p&gt;網路上充斥著「成長」及「求職」的問與答。真心建議：何不回過頭來，好好讀讀幾本書？築起合適的&lt;strong&gt;心智框架&lt;/strong&gt;，就能在許多狀況下不假外求。&lt;/p&gt;

&lt;p&gt;聚焦於個人專業態度的成長，是值得的自我投資。&lt;/p&gt;

&lt;p&gt;在我的書架上，總是有一塊精華地帶，專門擺放這類專業態度的書籍。遇到疑惑，就來此寶地諮詢或印證。有時候，甚至只要把這幾本書的目錄瀏覽過一遍，就有吃下一顆定心丸的效果。&lt;/p&gt;

&lt;p&gt;沒騙你，真的光是目錄，就足以讓自己「低回留之，不能去云」。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/07/prof-attitude-books.jpg&#34; alt=&#34;專業態度的書籍&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/07/prof-attitude-books.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;專業態度的書籍&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這類書籍，務實，不打高空，很容易套用在自己的工作場域，操練「&lt;strong&gt;系統思考&lt;/strong&gt;」及「&lt;strong&gt;換位思考&lt;/strong&gt;」的專業態度。&lt;/p&gt;

&lt;p&gt;你我的書單未必有交集，但重點是：取法乎上，請儘早讓自己有「&lt;strong&gt;系統思考&lt;/strong&gt;及&lt;strong&gt;換位思考&lt;/strong&gt;的&lt;strong&gt;自覺&lt;/strong&gt;及&lt;strong&gt;行動&lt;/strong&gt;」。&lt;/p&gt;

&lt;p&gt;這是預習，也是複習。&lt;/p&gt;

&lt;h2 id=&#34;給不愛看書的人&#34;&gt;給不愛看書的人⋯⋯&lt;/h2&gt;

&lt;p&gt;如果實在懶得啃書，比較想上課的話，以下幾門課，都是大補帖！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;關於換位思考：&lt;a href=&#34;https://www.darencademy.com/activity/view/id/15533&#34;&gt;A101 職場大人學&lt;/a&gt; （推薦文：&lt;a href=&#34;//william-yeh.net/post/2015/09/upgrade-adult-thinking/&#34;&gt;升級成大人版的思維作業系統&lt;/a&gt; &amp;amp; &lt;a href=&#34;//william-yeh.net/post/2016/06/upgrade-adult-thinking-part2/&#34;&gt;轉大人，Part 2&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;關於系統思考：&lt;a href=&#34;https://www.projectup.net/activity/view/id/7689&#34;&gt;102 流程設計與跨部門溝通&lt;/a&gt; （推薦文：&lt;a href=&#34;//william-yeh.net/post/2016/04/learn-process-mgmt-by-game/&#34;&gt;向遊戲學習&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;關於職涯：&lt;a href=&#34;https://www.darencademy.com/activity/view/id/16419&#34;&gt;A103 履歷優化實戰班&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⋯⋯但是，良心建議，上完課，灌完頂之後，還是該回頭看看書的啦⋯⋯&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>改變的框架</title>
      <link>//william-yeh.net/post/2016/06/change-framework/</link>
      <pubDate>Tue, 28 Jun 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/06/change-framework/</guid>
      
        <description>&lt;p&gt;前幾天在 Twitter 寫道：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;下半年自我的課題，就是左腦高德拉特，右腦薩提爾，左右互搏。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;mdash; Quote: &lt;a href=&#34;https://twitter.com/william_yeh/status/746245079375876101&#34;&gt;2016-06-24 Tweet #1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;為什麼會把兩者相提並論呢？&lt;/p&gt;

&lt;p&gt;對我來說，&lt;a href=&#34;https://en.wikipedia.org/wiki/Eliyahu_M._Goldratt&#34;&gt;高德拉特&lt;/a&gt;代表一種極度&lt;strong&gt;陽剛&lt;/strong&gt;的思維角度，&lt;a href=&#34;https://en.wikipedia.org/wiki/Virginia_Satir&#34;&gt;薩提爾&lt;/a&gt;代表一種極度&lt;strong&gt;柔軟&lt;/strong&gt;的治療角度。&lt;/p&gt;

&lt;p&gt;這麼形容，並不代表他們是分處「剛」與「柔」兩個極端；相反的，越深入研究，越可體會出剛柔相濟的妙境。像高德拉特在《&lt;a href=&#34;http://www.books.com.tw/products/0010588043&#34;&gt;絕不是靠運氣&lt;/a&gt;》書中，演示了許多極度柔軟的「TOC 式說服程序」；而《&lt;a href=&#34;http://www.books.com.tw/products/0010004784&#34;&gt;薩提爾的家族治療模式&lt;/a&gt;》中闡釋的「高自我價值」，健旺的生命態度，令人動容：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:20em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/self-esteem.jpg&#34; alt=&#34;自我價值&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/self-esteem.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;自我價值&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這些特質，正與「&lt;a href=&#34;//william-yeh.net/post/2016/06/upgrade-adult-thinking-part2/&#34;&gt;大人思維&lt;/a&gt;」不謀而合。&lt;/p&gt;

&lt;p&gt;所以，在某個層次上，「剛」與「柔」並不是兩個極端，而是可以協調產生綜效的。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;回到正題。&lt;/p&gt;

&lt;p&gt;為什麼我會想以「左腦高德拉特，右腦薩提爾」作為我的下半年課題呢？&lt;/p&gt;

&lt;p&gt;因為，我看中兩者的一項共通性：面對「改變」的議題。&lt;/p&gt;

&lt;h2 id=&#34;改變&#34;&gt;改變&lt;/h2&gt;

&lt;p&gt;我在〈&lt;a href=&#34;//william-yeh.net/post/2016/05/change-viewpoint-on-lord-of-rings/&#34;&gt;從「改變」角度看《魔戒》&lt;/a&gt;〉一文提到：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;畢竟 Lean Change Canvas 只是個框架，只是建議可以從九個面向去思考，但並未給出個別面向該如何發想及收斂；這有待自己再融入其他更針對性的思考工具。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不管是在個人層次，或在家庭層次、人際層次、團隊層次、組織層次，「改變」總是無法迴避的議題，或者說：難題。在上述的任何一個層次，想發揮更大的影響力，都必須學習「改變」的技術及藝術。&lt;/p&gt;

&lt;h2 id=&#34;限制理論的改變框架&#34;&gt;限制理論的改變框架&lt;/h2&gt;

&lt;p&gt;「改變」的技術及藝術，是需要學習的，更需要不斷透過精準的提問來對焦。&lt;/p&gt;

&lt;p&gt;這也正是高德拉特《&lt;a href=&#34;http://www.books.com.tw/products/0010562789?loc=P_asb_001&#34;&gt;目標&lt;/a&gt;》書末揭櫫的三個大哉問：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What to change / 應該改變哪些事情&lt;/li&gt;
&lt;li&gt;What to change to / 要朝什麼方向改變&lt;/li&gt;
&lt;li&gt;How to cause the change / 要如何改變&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;這是很困難的大哉問。就連高德拉特本人，也要過了十年，在《&lt;a href=&#34;http://www.books.com.tw/products/0010588043&#34;&gt;絕不是靠運氣&lt;/a&gt;》書中才正式提出具體的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Thinking_processes_(theory_of_constraints)&#34;&gt;Thinking Processes&lt;/a&gt; 體系來處理這三大課題。&lt;/p&gt;

&lt;p&gt;後來，高德拉特之女 Efrat Goldratt-Ashlag &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，則以組織心理學家的角度，提出 TOC 觀點的「&lt;a href=&#34;https://scholar.google.com.tw/scholar?cluster=3039241670493587705&#34;&gt;抵制變革層次&lt;/a&gt;」。 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:25em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/toc-layers-of-resistance.jpg&#34; alt=&#34;TOC 抵制變革層次&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/toc-layers-of-resistance.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;TOC 抵制變革層次&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;Efrat Goldratt-Ashlag 更語重心長說道：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;為了避免浪費時間和考驗我們自己及合作夥伴的耐心，我們需要忍住隨口亂說的衝動——我們應該盡快識別出&lt;strong&gt;未能達成共識的最早的「層次」&lt;/strong&gt;，並向對方建議，應該在進入下一步之前先集中討論該問題。&lt;/p&gt;

&lt;p&gt;抵制層次就好比一個&lt;strong&gt;路線圖&lt;/strong&gt;，標示著我們到了何處，何時適合繼續下一步討論，何時應該停在原處深呼吸一下，才不會有無所適從的感覺。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你看，TOC 是不是也有極度柔軟細緻的一面呢？&lt;/p&gt;

&lt;h2 id=&#34;薩提爾理論的改變框架&#34;&gt;薩提爾理論的改變框架&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Virginia_Satir&#34;&gt;薩提爾&lt;/a&gt;在從事個人及家族治療實務時，也淬煉出六階段的改變歷程：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:20em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/satir-change-model.jpg&#34; alt=&#34;Satir 六階段的改變歷程&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/satir-change-model.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Satir 六階段的改變歷程&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;薩提爾模式強調的一個取向是&lt;strong&gt;增添改變的概念&lt;/strong&gt; (the &lt;strong&gt;add-on&lt;/strong&gt; concept change)。從功能不良轉化到高功能的過程，往往涉及添加一些什麼到我們已經是或知道的東西上面。&lt;/p&gt;

&lt;p&gt;要重建高的自我價值，我們需要把案主帶入改變和轉化的過程。過程是改變之道：它有很多層次，包括從簡單的順序，到小心地察看發生了什麼、如何發生的以及改變&lt;strong&gt;觀點&lt;/strong&gt;、&lt;strong&gt;期待&lt;/strong&gt;和&lt;strong&gt;感受&lt;/strong&gt;。薩提爾整個模式的精神就在於&lt;strong&gt;覺察和欣賞轉化的過程&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&amp;mdash; Quote: 《&lt;a href=&#34;http://www.books.com.tw/products/0010004784&#34;&gt;薩提爾的家族治療模式&lt;/a&gt;》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;非常細緻，也是高度個別化的手法。&lt;/p&gt;

&lt;p&gt;和薩提爾彼此惺惺相惜的&lt;a href=&#34;https://en.wikipedia.org/wiki/Gerald_Weinberg&#34;&gt;溫伯格&lt;/a&gt;大師，也在《&lt;a href=&#34;http://www.books.com.tw/products/0010545251&#34;&gt;擁抱變革&lt;/a&gt;》書中，根據薩提爾的改變歷程，進一步點出其中的抉擇點／施力點：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:25em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/weinberg-change-process.jpg&#34; alt=&#34;溫伯格 - 變革抉擇點&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/weinberg-change-process.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;溫伯格 - 變革抉擇點&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這些對於「改變」內在外在歷程的藍圖，可讓我們做好更多的心理建設，也做更周詳的企劃。&lt;/p&gt;

&lt;h2 id=&#34;科特的改變框架&#34;&gt;科特的改變框架&lt;/h2&gt;

&lt;p&gt;變革大師&lt;a href=&#34;https://www.kotterinternational.com/team/john-kotter/&#34;&gt;約翰・科特&lt;/a&gt;在《&lt;a href=&#34;http://www.books.com.tw/products/0010675408&#34;&gt;超速變革&lt;/a&gt;》中，調整他早年 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; 的變革步驟，提出 turbo 版的&lt;a href=&#34;http://www.kotterinternational.com/resources/landing-page/8-steps-to-accelerate-change-in-2015/&#34;&gt;變革加速器&lt;/a&gt;：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:25em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/kotter-8-steps.jpg&#34; alt=&#34;科特 - 變革加速器&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/kotter-8-steps.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;科特 - 變革加速器&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;本書所探討的，就是組織如何以靈活及創意，快速因應策略挑戰，把握今日更容易稍縱即逝的機會。我們從中可以明白，超前、創新的組織是如何早一步擺脫激烈競爭、處理前所未有的混亂狀況、面對技術斷層（technological discontinuies）的威脅，不必犧牲短期獲利，也不會耗損自己的人力。&lt;/p&gt;

&lt;p&gt;我的結論很簡單。當今世界的變化之快，導致過去一個世紀以來建立的基本系統、架構與文化，都無法跟上眼前的需求。就算你再怎麼精明，現在如果採取漸進方式調整管理與策略，恐怕也會使不上力。在變化莫測與變數日增的年代，你需要一個全新策略，才能保持領先。解決方法未必要捨棄原先已知的事物，全部從頭來過，而是要用&lt;strong&gt;有機方式&lt;/strong&gt;再導入&lt;strong&gt;第二套系統&lt;/strong&gt;；多數成功企業家對這套系統也很熟悉。&lt;/p&gt;

&lt;p&gt;新系統新增企業必備的靈活與速度；而原本的舊系統會持續運作，保持可靠與效率。兩者結合成「&lt;strong&gt;雙營運系統&lt;/strong&gt;」(dual operating system)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這種「雙營運系統」組織設計法，和《&lt;a href=&#34;http://www.amazon.com/dp/0988262592/ref=cm_sw_r_tw_dp_a4p3wb0PSYY97&#34;&gt;鳳凰專案&lt;/a&gt;》的解法如出一轍，也很像我在〈&lt;a href=&#34;//william-yeh.net/post/2016/06/phoenix-proj-titles/&#34;&gt;《鳳凰專案》私房標題&lt;/a&gt;〉提出的 injection。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;理論歸理論，實際歸實際。一堆改變框架，足以讓自己好好消化吸收運用了。&lt;/p&gt;

&lt;p&gt;大人之路，就是一段華麗的冒險呀！&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      系列文章
    
  &lt;/div&gt;
  

&lt;p&gt;❶ 改變的框架&lt;/p&gt;

&lt;p&gt;❷ &lt;a href=&#34;//william-yeh.net/post/2018/12/process-and-metrics/&#34;&gt;改變／改革：流程與衡量指標&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;高德拉特之女 Efrat Goldratt-Ashlag，也是《&lt;a href=&#34;https://www.amazon.cn/%E6%8A%89%E6%8B%A9-%E8%89%BE%E5%88%A9%C2%B7%E9%AB%98%E5%BE%B7%E6%8B%89%E7%89%B9/dp/B006006M6U&#34;&gt;抉擇&lt;/a&gt;》一書的合著者。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Efrat Goldratt-Ashlag 的〈&lt;a href=&#34;https://scholar.google.com.tw/scholar?cluster=3039241670493587705&#34;&gt;抵制變革層次&lt;/a&gt;〉這篇論文，亦收錄於《&lt;a href=&#34;http://www.books.com.tw/products/CN11199988&#34;&gt;瓶頸理論手冊&lt;/a&gt;》。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;科特 (John Kotter) 在變革領域著作等身。他最為人所知的，是在 1996 年《&lt;a href=&#34;https://www.books.com.tw/products/0010191080&#34;&gt;領導人的變革法則&lt;/a&gt;》提出著名的「八階段變革流程」。後來的著作，有專門探討八階段當中的特定議題（像 2008 年《&lt;a href=&#34;https://bookzone.cwgv.com.tw/books/details/BCB403&#34;&gt;急迫感&lt;/a&gt;》），也有改寫成寓言故事（像 2006 年《&lt;a href=&#34;https://www.books.com.tw/products/0010645587&#34;&gt;冰山在融化&lt;/a&gt;》）。2014 年的《&lt;a href=&#34;http://www.books.com.tw/products/0010675408&#34;&gt;超速變革&lt;/a&gt;》，則是「八階段變革流程」的進化版，也有改寫成寓言故事《&lt;a href=&#34;https://www.books.com.tw/products/0010731153&#34;&gt;這不是我們做事的方法！&lt;/a&gt;》。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>《鳳凰專案》私房標題</title>
      <link>//william-yeh.net/post/2016/06/phoenix-proj-titles/</link>
      <pubDate>Tue, 21 Jun 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/06/phoenix-proj-titles/</guid>
      
        <description>

&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/dp/0988262592/ref=cm_sw_r_tw_dp_a4p3wb0PSYY97&#34;&gt;&lt;em&gt;The Phoenix Project&lt;/em&gt;&lt;/a&gt;（中譯本《&lt;a href=&#34;https://www.books.com.tw/products/0010765203&#34;&gt;鳳凰專案&lt;/a&gt;》）作者如是說：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dr. Eliyahu Goldratt wrote his seminal book, &lt;a href=&#34;https://www.amazon.com/dp/0884270610/ref=cm_sw_r_tw_dp_eQmAxb6J5AFAR&#34;&gt;&lt;em&gt;The Goal: A Process of Ongoing Improvement&lt;/em&gt;&lt;/a&gt;, in 1984. [&amp;hellip;] My coauthors and I studied this book for nearly a decade, getting ready to write &lt;em&gt;The Phoenix Project&lt;/em&gt;. In many ways, I view our book as an homage to &lt;em&gt;The Goal&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;我和共同作者研究高德拉特博士的《&lt;a href=&#34;https://www.books.com.tw/products/0010562789&#34;&gt;目標&lt;/a&gt;》將近十年了，為撰寫《鳳凰專案》做準備。我認為，從很多方面來看，我們這本書都是在&lt;strong&gt;向《目標》致敬&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果一本書蘊釀了十年，那麼，這本書就值得我們細細咀嚼。&lt;/p&gt;

&lt;h2 id=&#34;值得多讀幾次的書&#34;&gt;值得多讀幾次的書&lt;/h2&gt;

&lt;p&gt;我很早就有《&lt;a href=&#34;https://www.books.com.tw/products/0010765203&#34;&gt;鳳凰專案&lt;/a&gt;》這本書的 Kindle 英文版及 Audible 語音版了。&lt;/p&gt;

&lt;p&gt;第一次讀完的時間已不可考。第二次是在撰寫〈&lt;a href=&#34;//william-yeh.net/post/2016/03/origin-of-devops-elements/&#34;&gt;DevOps 核心元素的考古溯源&lt;/a&gt;〉文章時，特地選讀相關的部分。第三次是在準備〈&lt;a href=&#34;//william-yeh.net/post/2016/05/devops-a-lean-perspective/&#34;&gt;有了 Agile，為什麼還要有 DevOps？&lt;/a&gt;〉演講時，對書中所倡議的「&lt;a href=&#34;http://itrevolution.com/the-three-ways-principles-underpinning-devops/&#34;&gt;&lt;strong&gt;三步工作法&lt;/strong&gt;&lt;/a&gt;」做更仔細的檢視。&lt;/p&gt;

&lt;p&gt;因此，屈指算來，我在〈&lt;a href=&#34;//william-yeh.net/post/2016/06/upgrade-adult-thinking-part2/&#34;&gt;轉大人，Part 2&lt;/a&gt;〉文中提到的頓悟經歷，已經是第四次讀這本書了：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;對於這陣子已經把《目標》、《絕不是靠運氣》、《關鍵鏈》重看一次的我，再回頭重看《鳳凰專案》，開始萌生另一種閱讀角度。&lt;/p&gt;

&lt;p&gt;人性的角度。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;為什麼要讀這麼多次呢？因為以前不懂得用更寬廣的視野來讀這本書。&lt;/p&gt;

&lt;p&gt;這本書每一章，其實都很值得我們設身處地思考：換成是我們，面對那樣的狀況，會採取什麼技術及非技術的手法，去分析局面，找對策。&lt;/p&gt;

&lt;p&gt;這也是身為職場大人的自我練習。&lt;/p&gt;

&lt;p&gt;這類小說，就像推理小說一樣，本來就不應該直接翻到兇手揭曉的那一頁呀。&lt;/p&gt;

&lt;h2 id=&#34;核心衝突&#34;&gt;核心衝突&lt;/h2&gt;

&lt;p&gt;這陣子雖然把《目標》、《絕不是靠運氣》、《關鍵鏈》重看一次，對高德拉特在《&lt;a href=&#34;https://www.books.com.tw/products/0010588043&#34;&gt;絕不是靠運氣&lt;/a&gt;》的論點，心嚮往之，但又不禁懷疑。高德拉特是這麼說的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我們不應假設經理人疏忽或無能，我們應該假設他們陷入一個衝突之中，以至於他們無法正確地經營公司。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;真的是這樣嗎？&lt;/p&gt;

&lt;p&gt;索性拿 DevOps 當實驗品吧！我很好奇：DevOps 的「核心衝突」究竟是什麼？&lt;/p&gt;

&lt;p&gt;我想效法《絕不是靠運氣》的主角 Rogo、《鳳凰專案》的主角 Bill，嘗試獨立思考。&lt;/p&gt;

&lt;p&gt;當然啦，高德拉特藉著主角 Rogo 之口，事先提出警告：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;全套的思維方法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;你需要的是：對主題的直覺，及有毅力去執行這套思維方法中的細緻步驟。&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;mdash; 《&lt;a href=&#34;https://www.books.com.tw/products/0010588043&#34;&gt;絕不是靠運氣&lt;/a&gt;》p.125&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，我對過程中的燒腦程度，已經先有了心理準備。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;我興致勃勃的照著高德拉特 &lt;a href=&#34;https://en.wikipedia.org/wiki/Thinking_processes_(theory_of_constraints)&#34;&gt;Thinking Processes&lt;/a&gt; 的步驟，針對 DevOps 常見的問題／痛點／抱怨，老老實實地從 UDE → CRT → clouds → injection → FRT 一路推導 DevOps 議題。&lt;/p&gt;

&lt;p&gt;赫然發現：超誇張的，光是用 CRT，就能初步推導出 DevOps 的 &lt;a href=&#34;https://blog.devopsguys.com/2014/04/17/the-secret-of-devops-success-isnt-in-the-it-literature-yet/&#34;&gt;CALMS&lt;/a&gt; 及所謂的「三步工作法」。而且，DevOps 的核心衝突，果然就出現在 CRT 的下方：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/devops-crt.jpg&#34; alt=&#34;CRT in DevOps&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/devops-crt.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;CRT in DevOps&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;整個推導過程的確燒腦，也橫跨了好幾天，但值得。&lt;/p&gt;

&lt;h2 id=&#34;鳳凰專案-最大的貢獻&#34;&gt;《鳳凰專案》最大的貢獻&lt;/h2&gt;

&lt;p&gt;DevOps 的 CRT 及核心衝突一旦現形，再回頭看《鳳凰專案》，許多推理過程就清晰許多。&lt;/p&gt;

&lt;p&gt;你也可以當自己的鐘納。&lt;/p&gt;

&lt;p&gt;突然有個很離經叛道的想法：《鳳凰專案》這本書最大的貢獻，恐怕不是所謂的「三步工作法」，而是「四種類型工作」的界定。&lt;/p&gt;

&lt;p&gt;畢竟，「四種類型工作」是因，「三步工作法」只是 TOC 及 Lean 的應用之果。&lt;/p&gt;

&lt;p&gt;這方面的想法，先賣個關子，留待 &lt;a href=&#34;http://devopssummit.ithome.com.tw/&#34;&gt;DevOps Summit 2016&lt;/a&gt; 的演講〈&lt;a href=&#34;https://school.soft-arch.net/blog/4439/devops-a-toc-perspective&#34;&gt;從限制理論看 DevOps&lt;/a&gt;〉再發表吧。&lt;/p&gt;

&lt;p&gt;經過這些探索歷程，對《鳳凰專案》這本書，心生更多敬意。&lt;/p&gt;

&lt;p&gt;作者說他們為了這本書「蘊釀了十年」，誠然不虛。&lt;/p&gt;

&lt;h2 id=&#34;私房標題&#34;&gt;私房標題&lt;/h2&gt;

&lt;p&gt;我在〈&lt;a href=&#34;//william-yeh.net/post/2016/06/upgrade-adult-thinking-part2/&#34;&gt;轉大人，Part 2&lt;/a&gt;〉文中曾預告過：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;現在重讀《鳳凰專案》時，私底下也在替每一章取個私房標題。接下來，會再加把勁兒，自我要求：練習用 Bryan 課堂上教的分析手法，重新分析箇中情節。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;漸漸發現，我想做的，不僅是「導讀」，甚至是「註釋」或「延伸學習單」了。不過我設想的進行方式是，一次只導讀某幾章，不要偷看後面的章節。就像面對推理小說一樣，偷看後面的解密，就不好玩了。&lt;/p&gt;

&lt;p&gt;整個活動，需要分好幾次才能完成。也就是說，是個有連載性質的導讀活動。&lt;/p&gt;

&lt;p&gt;在哪裡舉辦呢？&lt;/p&gt;

&lt;p&gt;辦在公司裡面，優點是風險較低，缺點是參與者同質性過高，激盪火花的力道較弱，我能學到的新東西也較少。或許應該先在有興趣的社群先小規模玩過一次？&lt;/p&gt;

&lt;p&gt;事情總是要一步一步來。我先將私房標題的初稿列在下面：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;沒有蜜月期&lt;/li&gt;
&lt;li&gt;為什麼是你而不是我？&lt;/li&gt;
&lt;li&gt;走捷徑&lt;/li&gt;
&lt;li&gt;交相指責&lt;/li&gt;
&lt;li&gt;管理人員的角度&lt;/li&gt;
&lt;li&gt;檢討變更流程&lt;/li&gt;
&lt;li&gt;Erik 登場&lt;/li&gt;
&lt;li&gt;分類變更要求&lt;/li&gt;
&lt;li&gt;第三種工作類型&lt;/li&gt;
&lt;li&gt;Brent 的一天&lt;/li&gt;
&lt;li&gt;半成品堆積&lt;/li&gt;
&lt;li&gt;上線災難&lt;/li&gt;
&lt;li&gt;救火&lt;/li&gt;
&lt;li&gt;IT 外包危機&lt;/li&gt;
&lt;li&gt;第四種工作類型&lt;/li&gt;
&lt;li&gt;辭職&lt;/li&gt;
&lt;li&gt;我是十足的混蛋&lt;/li&gt;
&lt;li&gt;混蛋的告白&lt;/li&gt;
&lt;li&gt;凍結新工作&lt;/li&gt;
&lt;li&gt;監控資源&lt;/li&gt;
&lt;li&gt;怎麼逃過審計的？&lt;/li&gt;
&lt;li&gt;如何決定優先序？&lt;/li&gt;
&lt;li&gt;多重工作交接&lt;/li&gt;
&lt;li&gt;John 的用處？&lt;/li&gt;
&lt;li&gt;對系統的鑑賞&lt;/li&gt;
&lt;li&gt;魔杖&lt;/li&gt;
&lt;li&gt;IT 風險不是 IT 風險&lt;/li&gt;
&lt;li&gt;又是 Sarah！&lt;/li&gt;
&lt;li&gt;特別行動隊&lt;/li&gt;
&lt;li&gt;持續交付&lt;/li&gt;
&lt;li&gt;Value stream&lt;/li&gt;
&lt;li&gt;“獨角獸”&lt;/li&gt;
&lt;li&gt;自動化的小勝利&lt;/li&gt;
&lt;li&gt;收回外包&lt;/li&gt;
&lt;li&gt;快車道&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;仍然強烈建議：請將這本書當成推理小說，不要驟然翻到後面。&lt;/p&gt;

&lt;p&gt;畢竟：&lt;/p&gt;

&lt;p&gt;

&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/phoenix-10years.png&#34; alt=&#34;十年成一書&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/phoenix-10years.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;十年成一書&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;mdash; Quote: &lt;a href=&#34;https://twitter.com/william_yeh/status/743252388828446720&#34;&gt;2016-06-16 Tweet #1&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>轉大人，Part 2</title>
      <link>//william-yeh.net/post/2016/06/upgrade-adult-thinking-part2/</link>
      <pubDate>Sat, 04 Jun 2016 09:54:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/06/upgrade-adult-thinking-part2/</guid>
      
        <description>

&lt;p&gt;在我所處的軟體研發圈中，最近也流行起「&lt;a href=&#34;http://www.gigihuang.com/2016/05/22/agile_meetup_show_dont_tell/&#34;&gt;18+ Adult Manifesto&lt;/a&gt;」這種話題。&lt;/p&gt;

&lt;p&gt;這就不得不佩服 J&amp;amp;B 取的「大人學」品牌名字，是多麼有遠見呀！&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/child-vs-adult.jpg&#34; alt=&#34;小孩 vs 大人&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/child-vs-adult.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;小孩 vs 大人&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;自從九個月前參加【&lt;a href=&#34;https://shop.darencademy.com/product/view/id/28&#34;&gt;A101 職場大人學：職場人際關係與優勢策略&lt;/a&gt;】之後，不僅在 Facebook 私密社團繼續交流，我們同梯更舉辦自發性聚會，定期交換彼此的職場及閱讀心得。算是重要的&lt;strong&gt;族人&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;這陣子，旁觀別人形形色色的遭遇，不禁深自慶幸：用 14 PDU 換來 Bryan 積蓄 15 年的內功，何等划算！雖不敢說從此就無風無浪，但至少開了眼、醒了腦，懂得用更系統化、更跳離本位的角度來審視事情／世情，從那張表格的「苦主」晉升到⋯⋯自認進入前三個等級了（雖然偶爾還是會退化到第四等級⋯⋯）。&lt;/p&gt;

&lt;p&gt;箇中關鍵，真的就像 Bryan 反覆叮嚀的那「xx力」三字訣。&lt;/p&gt;

&lt;h2 id=&#34;內化&#34;&gt;內化&lt;/h2&gt;

&lt;p&gt;對老師最大的回饋，就是確實將老師所傳授的東西，反覆演練、運用，從思考及實踐中，努力內化成本能反應。&lt;/p&gt;

&lt;p&gt;如何確認自己內化的程度呢？&lt;/p&gt;

&lt;p&gt;這門課有學長姐回訓機制。回鍋再當一次學生，再度面對寫實案例，看看自己是否比第一次上課時更有身為「大人」的自覺，更能在所謂「關鍵四秒」中，迅速勾勒「局」與「勢」的關係，不啻是一場刺激的實境挑戰。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/a101-handouts.jpg&#34; alt=&#34;回訓&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/a101-handouts.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;回訓&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;我還偷偷給自己設限。&lt;/p&gt;

&lt;p&gt;老子曰：「五色令人目盲，五音令人耳聾。」&lt;/p&gt;

&lt;p&gt;因此，最近在思考問題、演講授課時，越來越喜歡從原始定義或目標下手。我認為，原理通了，邏輯通了，再加一點點創意及想像力，很多東西都是順理成章就推導得出來。&lt;/p&gt;

&lt;p&gt;於是，我想給自己一個挑戰：在回訓課堂上，要先自我歸零，就當自己是第一次來上課的學生；要自我克制，不要直接偷拿 Bryan 以前開釋過的大絕招來應付考古題。&lt;/p&gt;

&lt;p&gt;重點是思維角度，不是招數。&lt;/p&gt;

&lt;p&gt;結果呢？&lt;/p&gt;

&lt;p&gt;回訓，仍然感受到強烈的衝擊，仍然是點頭如搗蒜（所以，Bryan 的 15 年功力，真是超強！再聽一次，仍然收穫滿滿）。&lt;/p&gt;

&lt;p&gt;也很欣慰，原來自己已經不知不覺內化了某些部分。我沒有辜負去年在〈&lt;a href=&#34;//william-yeh.net/post/2015/09/upgrade-adult-thinking/&#34;&gt;升級成大人版的思維作業系統&lt;/a&gt;〉做的自我期許。&lt;/p&gt;

&lt;h2 id=&#34;訴求-vs-需求-vs-目標&#34;&gt;訴求 vs 需求 vs 目標&lt;/h2&gt;

&lt;p&gt;回訓，不是乖乖聽課就好，還要協助&lt;del&gt;小鮮肉&lt;/del&gt;學弟妹進行小組討論。面對組員，就像面對去年的自己，有趣之餘，也附帶了些引導（但不過度介入）的責任。&lt;/p&gt;

&lt;p&gt;為了因應可能被組員提出的問題，也為了自我成長，我也挑選想再深度探索的主題：&lt;a href=&#34;https://en.wikipedia.org/wiki/Evaporating_Cloud&#34;&gt;衝突圖&lt;/a&gt;，在課前先自我延伸學習。&lt;/p&gt;

&lt;p&gt;不過，在&lt;a href=&#34;https://en.wikipedia.org/wiki/Eliyahu_M._Goldratt&#34;&gt;高德拉特&lt;/a&gt;的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Theory_of_constraints&#34;&gt;TOC (Theory of Constraints)&lt;/a&gt; 發展史中，&lt;a href=&#34;https://en.wikipedia.org/wiki/Evaporating_Cloud&#34;&gt;衝突圖&lt;/a&gt;其實是隸屬於更大的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Thinking_processes_(theory_of_constraints)&#34;&gt;Thinking Process&lt;/a&gt; 當中的一環。為了更充分掌握這項思考方式，便將書架上擺了超過十年的高德拉特系列書籍：《目標》、《絕不是靠運氣》、《關鍵鏈》拿出來重讀一次，順便也讀一讀岸良裕司的兩本詮釋書籍。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/cloud-books.jpg&#34; alt=&#34;岸良裕司的書&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/cloud-books.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;岸良裕司的書&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;學了 TOC 的 Thinking Process 之後，不知不覺很喜歡思辨幾個層次的區別：「想要 vs 需要」、「訴求 vs 需求 vs 目標」。這也逐漸內化成我的思考工具。&lt;/p&gt;

&lt;p&gt;在此也要非常感謝 Bryan 在這門課指導的 TOC 衝突圖，算是我聽過最簡潔、最生動的詮釋。這次回頭再看那堆書，就懊惱：怎麼自己當年讀不出味道呢？&lt;/p&gt;

&lt;p&gt;好的引導，真的很重要。聽君一席話，勝讀十年書！&lt;/p&gt;

&lt;h2 id=&#34;集點卡&#34;&gt;集點卡&lt;/h2&gt;

&lt;p&gt;這次回訓，某些地方給了我另一個層次的衝擊。「集點卡」是其中之一。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/loyalty-card.jpg&#34; alt=&#34;Bryan 集點卡&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/loyalty-card.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Bryan 集點卡&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;看了這張集點卡，我相信 Bryan 所說的「我從 15 年前就在準備這門課了！」真實不虛。&lt;/p&gt;

&lt;p&gt;每當面臨職涯抉擇時，多少人腦海中，有這麼一張清晰的集點卡呢？&lt;/p&gt;

&lt;p&gt;這是很值得嚴肅面對的問題。&lt;/p&gt;

&lt;p&gt;去年上了這門課之後，我的確開始逐漸自我裝備，但不夠清晰。這次回訓，再度看到這張圖，也再度點燃集點的熱誠。&lt;/p&gt;

&lt;h2 id=&#34;做自己&#34;&gt;做自己&lt;/h2&gt;

&lt;p&gt;即使是同一位老師講同一門課，但只要學生組成不同，就會有不同的氣場及火花。&lt;/p&gt;

&lt;p&gt;這次回訓，有幾位同學針對「做自己」這一點，展開一連串的熱烈提問。&lt;/p&gt;

&lt;p&gt;現場激起的火花，真的很過癮！連 Bryan 都有感而發，隔天就寫出了〈&lt;a href=&#34;https://www.darencademy.com/article/view/id/16421&#34;&gt;所謂做自己，就是用自己的意志扮演自己想要的角色&lt;/a&gt;〉這篇文章。&lt;/p&gt;

&lt;p&gt;某些觀念，如果是不約而同被我私淑對象提到，那就一定值得我認真對待。&lt;/p&gt;

&lt;p&gt;其一，Bryan 課堂闡述的職場人際基礎：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/job-view.jpg&#34; alt=&#34;關於職場這個局&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/job-view.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;關於職場這個局&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;其二，阿德勒的「課題分離」原則。&lt;/p&gt;

&lt;p&gt;或許是這陣子被不同種族的&lt;strong&gt;族人&lt;/strong&gt;間接推坑（像&lt;a href=&#34;https://i-chentsai.innovarad.tw/2015/05/alfred_adler.html&#34;&gt;這位&lt;/a&gt;及&lt;a href=&#34;http://teddy-chen-tw.blogspot.com/2015/07/blog-post_30.html&#34;&gt;這位&lt;/a&gt;），讀了《&lt;a href=&#34;http://i-chentsai.innovarad.tw/2015/05/alfred_adler.html&#34;&gt;被討厭的勇氣&lt;/a&gt;》，知道適度的「課題分離」是件好事，所以，腦袋中已經埋下這些種子：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我們必須站在「這是誰的課題？」的觀點，將自己和他人的課題切割開來。&lt;/p&gt;

&lt;p&gt;所有人際關係中的紛爭，差不多都是因為一腳踩進人家的課題裡，或是自己的課題遭到干涉所引起的。&lt;/p&gt;

&lt;p&gt;要區分是誰的課題，方法很簡單，請想一想「因為這個決定而帶來的結果，最後會由誰來承受」？&lt;/p&gt;

&lt;p&gt;別人不是為了滿足你的期望而活。&lt;/p&gt;

&lt;p&gt;關於自己的人生，你所能做的只有「選擇一條自認為最好的路」。別人要對你的選擇做出什麼樣的評論，這是別人的課題，你是無法干預的。&lt;/p&gt;

&lt;p&gt;如果你無法不在意他人的評價、無法不害怕被人討厭，也不想付出可能得不到認同的代價，就無法貫徹自己的生活方式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其三，高德拉特的「清晰思考」觀點：&lt;/p&gt;

&lt;p&gt;

&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/toc-thinking-1.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/toc-thinking-1.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/toc-thinking-2.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/toc-thinking-2.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;從【A101職場大人學】課程，到《被討厭的勇氣》書籍，再到高德拉特 TOC 系列，覺得腦袋整個被翻轉。&lt;/p&gt;

&lt;p&gt;誠如上面《抉擇》導讀文章所說：這是一段「不斷探索、實踐和學習」的道路。&lt;/p&gt;

&lt;p&gt;大人之路，就是一段華麗的冒險呀！&lt;/p&gt;

&lt;h2 id=&#34;觸類旁通的新眼光&#34;&gt;觸類旁通的新眼光&lt;/h2&gt;

&lt;p&gt;最近，為了準備幾場專題演講，我開始重讀《&lt;a href=&#34;http://www.amazon.com/dp/0988262592/ref=cm_sw_r_tw_dp_a4p3wb0PSYY97&#34;&gt;鳳凰專案&lt;/a&gt;》這本 IT 界 DevOps 的經典小說（關於這本小說，請見我在〈&lt;a href=&#34;//william-yeh.net/post/2016/03/origin-of-devops-elements/&#34;&gt;DevOps 核心元素的考古溯源&lt;/a&gt;〉及〈&lt;a href=&#34;//william-yeh.net/post/2016/05/devops-a-lean-perspective/&#34;&gt;有了 Agile，為什麼還要有 DevOps？&lt;/a&gt;〉的介紹）。&lt;/p&gt;

&lt;p&gt;許多 IT 人，都是用工具主義的角度，求仙丹，求銀彈，想趕快翻到特效藥的章節；誰叫這本書故事內容，就是在宣傳「三個月就能將瀕危專案起死回生」的「一個 IT 運維的傳奇故事」呢？（其實《目標》及《絕不是靠運氣》兩本書的主角羅哥，不也是在短短三個月內就創下奇蹟嗎？）&lt;/p&gt;

&lt;p&gt;可是，這類小說，就像推理小說一樣，本來就不應該直接翻到兇手揭曉的那一頁呀。&lt;/p&gt;

&lt;p&gt;對於這陣子已經把《目標》、《絕不是靠運氣》、《關鍵鏈》重看一次的我，再回頭重看《鳳凰專案》，開始萌生另一種閱讀角度。&lt;/p&gt;

&lt;p&gt;人性的角度。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/surf.jpg&#34; alt=&#34;衝浪者的哲學&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/surf.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;衝浪者的哲學&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這次回訓，一席「衝浪者的哲學」，感覺好像把《鳳凰專案》裡面的許多情境，找到對應的鑰匙。許多推理過程，也隨之清晰起來。&lt;/p&gt;

&lt;p&gt;有夠神奇的。&lt;/p&gt;

&lt;p&gt;可見，有些東西，真的是跨產業的。尤其是人性。&lt;/p&gt;

&lt;p&gt;現在重讀《鳳凰專案》時，私底下也在替每一章取個&lt;a href=&#34;{{ &amp;lt; rel &amp;quot;phoenix-proj-titles.md&amp;quot; &amp;gt;}}&#34;&gt;私房標題&lt;/a&gt;。接下來，會再加把勁兒，自我要求：練習用 Bryan 課堂上教的分析手法，重新分析箇中情節。&lt;/p&gt;

&lt;p&gt;有一本書叫做《&lt;a href=&#34;https://shop.campus.org.tw/ProductDetails.aspx?ProductID=000401708&#34;&gt;聖經好好吃&lt;/a&gt;》，我這種做法，也算是另一種「大人學角度」的「鳳凰專案好好吃」嗎？&lt;/p&gt;

&lt;h2 id=&#34;以終為始&#34;&gt;以終為始&lt;/h2&gt;

&lt;p&gt;上完兩次課，不知不覺會變得雞婆起來，遇到親朋好友的狀況，就會推坑這門課。&lt;/p&gt;

&lt;p&gt;不過，誠如 Joe 在〈&lt;a href=&#34;https://www.darencademy.com/article/view/id/15791&#34;&gt;為何我們很難改變周圍那些愛抱怨的朋友？&lt;/a&gt;〉及〈&lt;a href=&#34;https://www.darencademy.com/article/view/id/16420&#34;&gt;怎麼才能有效安撫找你抱怨的朋友？&lt;/a&gt;〉兩篇文章的善意提醒：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;時常抱怨的人，其實抱怨的目的往往已經不是為了找到解答，而是某種隱含的自豪與炫耀。 而悲慘的境界，則是他自豪的理由！&lt;/p&gt;

&lt;p&gt;當你有朋友不斷來找你抱怨時，如果你很確定他壓根沒打算要跨出安適圈、沒打算做些自我根本上的改變，那你能帶給他最好的幫助，就是給他一個更慘的故事。 讓他們有種「原來我的人生還好」的感覺，進而會因此感覺舒坦。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;許多困境，不是訴諸簡單的自我轉念，就能解決的。這需要看懂局，也認清自己要的到底是什麼；這些都是需要高度理性的運作。&lt;/p&gt;

&lt;p&gt;自我轉念，很多人都這麼說、也這麼建議他人；可是，往往只是淪為自我催眠。最後，還是走回新亭對泣的迴圈。&lt;/p&gt;

&lt;p&gt;改變，是有方法的；但首先要先自問：自己真的想改變嗎？&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/06/career-goals.jpg&#34; alt=&#34;三大目的&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/06/career-goals.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;三大目的&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;相隔九個月，課堂一開始的「三大目的」便利貼，居然沒有變化。&lt;/p&gt;

&lt;p&gt;我相信，這應該就是我想要的。&lt;/p&gt;

&lt;p&gt;以終為始，莫忘初衷。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>從「改變」角度看《魔戒》</title>
      <link>//william-yeh.net/post/2016/05/change-viewpoint-on-lord-of-rings/</link>
      <pubDate>Wed, 25 May 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/05/change-viewpoint-on-lord-of-rings/</guid>
      
        <description>&lt;p&gt;今年一月，參加 &lt;a href=&#34;http://kojenchieh.pixnet.net/blog&#34;&gt;David Ko&lt;/a&gt; 舉辦的一場敏捷轉型活動，從中學到了一個有趣的分析工具：Lean Change Canvas。&lt;/p&gt;

&lt;p&gt;知道了一個好東西，自然要追本溯源，加深加廣。便研讀相關資料：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kojenchieh.pixnet.net/blog/post/441018775-%E7%B2%BE%E5%AF%A6%E6%94%B9%E8%AE%8A%E7%95%AB%E5%B8%83&#34;&gt;精實改變畫布&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kojenchieh.pixnet.net/blog/post/442550432-firstthing_of_agile_promotion&#34;&gt;推廣敏捷的第一要務是什麼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://leankit.com/blog/2015/02/lean-change-method/&#34;&gt;Lean Change Method: Enabling Lean and Agile Transformations at Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.safaribooksonline.com/library/view/lean-change-livelessons/9780133443912/&#34;&gt;Lean Change LiveLessons (Video Training): Achieving Agile Transformation with Kanban, Kotter, and Lean Startup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此外，也要找機會多演練、多思考，才會內化。於是，隔天我就在公司帶領小組討論任務時，現學現賣。數日後，也順便用在第二梯次 &lt;a href=&#34;http://get.soft-arch.net/ansible&#34;&gt;Ansible Workshop&lt;/a&gt; 課堂上：&lt;/p&gt;

&lt;p&gt;

&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/05/lord-of-rings-example.jpg&#34; alt=&#34;Ansible Workshop 第二梯次&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/05/lord-of-rings-example.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Ansible Workshop 第二梯次&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;mdash; Quote: &lt;a href=&#34;https://twitter.com/brecht/status/686004657085231104&#34;&gt;Brecht&amp;rsquo;s Tweet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;之後，再歷經第三、四、五梯次的 Ansible Workshop 的演練引導，不僅更了解 Lean Change Canvas 適用時機，也發展出有助於聚焦的配套措施：說故事、&lt;a href=&#34;http://www.books.com.tw/products/0010463047&#34;&gt;ORID&lt;/a&gt; 及 &lt;a href=&#34;https://en.wikipedia.org/wiki/Theory_of_constraints&#34;&gt;TOC&lt;/a&gt;。畢竟 Lean Change Canvas 只是個框架，只建議出九個思考面向，但並未具體說明個別面向該如何發想及收斂——這都有待自己再融入其他更針對性的思考工具。&lt;/p&gt;

&lt;p&gt;我的方法是：先用某個耳熟能詳的故事，引介 Lean Change Canvas 九個格子的意涵。此處，我選擇大部分的人都看過電影版或小說版的《魔戒》為引子（應該是吧！），以求連結經驗。接著再拿真正要大家研討的案例，請大家各自照著 Lean Change Canvas 的九個面向去分析。最後的討論高潮，則以 ORID 的焦點討論法，及 TOC 的現況與衝突思辨手法，提煉出改變的共識。&lt;/p&gt;

&lt;p&gt;在可預見的未來，我大概不太會在課堂上，慢慢引導 Lean Change Canvas 的分析流程。因此，我把剛結束的第五梯次 Ansible Workshop 課堂錄影，擷取其中第一段【&lt;strong&gt;從「改變」角度看《魔戒》&lt;/strong&gt;】的引介內容，公開出來，給有興趣進行團隊引導的人參考。&lt;/p&gt;

&lt;p&gt;最後，要感謝 &lt;a href=&#34;http://kojenchieh.pixnet.net/blog&#34;&gt;David Ko&lt;/a&gt; 介紹 Lean Change Canvas 這麼有趣的分析框架，也要感謝過去四個梯次的 Ansible Workshop 學員，讓我有機會實際演練，反芻箇中細節。&lt;/p&gt;

&lt;p&gt;影片全長約 11 分鐘，請慢用。&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Ug5wKl8J2Ng&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>有了 Agile，為什麼還要有 DevOps？</title>
      <link>//william-yeh.net/post/2016/05/devops-a-lean-perspective/</link>
      <pubDate>Tue, 03 May 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/05/devops-a-lean-perspective/</guid>
      
        <description>&lt;p&gt;今晚，受 Agile Community Taiwan 之邀，在 &lt;a href=&#34;https://www.accupass.com/event/1604251622311845219210&#34;&gt;Agile Meetup Taipei&lt;/a&gt; 給了一場演講：【&lt;a href=&#34;http://www.slideshare.net/williamyeh/agile-devops&#34;&gt;有了 Agile，為什麼還要有 DevOps？&lt;/a&gt;】&lt;/p&gt;

&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/05/devops-speech-cover.jpg&#34; alt=&#34;演講現場自拍&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/05/devops-speech-cover.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;演講現場自拍&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;之所以會給這場演講，是因為之前在討論區、演講、講課時，總是會收到這類的 Q&amp;amp;A：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DevOps 是不是在花大錢搞新技術？商業噱頭？&lt;/li&gt;
&lt;li&gt;DevOps 只是大雜燴？&lt;/li&gt;
&lt;li&gt;DevOps 只與 Agile 有關？&lt;/li&gt;
&lt;li&gt;DevOps 就是 Dev 把魔爪伸到 Ops 嗎？&lt;/li&gt;
&lt;li&gt;DevOps 需要改變文化嗎？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;林林總總，不是三言兩語就能回答得完整。雖然之前也寫了幾篇文章試著回答部分問題，但總是不夠全面。&lt;/p&gt;

&lt;p&gt;為了一勞永逸，我試著用以下的角度，完整闡釋個人觀點：&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      演講簡介
    
  &lt;/div&gt;
  

&lt;p&gt;敏捷運動與 DevOps，有某些共同的淵源，但也有不同的偏重取向。&lt;/p&gt;

&lt;p&gt;Agile 陣營的人，常會有個疑問：「聽起來，DevOps 好像只是把 Agile 觸角從 Dev 伸到 Ops 端，只是舊瓶裝新酒？」&lt;/p&gt;

&lt;p&gt;Waterfall 陣營的人，也常會有個疑問：「聽起來，DevOps 好像只是 Agile 那一票人搞出來的；我們 Waterfall 陣營是不玩這一套的。」&lt;/p&gt;

&lt;p&gt;真的是這樣嗎？&lt;/p&gt;

&lt;p&gt;本次活動會以一些小活動、一些小短片，帶領大家從 Lean Thinking 角度，重新審視軟體研發的 value stream。回歸 DevOps 的原點，你將能夠自己給出上述問題的答案。&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;個人觀點，或許主觀，但至少給了一個出發點。尤其台灣似乎還沒有以較核心的 Lean Thinking 角度，好好探討 DevOps，乃至 Agile 的論述。看得到的，多半集中在「&lt;a href=&#34;http://wiki.mbalib.com/zh-tw/%E4%B8%83%E5%A4%A7%E6%B5%AA%E8%B4%B9&#34;&gt;消除七大浪費&lt;/a&gt;」這種角度；但 Lean Thinking 的核心原則，並不只有這個而已。&lt;/p&gt;

&lt;p&gt;我認為，軟體從業人員，有必要好好認識 Lean Thinking 的五大原則：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Value&lt;/li&gt;
&lt;li&gt;Value stream&lt;/li&gt;
&lt;li&gt;Flow&lt;/li&gt;
&lt;li&gt;Pull&lt;/li&gt;
&lt;li&gt;Perfection&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;認識這五大原則，會打通 agile、Scrum、Kanban、DevOps 等新潮名詞的任督二脈。&lt;/p&gt;

&lt;p&gt;不過，Lean Thinking 有些地方，硬是直接說理，言者諄諄，聽者藐藐；最好的方法，還是從遊戲中親身體會。所以在演講現場，我也帶大家玩一場 The Dot Game 的「William 式變形版」。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;演講的投影片在此，希望對大家有所幫助：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/williamyeh/agile-devops&#34;&gt;有了 Agile，為什麼還要有 DevOps？&lt;/a&gt;&lt;/strong&gt;
&lt;iframe
  style=&#34;width: 100%; height: 500px;&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;
  src=&#34;https://www.slideshare.net/slideshow/embed_code/61628527&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;現場實況錄影在此，全長整整 2 小時，請享用：&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/2j3eP55Oygw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>向遊戲學習</title>
      <link>//william-yeh.net/post/2016/04/learn-process-mgmt-by-game/</link>
      <pubDate>Sat, 23 Apr 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/04/learn-process-mgmt-by-game/</guid>
      
        <description>&lt;p&gt;前一篇文章〈&lt;a href=&#34;//william-yeh.net/post/2016/04/learn-from-plant-mgmt/&#34;&gt;向工廠管理致敬&lt;/a&gt;〉提到，最近為了準備一場 Agile/DevOps 演講，我特地研讀了數本原典，希望能對某些核心的思考元素來一場溯源之旅。&lt;/p&gt;

&lt;p&gt;啃原典，其實還有另一個原因：為了好好替今天要去大玩特玩的&lt;strong&gt;小火車遊戲&lt;/strong&gt;⋯⋯喔，不，是為了替今天要專程去上的一門【&lt;a href=&#34;https://www.projectup.net/activity/view/id/7689&#34;&gt;102 流程設計與跨部門溝通&lt;/a&gt;】課程預作準備。&lt;/p&gt;

&lt;p&gt;盯上這門課，其實已經很久了&lt;/p&gt;

&lt;p&gt;。只是這門課⋯⋯摘錄一段課程文案：「只有二十二個席次，因為道具很多，所以約每半年才開設一次公開班，錯過就要等很久了喔！」這是真的，上一梯次我時間不允許，所以後來緊盯著這一梯次開放報名的風吹草動，委實不易呀！&lt;/p&gt;

&lt;p&gt;上含金量這麼高的實作課程，不事先自我裝備一下，就太浪費了。&lt;/p&gt;

&lt;p&gt;當然啦，上課時，我還是盡量提醒自己要心態歸零，避免那些偷練的知識變成先入為主的反射思考，這樣才有更多 unknown unknown 可學。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/04/102-opening.jpg&#34; alt=&#34;102 - 開場白&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/04/102-opening.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;102 - 開場白&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;這門課，從實際的小火車遊戲中，讓我結結實實體會到書中講的一堆觀念：&lt;/p&gt;

&lt;p&gt;《&lt;a href=&#34;http://www.books.com.tw/products/0010562789&#34;&gt;目標&lt;/a&gt;》書中講的 &lt;a href=&#34;https://www.projectup.net/article/view/id/3124&#34;&gt;TOC 聚焦五步驟&lt;/a&gt;，是真的。&lt;/p&gt;

&lt;p&gt;《&lt;a href=&#34;http://www.books.com.tw/products/0010662172&#34;&gt;精實革命&lt;/a&gt;》書中講的&lt;a href=&#34;http://www.cardiff.ac.uk/lean/principles/&#34;&gt;精實思考五原則&lt;/a&gt;，是真的。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Toyota_Production_System&#34;&gt;豐田生產系統&lt;/a&gt;所講究的現地現物、自働化、看板、防呆、5S、反省⋯⋯，是真的。&lt;/p&gt;

&lt;p&gt;甚至連以前上 PMBOK 課程看到的一堆令人生厭的 &lt;a href=&#34;http://www.pmexamsmartnotes.com/how-to-remember-ittos-of-all-47-pmbok-processes/&#34;&gt;ITTO&lt;/a&gt;，也看到在組織執掌分工下的真義。&lt;/p&gt;

&lt;p&gt;所以，不要小看小孩子玩的小火車；道在屎溺，不可不察也！&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/04/102-scene-1.jpg&#34; alt=&#34;102 - 第一回合&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/04/102-scene-1.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;102 - 第一回合&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;整天課程分兩回合進行。第一回合是由學生自己構思方法、執行，並自行檢討；這一回合，講師都先不予提示。&lt;/p&gt;

&lt;p&gt;好精彩的第一回合！和一群各行各業臥虎藏龍的 22 名高手合作，過癮！&lt;/p&gt;

&lt;p&gt;儘管差一點點就達標，但我已經從過程中體會到 lean &amp;amp; TOC 的某些原則。&lt;/p&gt;

&lt;p&gt;這的確是一場和高手合作，很能激盪出火花的體驗活動。也很高興自己貢獻的幾個流程及防呆手法，有派上用場。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/04/102-scene-2.jpg&#34; alt=&#34;102 - 第二回合&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/04/102-scene-2.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;102 - 第二回合&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;等大家都提出檢討報告之後，講師才根據現場觀察，給予精準的提示。此刻，才端出這門課的壓箱寶：品質流程六大手法。&lt;/p&gt;

&lt;p&gt;醍醐灌頂後，大家再度自發地提出改善計畫，重新規劃流程，再進行第二回合：目標不只是達標，更要追求卓越，挑戰加分項目！&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/04/102-certificate.jpg&#34; alt=&#34;102 - 證書&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/04/102-certificate.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;102 - 證書&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;玩了一天小火車，收穫滿滿。&lt;/p&gt;

&lt;p&gt;正題有收穫，也趁機向 Joe &amp;amp; Bryan 請教一些近日思考的疑點。我將把體驗到的思維角度運用在職場上（DevOps 其實非常需要這種綜觀全局的思考方式及流程改善）。&lt;/p&gt;

&lt;p&gt;除了正題收穫之外，也更確定了另一件事：如果想傳達的要點很多，那麼，設計活動時，要選擇在依存關係及統計波動上有某種複雜度的模擬案例（這也是《&lt;a href=&#34;http://www.books.com.tw/products/0010562789&#34;&gt;目標&lt;/a&gt;》書中所提出的切入點）。&lt;/p&gt;

&lt;p&gt;敏捷陣營素以愛玩遊戲著稱。從今天的小火車遊戲中，我也偷學了一些遊戲設計的訣竅，希望以後能運用在團隊身上。&lt;/p&gt;

&lt;p&gt;最後，給一個 call to action：如果你也想親身體驗這麼好玩的遊戲，&lt;a href=&#34;http://www.accupass.com/event/register/1602250738221767316794&#34;&gt;最新梯次 &lt;sup&gt;9&lt;/sup&gt;&amp;frasl;&lt;sub&gt;03&lt;/sub&gt; 已經開放報名&lt;/a&gt;。&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/DmG8VLQTobQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>向工廠管理致敬</title>
      <link>//william-yeh.net/post/2016/04/learn-from-plant-mgmt/</link>
      <pubDate>Fri, 22 Apr 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/04/learn-from-plant-mgmt/</guid>
      
        <description>&lt;p&gt;身為徹頭徹尾的軟體人，在軟體產業待久了，總會對「硬」一點的產業，尤其是製造業，有莫名的成見，以為他們是僵固的、反人性的。從 1972 年「&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_crisis&#34;&gt;軟體危機&lt;/a&gt;」引發的論述當中，更加深軟體人的印象：製造業的經驗，是無法直接套用到軟體界的；我們是截然不同的國度。&lt;/p&gt;

&lt;p&gt;不過，近十年來許多軟體界的流程改革，尤其是同屬 Agile 陣營的 Scrum 及 Kanban，居然有許多元素是從製造業&lt;del&gt;偷竊&lt;/del&gt;學習而來。譬如說&lt;/p&gt;

&lt;p&gt;，由 Toyota 引領風潮的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Lean_manufacturing&#34;&gt;Lean Production&lt;/a&gt; 及 &lt;a href=&#34;https://en.wikipedia.org/wiki/Just-in-time_manufacturing&#34;&gt;JIT&lt;/a&gt;、從 &lt;a href=&#34;https://en.wikipedia.org/wiki/Theory_of_constraints&#34;&gt;TOC（限制理論）&lt;/a&gt; 學來的流程分析及改善手法，都是相關文獻最常引述的。&lt;/p&gt;

&lt;p&gt;最近為了準備一場 Agile/DevOps 演講，特地研讀數本原典，對核心元素來一場溯源之旅：&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/04/book-the-goals.jpg&#34; alt=&#34;目標&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/04/book-the-goals.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;目標&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;




&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/04/book-lean-revolution.jpg&#34; alt=&#34;精實方面的書籍&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/04/book-lean-revolution.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;精實方面的書籍&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;溯源之旅，很充實，也很有趣。&lt;/p&gt;

&lt;p&gt;一個有趣的觀察是，儘管 TOC 及 Lean/JIT 兩者有許多交集，合併服用的人也很多，但雙方的&lt;del&gt;本位主義者&lt;/del&gt;熱情擁護者卻常常各持己見。譬如說，《&lt;a href=&#34;http://www.books.com.tw/products/0010562789&#34;&gt;目標&lt;/a&gt;》審訂者在導讀中批評 JIT 的效用：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;八十年代，日本的「及時生產觀念」(JIT, Just In Time) 令日本製造業面貌一新，帶給美國莫大的威脅，一時間，美國企業在濃烈的危機感下，紛紛學習，並如法炮製，但效果始終有限。&lt;/p&gt;

&lt;p&gt;作者高德拉特博士強烈地認為，單靠抄襲沒有用，一定要闖出一條優於 JIT 的路才行，況且，絕大部分企業根本沒有條件和資源作 JIT 所需的巨額投資。本書所描述的「鼓—緩衝—繩子」(drum—buffer—rope)、「緩衝管理」(buffer management) 及 TOC 的各種觀念，就被業界評為比 JIT 更實用和快速見效的方法，而且投資少。美國福特汽車的電子部在花鉅資實行了兩年 JIT 後，發覺產品的生產期只縮短了少許，落後日本仍然甚遠，於是決定改用 TOC，在一年內就遠遠拋離對手。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而精實理論重鎮 &lt;a href=&#34;http://www.lean.org/&#34;&gt;LEI&lt;/a&gt; 出版的《&lt;a href=&#34;http://www.books.com.tw/products/0010339196&#34;&gt;學習觀察&lt;/a&gt;》，則批評 TOC 只有孤立效果，不是全面的改善：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;當我們在 1996 年秋初次發行《&lt;a href=&#34;http://www.books.com.tw/products/0010662172&#34;&gt;精實革命&lt;/a&gt;》時，我們敦促讀者要以大野耐一及豐田系統的其他開拓者的精神去「實踐它」。 [&amp;hellip;] 遺憾的是，我們發現採納我們循序漸進建議的人不多，往往在一頭鑽進消除浪費的工作之前，沒有認真地完成這關鍵的一步。&lt;/p&gt;

&lt;p&gt;這種急進性的改善和令人失望的結果，使得精實又像另一個無疾而終的運動，過了一段日子就被束之高閣，取而代之是像「消除瓶頸」（根據「制約理論」）或者六標準差方案，或者其他種種改善專案。但是這些項目都帶來了同樣的結果，在某些孤立的部分戰勝了浪費，其中的一部分甚至很有成效，但他們都不能成功地全面改善。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果有機會安排他們齊聚一堂&lt;del&gt;鬥嘴&lt;/del&gt;交流，一定很有趣。&lt;/p&gt;

&lt;p&gt;補充說明一下：高德拉特本人，對大野耐一可是推崇備至喔！&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;看了原典，想再看看有現場實務經驗的教練，是如何統合運用這些原理，尤其是不預設立場、善於提問引導的教練。&lt;/p&gt;

&lt;p&gt;《林俊哲的廠長教室》系列，就是如此趣味橫生的大補帖。尤其是〈工廠補習班〉系列文章：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.sina.com.cn/s/blog_a4c01d4a0102vryc.html&#34;&gt;工廠的口號洞悉管理的缺失&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.sina.com.cn/s/blog_a4c01d4a0102vryf.html&#34;&gt;一個作業站反映工廠穩不穩定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://willy0936.blogspot.com/2014/12/blog-post_4.html&#34;&gt;一眼看出沒有效率的工廠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://willy0936.blogspot.com/2018/05/blog-post.html&#34;&gt;工廠管理到底應該管什麼？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://willy0936.blogspot.com/2014/12/blog-post_8.html&#34;&gt;工廠管理走一遭&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://willy0936.blogspot.com/2014/12/blog-post_67.html&#34;&gt;「自動化」與「流水線」的迷失&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://willy0936.blogspot.com/2014/12/blog-post_72.html&#34;&gt;工廠管理教戰守則（全文）&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;簡直就是把 TOC、Lean、JIT 等原理重組統整的問答錄。極力建議看完上述原典的人，跟著這些問答錄，一起思辨、活用。&lt;/p&gt;

&lt;p&gt;看完之後，我還要好好思考，是否適合套用在軟體研發管理身上⋯⋯&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>多工切換：有趣的 Lean 觀點</title>
      <link>//william-yeh.net/post/2016/03/lean-perspective-of-multitasking/</link>
      <pubDate>Tue, 29 Mar 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/03/lean-perspective-of-multitasking/</guid>
      
        <description>&lt;p&gt;系統思考，全局思考，是困難的；即使是貌似常識的場域，亦然。&lt;/p&gt;

&lt;p&gt;最近在看 &lt;a href=&#34;https://www.books.com.tw/products/0010662172&#34;&gt;&lt;em&gt;Lean Thinking&lt;/em&gt;&lt;/a&gt; 原典時，感觸更深。&lt;/p&gt;

&lt;div class=&#34;box&#34; style=&#34;max-width:15em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/03/lean-thinking.jpg&#34; alt=&#34;精實革命 (Lean Thinking)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/03/lean-thinking.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;精實革命 (Lean Thinking)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Lean Thinking&lt;/em&gt; 倡議小批量 (small batch)、單件流 (one piece flow) 工作方式；這種工作方式，會觸及到多工、工作切換的議題。&lt;/p&gt;

&lt;p&gt;以常識來說，多工、工作切換，代價是 context switch 的 overhead。因此，近代敏捷開發方法論，總是希望在制度設計上盡量降低工作切換：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;當知識工作者有三件或四件以上的工作要做，他們花費在工作切換時，所需重新設定工作模式的時間，會比實際花費在每件工作上的時間還要來的長。
&amp;mdash; 《&lt;a href=&#34;http://www.books.com.tw/products/0010549884&#34;&gt;笑談軟體工程：敏捷開發法的逆襲&lt;/a&gt;》 p.180&lt;/p&gt;

&lt;p&gt;多工是一種浪費，給員工同時間分配多種工作是專案產生浪費的一個根源。軟體開發人員每次在轉換工作時都會浪費大量的調換時間，因為他必須調整思路以便投入新的任務流程。當然，若是你同時參與多個開&lt;br /&gt;
發團隊的話，自然會造成更多的停頓，從而引起更多的任務調換而浪費更多時間。
&amp;mdash; 《&lt;a href=&#34;http://www.books.com.tw/products/0010669225&#34;&gt;精實開發與看板方法&lt;/a&gt;》 p.11&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;原本我也把它當成不證自明的常識。不過，偶然看到 &lt;em&gt;Lean Thinking&lt;/em&gt; 提到的一項實驗，大大顛覆我的成見。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;先看一段 Ron Pereira 根據 &lt;em&gt;Lean Thinking&lt;/em&gt; 書中所提的實驗，錄的一段影片：&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Bi9R1Hqr8dI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;單一動作，反覆做，練成不經大腦思考的機械式反應時，理論上，單一動作的效率會極大化。這也是科學管理之夫泰勒的觀點。&lt;/p&gt;

&lt;p&gt;所以，看了這段實驗，真是令人咋舌。&lt;/p&gt;

&lt;p&gt;兩年後，他又重做了一次實驗：&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Dr67i5SdXiM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;實驗設計上，瑕疵當然很多，就連隨機對照實驗都沒做。不過，個人認為，實驗設計完美與否，並不是此例想彰顯的重點。它想彰顯的，都在第一段影片的小標上。&lt;/p&gt;

&lt;p&gt;我們當然可以坐下來徹底分析：違反直覺的第二種方法，為什麼反而比較快（儘管這可能只是後見之明）。不過，這實驗已經突顯一件事：「工作切換」這件事情的影響，可能需要重新思考；不能只從微觀的局部角度，更要從整體、flow 的角度去檢視。&lt;/p&gt;

&lt;p&gt;單純以「工作切換」這件事，換個 Lean Thinking 思維角度，就能得出違反直覺的結果。天知道還有多少尚未被推翻的「不證自明的常識」呢？&lt;/p&gt;

&lt;p&gt;整體 vs 局部的判斷，委實不能等閒視之呀。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>POLP：最小權限原則</title>
      <link>//william-yeh.net/post/2016/03/polp-intro/</link>
      <pubDate>Tue, 15 Mar 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/03/polp-intro/</guid>
      
        <description>&lt;p&gt;在我開的 &lt;a href=&#34;http://get.soft-arch.net/ansible/&#34;&gt;Ansible Workshop&lt;/a&gt; 中，不管是課前的【許願池】，還是課程現場的 Q&amp;amp;A，總有一個熱門議題：「如何確保系統是安全的？」&lt;/p&gt;

&lt;p&gt;這是大哉問，不是單獨一門組態管理課就能探討到令人滿意的地步（資安也不是我所擅長的⋯⋯）。不過，被問到的次數太多了，我還是給個簡單的導引吧。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;系統安全有許多層次。以 &lt;a href=&#34;https://www.safaribooksonline.com/library/view/learning-linux-security/9781771374194/&#34;&gt;&lt;em&gt;Learning Linux Security&lt;/em&gt;&lt;/a&gt; 教學課程的大綱來看，至少涵蓋幾個層次：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Booting：作業系統開機環節&lt;/li&gt;
&lt;li&gt;Kernel：作業系統核心&lt;/li&gt;
&lt;li&gt;Services：典型系統服務&lt;/li&gt;
&lt;li&gt;Users and permissions：帳號及權限&lt;/li&gt;
&lt;li&gt;Firewalls：防火牆&lt;/li&gt;
&lt;li&gt;Logging and log management：日誌管理&lt;/li&gt;
&lt;li&gt;Intrusion detection and prevention：入侵偵測及預防&lt;/li&gt;
&lt;li&gt;Utilities：診斷工具&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各個環節，都有各自專門知識及輔助工具（我就說這是大哉問吧⋯⋯）。這些都是傳統 admin 或 ops 的責任區。&lt;/p&gt;

&lt;p&gt;不過，即使不是專業的 ops，身為一位 dev，至少有兩點是自己的責任區，需要好好掌握的。&lt;/p&gt;

&lt;p&gt;首先是 &lt;strong&gt;Users and permissions 環節&lt;/strong&gt;。近年來流行的軟體設計方式，部署時，常常不會 100% 寄生在 Apache、Nginx、Tomcat 這些 application container 底下，而是像 PHP 的 &lt;a href=&#34;http://php-fpm.org/&#34;&gt;FPM 模式&lt;/a&gt;、Python 的 &lt;a href=&#34;http://gunicorn.org/&#34;&gt;Gunicorn 模式&lt;/a&gt;、Ruby 的 &lt;a href=&#34;http://unicorn.bogomips.org/&#34;&gt;Unicorn 模式&lt;/a&gt;，有一個或多個協同作業的 process；甚至像 Node.js 或 Java 硬漢，往往不假外力，直接就把程式本身設計成 daemon 了。此時，開發者就不能逃避，必須考慮如何設定該軟體的帳號及權限，包括 process 的 UID、GID，以及相關的檔案目錄存取權限。&lt;/p&gt;

&lt;p&gt;其次是 &lt;strong&gt;Services 環節&lt;/strong&gt;。以 daemon 形式存在的軟體，通常會安裝成 service，透過 &lt;a href=&#34;https://en.wikipedia.org/wiki/Init&#34;&gt;SysV init&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/Upstart&#34;&gt;Upstart&lt;/a&gt; 或 &lt;a href=&#34;https://en.wikipedia.org/wiki/Systemd&#34;&gt;systemd&lt;/a&gt; 等機制啟動與管理。這時，也必須連帶把前述的帳號權限處理好。有潔癖的，甚至還會加掛 &lt;a href=&#34;https://en.wikipedia.org/wiki/Chroot&#34;&gt;chroot&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/AppArmor&#34;&gt;AppArmor&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/Security-Enhanced_Linux&#34;&gt;SELinux&lt;/a&gt; 等嚇人的保護機制。&lt;/p&gt;

&lt;p&gt;對於帳號權限不知道該如何設定的人，通常最好的方式是：觀摩別人是怎麼做的，尤其是經典級的 services。&lt;/p&gt;

&lt;p&gt;我們就在 Ubuntu 14.04 裡面，好好觀摩一下吧。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;以 Apache 為例，如果你是透過 &lt;code&gt;apt-get install apache2&lt;/code&gt; 來安裝，可看到它是以 &lt;code&gt;www-data&lt;/code&gt; 的身份來執行 worker process：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;$ ps aux | grep apache2
root      2734  0.0  0.5  73368  2628 ?        Ss   04:36   0:00 /usr/sbin/apache2 -k start
www-data  2737  0.0  0.4 362532  2240 ?        Sl   04:36   0:00 /usr/sbin/apache2 -k start
www-data  2738  0.0  0.4 362532  2240 ?        Sl   04:36   0:00 /usr/sbin/apache2 -k start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以 Nginx 為例，如果你是透過 &lt;code&gt;apt-get install nginx&lt;/code&gt; 來安裝，可看到它也是以 &lt;code&gt;www-data&lt;/code&gt; 的身份來執行 worker process：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;$ ps aux | grep nginx
root      3313  0.0  0.2  85884  1340 ?        Ss   04:44   0:00 nginx: master process /usr/sbin/nginx
www-data  3314  0.0  0.3  86228  1768 ?        S    04:44   0:00 nginx: worker process
www-data  3315  0.0  0.3  86228  1768 ?        S    04:44   0:00 nginx: worker process
www-data  3316  0.0  0.3  86228  1768 ?        S    04:44   0:00 nginx: worker process
www-data  3317  0.0  0.3  86228  1768 ?        S    04:44   0:00 nginx: worker process&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以 MySQL 為例，&lt;span class=&#34;redactor-invisible-space&#34;&gt;如果你是透過 &lt;code&gt;apt-get install mysql-server&lt;/code&gt; 來安裝，可看到它是以 &lt;code&gt;mysql&lt;/code&gt; 的身份來執行：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;$ ps aux | grep mysql
mysql     7004  0.5  8.8 623920 44536 ?        Ssl  04:48   0:00 /usr/sbin/mysqld&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;從以上三個經典案例，可以歸納出一個小結論：「他們都&lt;strong&gt;盡可能不以 root 身分執行&lt;/strong&gt;。」&lt;/p&gt;

&lt;p&gt;這些 &lt;code&gt;www-data&lt;/code&gt; 及 &lt;code&gt;mysql&lt;/code&gt; 帳號，甚至沒有登入的權力：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;$ cat /etc/passwd | egrep &amp;#39;(mysql|www-data)&amp;#39;
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
mysql:x:109:116:MySQL Server,,,:/nonexistent:/bin/false

$ cat /etc/group  | egrep &amp;#39;(mysql|www-data)&amp;#39;
www-data:x:33:
mysql:x:116:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;也沒有偷開 sudo 後門：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;$ sudo cat /etc/sudoers
Defaults    env_reset
Defaults    mail_badpass
Defaults    secure_path=&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;
# User privilege specification
root    ALL=(ALL:ALL) ALL
# Members of the admin group may gain root privileges
%admin ALL=(ALL) ALL
# Allow members of group sudo to execute any command
%sudo    ALL=(ALL:ALL) ALL&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;所以，這些經典級的服務，他們都非常自制，極度限縮自己的權力。&lt;/p&gt;

&lt;p&gt;用更有學問的說法：他們都遵循&lt;strong&gt;最小權限原則&lt;/strong&gt; (&lt;em&gt;principle of least privilege&lt;/em&gt;; POLP)。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;維基百科提到 POLP 的&lt;a href=&#34;https://en.wikipedia.org/wiki/Principle_of_least_privilege#History&#34;&gt;歷史淵源&lt;/a&gt;，可追溯至 1974 年：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every program and every privileged user of the system should operate using the least amount of privilege necessary to complete the job.&lt;/p&gt;

&lt;p&gt;— &lt;a href=&#34;https://en.wikipedia.org/wiki/Jerome_H._Saltzer&#34;&gt;Jerome Saltzer&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Communications_of_the_ACM&#34;&gt;&lt;em&gt;Communications of the ACM&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可見這算是歷久彌新的原則了。&lt;/p&gt;

&lt;p&gt;如果要將 POLP 套用到目前流行的 web application，我引述 &lt;em&gt;Secure Your Node.js Web Application&lt;/em&gt; 一書的&lt;a href=&#34;http://www.safaribooksonline.com/a/secure-your-nodejs/1159941/&#34;&gt;說法&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From our web application standpoint, we have the following rules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The web application should not be run with root privileges. It should instead use a limited account that has access to only the required resources.&lt;/li&gt;
&lt;li&gt;The database account should not be a root account. The account should have limited privileges over the database tables.&lt;/li&gt;
&lt;li&gt;The users of the web application should be given the minimum set of privileges they need.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;也引述《Ruby on Rails 實戰聖經》的&lt;a href=&#34;https://ihower.tw/rails4/deployment.html&#34;&gt;說法&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;設定伺服器部署使用者&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;習慣上我們會在伺服器上開一個專門的帳號，用來放 Rails 應用程式：&lt;code&gt;sudo adduser --disabled-password deploy&lt;/code&gt; ⋯⋯&lt;/p&gt;

&lt;p&gt;本機執行 &lt;code&gt;cap deploy:check&lt;/code&gt;，就會自動登入遠端的伺服器，在登入的帳號下新建 current、releases 和 shared 這三個目錄。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，回頭檢視一下自己的軟體部署流程，有沒有遵循&lt;strong&gt;最小權限原則&lt;/strong&gt;吧！&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>DevOps 核心元素的考古溯源</title>
      <link>//william-yeh.net/post/2016/03/origin-of-devops-elements/</link>
      <pubDate>Mon, 07 Mar 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/03/origin-of-devops-elements/</guid>
      
        <description>&lt;p&gt;DevOps 和 Agile 的關係是什麼？DevOps 是源自 Agile 的嗎？&lt;/p&gt;

&lt;p&gt;我在〈&lt;a href=&#34;//william-yeh.net/post/2016/01/devops-goals-in-a-nutshell/&#34;&gt;一句話囊括 DevOps 的目標&lt;/a&gt;〉文中曾經簡略提過：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps 雖然和 agile 運動有歷史上的臍帶關係，但嚴格來說，沒有遵循《&lt;a href=&#34;http://www.agilemanifesto.org/&#34;&gt;敏捷宣言&lt;/a&gt;》四大原則，也是能做 DevOps 的；硬是把兩個議題綁在一起，會限縮 DevOps 論述空間⋯⋯&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這種&lt;del&gt;分離主義&lt;/del&gt;論點並不是我首創的。iThome 的〈&lt;a href=&#34;http://www.ithome.com.tw/news/96861&#34;&gt;為什麼會出現 DevOps？&lt;/a&gt;〉一開頭也提到，DevOps 的源頭不只有 agile 一系：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps 運動承襲自敏捷系統管理 (Agile System Administration) 運動以及企業系統管理 (Enterprise System Management，ESM) 運動。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不過，我還是想替這種論述，找到更權威、更全面一點的溯源分析。&lt;/p&gt;

&lt;p&gt;終於，我從 &lt;a href=&#34;http://www.amazon.com/dp/0988262592/ref=cm_sw_r_tw_dp_a4p3wb0PSYY97&#34;&gt;&lt;em&gt;The Phoenix Project&lt;/em&gt;&lt;/a&gt; 書中找到想要的論述。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:15em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/03/the-phoenix-project.png&#34; alt=&#34;The Phoenix Project&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/03/the-phoenix-project.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;The Phoenix Project&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/dp/0988262592/ref=cm_sw_r_tw_dp_a4p3wb0PSYY97&#34;&gt;&lt;em&gt;The Phoenix Project&lt;/em&gt;&lt;/a&gt; 這本書，以&lt;a href=&#34;http://www.bookzone.com.tw/event/201108_goldratt/&#34;&gt;高德拉特&lt;/a&gt;那種極受歡迎的企管小說形式，闡述在一個面臨內部外部危機的 IT 組織中，DevOps 能發揮什麼樣的功效。對這本書的背景有興趣的，請讀讀該書作者 Gene Kim 的&lt;a href=&#34;http://www.infoq.com/cn/articles/phoenix-project-book-review&#34;&gt;訪談文章&lt;/a&gt;，或是 Howie 寫的&lt;a href=&#34;http://lab.howie.tw/2016/02/phoenix-project.html&#34;&gt;重點整理&lt;/a&gt;、Ruddy 寫的&lt;a href=&#34;https://ruddyblog.wordpress.com/2016/01/26/the-phoenix-project-%E5%B0%8E%E8%AE%80/&#34;&gt;導讀&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;整本書非常豐富，本篇文章只專門針對該書附錄 &amp;ldquo;&lt;em&gt;Where DevOps Came From&lt;/em&gt;&amp;rdquo; 進行導讀。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;作者如此定調 DevOps：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We refer to &amp;ldquo;DevOps&amp;rdquo; as the outcome of &lt;em&gt;applying Lean principles to the IT value stream&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;出現一個近年來非常潮的字眼——&lt;a href=&#34;http://leanmanufacturingtools.org/39/lean-thinking-lean-principles/&#34;&gt;Lean principles；精實／精益原則&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;這些原則，並不是 IT 界所獨有的，而是取經自其他領域，尤其是製造業：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;These principles are based on more than a century of sound management practices. However, instead of being applied to the transformation of physical goods, we are using these principles to &lt;em&gt;accelerate flow of work through Product Management, Development, Test, IT Operations, and InfoSec.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，DevOps 算是縱貫專案管理、開發、測試、維運、資安等環節的一條鞭精實手法。&lt;/p&gt;

&lt;p&gt;在整個 IT 價值鏈中，DevOps 的確受惠於 agile 陣營對於傳統專案管理的顛覆觀點：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps has benefited tremendously from the work the Agile Community has done, showing how small teams operating with &lt;em&gt;high trust&lt;/em&gt; combined with small batch sizes and &lt;em&gt;smaller, more frequent software releases&lt;/em&gt; can dramatically increase productivity of Development organizations. In fact, many of the key moments in the DevOps history happened at Agile conferences [&amp;hellip;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因此，在技術面來說，DevOps 吸納了以下的 agile 元素：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps extends and builds upon the practices of &amp;ldquo;&lt;em&gt;infrastructure as code&lt;/em&gt;&amp;rdquo; pioneered by Dr. Mark Burgess, as well as &lt;em&gt;continuous integration&lt;/em&gt; and &lt;em&gt;continuous deployment&lt;/em&gt; (pioneered by Jez Humble and David Farley), which is a prerequisite to &lt;em&gt;achieving fast deployment flow&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不過，從這裡可以清楚地看到，DevOps「向 agile 陣營取經」的元素，多半集中在對「加速部署速度」有直接助益的工具元素上。所以，只是一種選擇性的取經。&lt;/p&gt;

&lt;p&gt;另一方面，DevOps 本身也沒有停留在「只向 agile 陣營取經」的階段，仍繼續吸納其他領域的優點。尤其 DevOps 也著重最後一哩路的 &amp;ldquo;Ops&amp;rdquo; 這一端，因此，也向其他國度取經：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps also benefits from an astounding convergence of philosophical management movements, such as &lt;em&gt;Lean Startup&lt;/em&gt;, &lt;em&gt;Innovation Culture&lt;/em&gt;, &lt;em&gt;Toyota Kata&lt;/em&gt;, &lt;em&gt;Rugged Computing&lt;/em&gt;, and the &lt;em&gt;Velocity community&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有趣的是，近年來，許多人再度向日本學習。Agile 陣營的 Kanban 是一例，DevOps 也師法許多 Lean 精神及作法。DevOps 要角 John Willis 甚至還寫了一篇文章 &amp;ldquo;&lt;a href=&#34;http://itrevolution.com/japanese-words-for-devops-practitioners/&#34;&gt;Japanese Terms For DevOps Practitioners&lt;/a&gt;&amp;rdquo; 來介紹這些源自日本的時髦詞彙呢。&lt;/p&gt;

&lt;p&gt;巨變的年代，或許正如作者所說：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All of these mutually reinforce each other, creating the conditions of a &lt;em&gt;powerful coalition of forces&lt;/em&gt; that can accelerate DevOps adoption.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好的東西，會互相吸引，互相融合。屆時，或許就沒有什麼考古的必要；我泥中有你，你泥中有我。就像柯仁傑在〈&lt;a href=&#34;http://kojenchieh.pixnet.net/blog/post/381131219-%E6%95%8F%E6%8D%B7%E5%92%8C%E7%B2%BE%E5%AF%A6%E7%9A%84%E9%97%9C%E4%BF%82-%281%29&#34;&gt;敏捷和精實的關係 (1)&lt;/a&gt;〉一文所說：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;早期敏捷愛好者受到精實的觀念的影響，因此在敏捷世界中也常常出現精實製造的說法。&lt;/p&gt;

&lt;p&gt;所以敏捷跟精實兩者，在軟體開發世界中已經是混合在一起。如果你在實施敏捷，其實代表你也是在套用精實，兩者是無法很清楚地分開來。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>電腦界的隱喻：組態管理</title>
      <link>//william-yeh.net/post/2016/03/metaphor-in-cm/</link>
      <pubDate>Wed, 02 Mar 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/03/metaphor-in-cm/</guid>
      
        <description>&lt;p&gt;人類是很喜愛比喻／譬喻的。戰國時代的莊子愛用譬喻，常和莊子抬槓的惠施也愛譬喻，《說苑‧善說》甚至記載著這麼一段故事：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;客謂梁王曰：「惠子之言事也，善譬。王使無譬則不能言矣。」王曰：「諾。」&lt;/p&gt;

&lt;p&gt;明日見， 謂惠子曰：「願先生言事則直言耳，無譬也。」惠子曰：「今有人於此而不知彈者，曰：『彈之狀何若？』應曰：『彈之狀如彈。』則諭乎？」王曰：「未諭也。」 「於是更應曰：『彈之狀如弓，而竹為弦』，則知乎？」王曰：「可知矣。」&lt;/p&gt;

&lt;p&gt;惠子曰：「夫說者固以其所知，喻其所不知，而使人知之。今王曰無譬，則不可矣。」 王曰：「善。」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用譬喻反擊「無譬也」的要求，真是高招！&lt;/p&gt;

&lt;p&gt;比喻／譬喻不只是修辭法，甚至是人類根深蒂固的認知媒介。認知語言學大師 George Lakoff 在 &lt;a href=&#34;http://www.amazon.com/dp/0226468011/ref=cm_sw_r_tw_dp_yQP1wb1VDN24N&#34;&gt;&lt;em&gt;Metaphors We Live By&lt;/em&gt;&lt;/a&gt; 書中，如此闡述它的地位：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Metaphor is not just a matter of language of mere words. We shall argue that, on the contrary, human &lt;em&gt;&lt;strong&gt;thought processes&lt;/strong&gt;&lt;/em&gt; are largely metaphorical.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，每次看到有趣的隱喻，我都會特別留意，細細品味背後的巧思。&lt;/p&gt;

&lt;p&gt;電腦界也很愛用隱喻，甚至還會帶出成群的隱喻。&lt;/p&gt;

&lt;p&gt;Java 之名，取材自咖啡。JavaScript 雖然並非嫡傳血脈，但由它衍生出來的其他技術，有些就刻意以「咖啡」為隱喻。像美化 JavaScript 語法的 &lt;a href=&#34;http://coffeescript.org/&#34;&gt;CoffeeScript&lt;/a&gt;、供 JavaScript 使用的測試框架 &lt;a href=&#34;https://mochajs.org/&#34;&gt;Mocha&lt;/a&gt;，甚至連咖啡的對手：&lt;a href=&#34;https://mochajs.org/&#34;&gt;Chai&lt;/a&gt; 都搬出來了。&lt;/p&gt;

&lt;p&gt;組態管理的四大工具，也是愛用隱喻的。&lt;/p&gt;

&lt;p&gt;Ansible 主要的隱喻是&lt;strong&gt;演戲&lt;/strong&gt;。所以，在 Ansible 劇場中，策劃好的動作及姿勢叫做 &lt;strong&gt;play&lt;/strong&gt;，集合起來就是 &lt;strong&gt;playbook&lt;/strong&gt;（劇本）。人生就是戲，演不完的戲；在舞台上，每一台主機扮演一個或多個 &lt;strong&gt;role&lt;/strong&gt;（角色），甚至還有天外飛來一筆的空降角色 —— 來自 &lt;strong&gt;galaxy&lt;/strong&gt;（銀河系）。&lt;/p&gt;

&lt;p&gt;Chef 主要的隱喻是&lt;strong&gt;廚師&lt;/strong&gt;。所以，在 Chef 世界中，珍藏厚厚的 &lt;strong&gt;cookbook&lt;/strong&gt;（食譜），根據裡面記載的 &lt;strong&gt;recipe&lt;/strong&gt;（料理步驟），用 &lt;strong&gt;knife&lt;/strong&gt;（菜刀）做菜，也有一個 &lt;strong&gt;kitchen&lt;/strong&gt;（廚房）可以實驗料理。&lt;/p&gt;

&lt;p&gt;Puppet 主要的隱喻是&lt;strong&gt;傀儡&lt;/strong&gt;、&lt;strong&gt;偶戲&lt;/strong&gt;。可惜的是，在 Puppet 舞台上出現的概念：manifest、resource、module、master、agent，似乎都沒有善用最初的隱喻。&lt;/p&gt;

&lt;p&gt;Salt 主要的隱喻是⋯⋯&lt;strong&gt;鹽&lt;/strong&gt;。可惜的是，在 Salt 世界中出現的概念：salt state、formula、master、minion，似乎都沒有善用最初的隱喻。嗯，&amp;rdquo;formula&amp;rdquo; 字眼，勉強算有沾到邊。&lt;/p&gt;

&lt;p&gt;呃，我要修正前面那一句話：「組態管理的四大工具當中，Ansible 和 Chef 也是愛用隱喻的。」&lt;/p&gt;

&lt;p&gt;或許這也是我對 Ansible 及 Chef 比較有好感的原因吧。&lt;/p&gt;

&lt;p&gt;最後，如果你想對這四大工具有個快速的概念，可參考 Roland Wolters 製作的單頁掛圖：&lt;a href=&#34;http://wall-skills.com/2015/configuration-management-ansible-salt-chef-puppet/&#34;&gt;Tools for Configuration Management&lt;/a&gt;。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/03/Ansible-Salt-Puppet-Chef-Wall-Skills.png&#34; alt=&#34;Tools for Configuration Management&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/03/Ansible-Salt-Puppet-Chef-Wall-Skills.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Tools for Configuration Management&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>一句話囊括 DevOps 的目標</title>
      <link>//william-yeh.net/post/2016/01/devops-goals-in-a-nutshell/</link>
      <pubDate>Fri, 29 Jan 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/01/devops-goals-in-a-nutshell/</guid>
      
        <description>&lt;p&gt;TL;DR&lt;br /&gt;
&lt;em&gt;DevOps is a set of practices intended to reduce the time between committing a change to a system and the change being placed into normal production, while ensuring high quality.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;我在許多演講場合，都喜歡調侃 DevOps 百家爭鳴各言爾志的現況。尤其是像 XebiaLabs 的 &amp;ldquo;&lt;a href=&#34;https://xebialabs.com/periodic-table-of-devops-tools/&#34;&gt;Periodic Table of DevOps Tools&lt;/a&gt;&amp;ldquo;，用化學元素週期表來類比，傳神極了！&lt;/p&gt;

&lt;p&gt;調侃歸調侃，但總還是得選一套說法當參考座標，議題定位才能明確。我也不喜歡太欠缺客觀性的打高空調調，尤其是涉及組織文化層面的論調。畢竟，DevOps 雖然和 agile 運動有歷史上的臍帶關係，但嚴格來說，沒有遵循《&lt;a href=&#34;http://www.agilemanifesto.org/&#34;&gt;敏捷宣言&lt;/a&gt;》四大原則，也是能做 DevOps 的；硬是把兩個議題綁在一起，會限縮 DevOps 論述空間，很容易挑起 &amp;ldquo;it doesn&amp;rsquo;t work here&amp;rdquo; 的防禦心態。&lt;/p&gt;

&lt;p&gt;推廣新觀念，就要從阻力最小的角度切入。&lt;/p&gt;

&lt;p&gt;因此，我在去年 12 月 Container Summit 2015 講〈&lt;a href=&#34;http://www.slideshare.net/williamyeh/dockers-impact-on-the-devops-toolchain&#34;&gt;擁抱或對抗？談 Docker 對傳統 DevOps 工具鏈的衝擊&lt;/a&gt;〉時，首次搬出 Brian Brazil 在 &amp;ldquo;&lt;a href=&#34;http://www.robustperception.io/do-you-have-basic-infrastructure/&#34;&gt;Do you have basic infrastructure?&lt;/a&gt;&amp;rdquo; 一文提出的三問句來破題：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You need to know:&lt;br /&gt;
1. How to recreate your system&lt;br /&gt;
2. How to safely change your system&lt;br /&gt;
3. When something has gone wrong&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;蘇格拉底式問句，不夾帶特定前提，不偷渡既定結論，很適合拿來引導團隊思考。因此，後來我在〈&lt;a href=&#34;//william-yeh.net/post/2015/12/devops-1st-step/&#34;&gt;DevOps 是圓的，找到立足點就是頂點&lt;/a&gt;〉文章、在 &lt;a href=&#34;http://get.soft-arch.net/ansible/&#34;&gt;Ansible Workshop 課堂&lt;/a&gt;上，也反覆用到這三問句。&lt;/p&gt;

&lt;p&gt;不過，私心還是希望能有一個更直述、更目標導向的操作型定義。&lt;/p&gt;

&lt;p&gt;找了很久，偶然在 2015 年 SEI 系列的新書 &lt;a href=&#34;http://www.amazon.com/dp/0134049845/ref=cm_sw_r_tw_dp_bB.Qwb0FF6QRZ&#34;&gt;&lt;em&gt;DevOps: A Software Architect&amp;rsquo;s Perspective&lt;/em&gt;&lt;/a&gt; 第一章，發現我想要的操作型定義了。&lt;/p&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2016/01/devops-from-architect-perspective.png&#34; alt=&#34;DevOps: A Software Architect&amp;#39;s Perspective&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2016/01/devops-from-architect-perspective.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;DevOps: A Software Architect&amp;#39;s Perspective&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;SEI 這塊金字招牌，乍看之下會以為又要端出像 CMMI、PSP 那樣硬梆梆的東西。不過，瞄到書名當中有 &amp;ldquo;A Software Architect&amp;rsquo;s Perspective&amp;rdquo; 字眼，就覺得應該比較貼近第一線的實務現場。&lt;/p&gt;

&lt;p&gt;他們的切入角度是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Our definition of DevOps focuses on the &lt;strong&gt;goals&lt;/strong&gt;, rather than the &lt;strong&gt;means&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很多時候，先聚焦在共有的目標上，會比過早陷入細部做法的爭論來得有用。&lt;/p&gt;

&lt;p&gt;從「目標」角度出發，再對 DevOps 下定義，更顯得客觀中立。畢竟，不管是大機構還是小團隊，不管背後採用哪一種軟體開發流程，都能接受以下這種 DevOps 目標：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps is a set of &lt;em&gt;practices&lt;/em&gt; intended to &lt;strong&gt;reduce the time between committing a change to a system and the change being placed into normal production, while ensuring high quality&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這跟前面那三問句是相互呼應的，只不過這一回用的是更直述、更目標導向的操作型定義。&lt;/p&gt;

&lt;p&gt;這段定義陳述，點出 DevOps 兩大目標：&lt;strong&gt;時間&lt;/strong&gt;及&lt;strong&gt;品質&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;時間：在「commit change」到「上線營運生效」兩者之間的時間差，要盡量縮短到某個設定的水平之內。&lt;/li&gt;
&lt;li&gt;品質：不能只求上線生效，還要對品質把關，維持在某個設定的水平之上。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;弄清楚 DevOps 的目標後，再看 DevOps 圈子倡議的 practices，就不覺突兀：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Treat Ops as first-class citizens from the point of view of requirements.&lt;/li&gt;
&lt;li&gt;Make Dev more responsible for relevant incident handling. These practices are intended to shorten the time between the observation of an error and the repair of that error.&lt;/li&gt;
&lt;li&gt;Enforce the deployment process used by all, including Dev and Ops personnel.&lt;/li&gt;
&lt;li&gt;Use continuous deployment.&lt;/li&gt;
&lt;li&gt;Develop infrastructure code, such as deployment scripts, with the same set of practices as application code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;這五項 practices，都可以回溯到先前設定的 DevOps 兩大目標：時間及品質。&lt;/p&gt;

&lt;p&gt;當然啦，同一份目標，可能衍生出不同的實作手法；此時此刻公認的 best practices，也可能在不久就被推翻。書中建議我們可以根據幾點來評估：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is the particular practice you are considering?&lt;/strong&gt;&lt;br /&gt;
這家 DevOps 百貨公司，大肆推銷的東西太多了，必須先針對組織的需求及現況加以評估、排序。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;What other practices are implicit in the practice you are considering?&lt;/strong&gt;&lt;br /&gt;
某些措施有隱含的前提。譬如說，想實現 continuous deployment 之前，不可能不先做 continuous integration。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is the culture of your business, and what are the ramifications of your adopting this particular DevOps practice?&lt;/strong&gt;&lt;br /&gt;
任何改變都有受到波及的對象，所以，想導入任何改變，都不能忽略組織及人性的抗拒力道。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;這就是 SEI 出版的書 &lt;a href=&#34;http://www.amazon.com/dp/0134049845/ref=cm_sw_r_tw_dp_bB.Qwb0FF6QRZ&#34;&gt;&lt;em&gt;DevOps: A Software Architect&amp;rsquo;s Perspective&lt;/em&gt;&lt;/a&gt; 當中的第一章，對於 DevOps 下的目標導向定義，以及隨之鋪陳的實踐手法及考量依據。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>DevOps 是圓的，找到立足點就是頂點</title>
      <link>//william-yeh.net/post/2015/12/devops-1st-step/</link>
      <pubDate>Mon, 28 Dec 2015 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2015/12/devops-1st-step/</guid>
      
        <description>&lt;p&gt;自從 IT 相關媒體開始傳頌 2009 年蔚為經典的 Flickr 經驗 “&lt;a href=&#34;https://youtu.be/LdOe18KhtT4&#34;&gt;10+ Deploys per Day&lt;/a&gt;”、2014 年 Marissa Mayer 的鐵桿作風「&lt;a href=&#34;http://www.ithome.com.tw/news/99283&#34;&gt;沒有持續交付，專案不得上線，我不是在說笑&lt;/a&gt;」之後，頓時 DevOps 成為 IT 界新的焦慮源。我還聽說有高層在聽完兩天 &lt;a href=&#34;https://www.ithome.com.tw/article/98527&#34;&gt;DevOps 2015 研討會&lt;/a&gt;之後，回頭要求 IT 部門要師法 2009 年的 Flickr 做到「10+ Deploys per Day」。&lt;/p&gt;

&lt;p&gt;聽了很潮的新觀念，就訂不合理的 KPI，這也是「負能量」呀！&lt;/p&gt;

&lt;p&gt;本質上，DevOps 是一種文化運動。文化不挪動，流程、工具也無法落地生效。&lt;/p&gt;

&lt;p&gt;如果組織文化充滿壁壘分明的界線，缺少從錯誤中學習的不指責氛圍，只盲目崇尚數字管理、成效管理，那就很難用健康的心態去嘗試新的流程及工具，進而受益。&lt;/p&gt;

&lt;h2 id=&#34;起點&#34;&gt;起點&lt;/h2&gt;

&lt;p&gt;如果組織文化已經做好改變的準備了，流程、工具該怎麼起步呢？&lt;/p&gt;

&lt;p&gt;Bryan 在大人學講座【&lt;a href=&#34;https://shop.darencademy.com/product/view/id/57&#34;&gt;尋找天賦與熱情的系統化做法&lt;/a&gt;】曾提到一個觀點：「世界是圓的，找到立足點就是頂點。」&lt;/p&gt;

&lt;p&gt;我也想照樣照句：「DevOps 是圓的，找到立足點就是頂點。」&lt;/p&gt;

&lt;p&gt;我不太信奉放諸四海皆準的方法論、roadmap、步驟。而且，DevOps 真的是圓的，從任何一個契合組織現況的角度切入，都有機會逐步把整塊 DevOps 拼圖補齊。&lt;/p&gt;

&lt;p&gt;譬如說，如果你的組織是研發驅動的，或許從 CI 角度切入，阻力會比較小；這也是稍早兩篇文章〈&lt;a href=&#34;//william-yeh.net/post/2015/12/ci-no-turning-back/&#34;&gt;CI 是條不歸路&lt;/a&gt;〉、〈&lt;a href=&#34;//william-yeh.net/post/2015/12/ci-effect/&#34;&gt;CI 怎樣帶你遠離平庸？&lt;/a&gt;〉的論點。&lt;/p&gt;

&lt;p&gt;當然啦，並不是所有團隊都認為 CI 是他們的當務之急。此時，硬是要推銷 CI 理念或工具，不見得是上策。&lt;/p&gt;

&lt;p&gt;另一個我常拿來進行個案研討的蘇格拉底式問句，是從「&lt;strong&gt;DevOps 的原點&lt;/strong&gt;」來提問。&lt;/p&gt;

&lt;h2 id=&#34;原點&#34;&gt;原點&lt;/h2&gt;

&lt;p&gt;DevOps 的原點是什麼？&lt;/p&gt;

&lt;p&gt;我很喜歡引述 Brian Brazil 在 &amp;ldquo;&lt;a href=&#34;http://www.robustperception.io/do-you-have-basic-infrastructure/&#34;&gt;Do you have basic infrastructure?&lt;/a&gt; 一文的觀點。他提到軟體的基礎架構 (infrastructure)，或大或小，或新或舊，總是要面對以下三則基本問題：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How to recreate your system&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;How to safely change your system&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;When something has gone wrong&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;好好面對這三個問題，不僅讓 DevOps 的核心議題變得無比清晰，更讓團隊自己理出當務之急切身之痛，而不是靠外部&lt;del&gt;名嘴&lt;/del&gt;顧問的通靈神諭。&lt;/p&gt;

&lt;h2 id=&#34;立足點很多-只等你起步&#34;&gt;立足點很多，只等你起步&lt;/h2&gt;

&lt;p&gt;這三個問題，好好搞定，其實已經碰觸到許多 DevOps 技術層面的議題了。&lt;/p&gt;

&lt;p&gt;譬如說，【1. How to recreate your system】至少涉及這些議題：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如何從原始碼變成可執行的軟體？&lt;/li&gt;
&lt;li&gt;如何確定軟體已經是可發佈的品質？&lt;/li&gt;
&lt;li&gt;如何備妥軟體的執行環境？&lt;/li&gt;
&lt;li&gt;如何自動化上述事項？自動化到什麼程度？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果選擇從這裡出發，你就會接觸到 build automation、acceptance test、configuration management 等技術。&lt;/p&gt;

&lt;p&gt;【2. How to safely change your system】至少涉及這些議題：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如何管控原始碼變更？&lt;/li&gt;
&lt;li&gt;如何管控執行環境變更？&lt;/li&gt;
&lt;li&gt;如何確定軟體變更後，仍然是可發佈的品質？&lt;/li&gt;
&lt;li&gt;如何管控新版軟體的部署？&lt;/li&gt;
&lt;li&gt;如何自動化上述事項？自動化到什麼程度？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果選擇從這裡出發，你就會接觸到 Git/GitHub/GitLab flow、configuration management、test automation、continuous integration、continuous deployment 等技術。&lt;/p&gt;

&lt;p&gt;【3. When something has gone wrong】至少涉及這些議題：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如何知道系統出了狀況？&lt;/li&gt;
&lt;li&gt;怎麼樣才叫做「系統出了狀況」？有哪些質化量化指標？&lt;/li&gt;
&lt;li&gt;怎樣處理？&lt;/li&gt;
&lt;li&gt;怎樣復原？&lt;/li&gt;
&lt;li&gt;怎樣預防？&lt;/li&gt;
&lt;li&gt;怎樣集中處理？&lt;/li&gt;
&lt;li&gt;如何自動化上述事項？自動化到什麼程度？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果選擇從這裡出發，你就會接觸到 metrics aggregation、log aggregation、real-time monitoring/dashboard/alert、canary deployment 等技術。&lt;/p&gt;

&lt;p&gt;然後，你從任何一個立足點出發，解決切身之痛，嚐到甜美果實之後，一定會順便對其他相關議題有興趣嘗試、有信心搞定。至於文化議題，也會搭配著碰到。&lt;/p&gt;

&lt;p&gt;譬如說，我的 &lt;a href=&#34;http://get.soft-arch.net/ansible/&#34;&gt;Ansible Workshop 課程&lt;/a&gt;，就是從第一類問題當中的 &amp;ldquo;configuration management&amp;rdquo; 小課題出發，進而發展到 GitHub flow、CI、test automation、canary deployment 等第二、第三類問題。&lt;/p&gt;

&lt;p&gt;這就是文章開頭講的「DevOps 是圓的，找到立足點就是頂點。」&lt;/p&gt;

&lt;h2 id=&#34;不要妄想一步登天-先累積小小的成功&#34;&gt;不要妄想一步登天，先累積小小的成功&lt;/h2&gt;

&lt;p&gt;有人認為，小團隊、新團隊包袱小，身兼數職是常態，無部門界線，先天上就比較容易導入 DevOps 流程。&lt;/p&gt;

&lt;p&gt;但也有人認為，大團隊、老團隊分工細密，各人有各自精深的專職技能，先天上比較容易執行一個個高度專業要求的 DevOps 元素。&lt;/p&gt;

&lt;p&gt;不同環境，看待 DevOps，各有不同的優勢與劣勢。所以，停止抱怨吧。&lt;/p&gt;

&lt;p&gt;導入 DevOps，請先回到 DevOps 的原點。&lt;/p&gt;

&lt;p&gt;我建議，先好好檢視上述的三個問題，嚴肅思考哪些是目前的痛點，哪些是容易有早期成功的項目。然後，賦予團隊充分的嘗試錯誤空間，下手去做。&lt;/p&gt;

&lt;p&gt;做了之後，自然就會發現：這是一條不歸路，&lt;strong&gt;你會不斷接觸『遠離平庸』的新觀點、新技術&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;你再也回不去過去那個老土砲的日子了。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>CI 怎樣帶你遠離平庸？</title>
      <link>//william-yeh.net/post/2015/12/ci-effect/</link>
      <pubDate>Tue, 22 Dec 2015 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2015/12/ci-effect/</guid>
      
        <description>

&lt;p&gt;前天我的文章〈&lt;a href=&#34;//william-yeh.net/post/2015/12/ci-no-turning-back/&#34;&gt;CI 是條不歸路&lt;/a&gt;〉提到：「CI/CD/DevOps 既是條不歸路，更是大躍進之路：一旦踏出第一步，就注定你會不斷接觸&lt;strong&gt;『遠離平庸』&lt;/strong&gt;的新觀點、新技術。」&lt;/p&gt;

&lt;p&gt;為了避免陳義過高，這篇文章就來講一個具體的軟體研發故事吧。&lt;/p&gt;

&lt;h2 id=&#34;護城河&#34;&gt;護城河&lt;/h2&gt;

&lt;p&gt;我用 Ansible，也用 &lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt;，因此，我寫了一個 Ansible role &lt;a href=&#34;https://github.com/William-Yeh/ansible-prometheus&#34;&gt;&lt;code&gt;williamyeh.prometheus&lt;/code&gt;&lt;/a&gt; 來安裝 Prometheus。&lt;/p&gt;

&lt;p&gt;上個禮拜，我隱約覺得對它感興趣的人似乎變多了，便好奇的去 GitHub 後台調數據來看，發現：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;原來是被 Prometheus 官網列入 &amp;ldquo;&lt;a href=&#34;http://prometheus.io/docs/introduction/install/#using-configuration-management-systems&#34;&gt;Using configuration management systems&lt;/a&gt;&amp;rdquo; 清單了，難怪最近 PR 變多，品質更是超越其他幾家 CM 的例子。&lt;/p&gt;

&lt;p&gt;&amp;mdash; Quote: &lt;a href=&#34;https://twitter.com/william_yeh/status/676897832071241728&#34;&gt;2015-12-16 Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;被 Prometheus 官方欽點了，能見度提高了，就表示，三不五時會有人提出 bug report，提出 feature request；甚至更勤勞一點的，可能直接就會送出 PR (pull request)。&lt;/p&gt;

&lt;p&gt;面對 PR，其實要花很大的力氣去檢驗：檢驗對錯，檢驗風格，甚至 &lt;a href=&#34;https://en.wikipedia.org/wiki/The_Mythical_Man-Month#Conceptual_integrity&#34;&gt;conceptual integrity&lt;/a&gt;（語出《&lt;a href=&#34;https://en.wikipedia.org/wiki/The_Mythical_Man-Month&#34;&gt;人月神話&lt;/a&gt;》）。而且，對方既然已經很勤勞的送出 PR 了，他會預期你高度重視他的提案。&lt;/p&gt;

&lt;p&gt;我需要一道&lt;strong&gt;護城河&lt;/strong&gt;，讓我不必每次都事必躬親，回應每一則 PR。&lt;/p&gt;

&lt;p&gt;所幸我早就建立好&lt;strong&gt;個人的 discipline&lt;/strong&gt;：要替自己寫的 Ansible role 加上 CI。即使只是做一點點小小的 smoke test，總是聊勝於無。&lt;/p&gt;

&lt;p&gt;CI 是&lt;strong&gt;高度客觀中立&lt;/strong&gt;、&lt;strong&gt;不帶感情&lt;/strong&gt;的守門員。它，幫我初步過濾一些攸關對錯、風格的 PR。於是，我可以優先禮貌性回應已經被 CI 初步打勾放行的 PR；至於被打叉叉的，那就&lt;del&gt;謝謝再聯絡&lt;/del&gt;等有充裕時間精力時再說：&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2015/12/ansible-prometheus-pr.png&#34; alt=&#34;Pull requests&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2015/12/ansible-prometheus-pr.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Pull requests&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;CI，小小的投資，大大的省事。&lt;/p&gt;

&lt;h2 id=&#34;當-ansible-遇見-docker&#34;&gt;當 Ansible 遇見 Docker&lt;/h2&gt;

&lt;p&gt;個人還有另一項執念：自己寫的 Ansible role，要盡可能支援多種 Linux distributions 環境。&lt;/p&gt;

&lt;p&gt;這又是一條不歸路。&lt;/p&gt;

&lt;p&gt;在本機端研發時，我可以用各種 Vagrant box 來模擬各種 Linux （譬如：&lt;a href=&#34;https://app.vagrantup.com/bento/boxes/centos-6.7&#34;&gt;bento/centos-6.7&lt;/a&gt;、&lt;a href=&#34;https://app.vagrantup.com/bento/boxes/centos-7.1&#34;&gt;bento/centos-7.1&lt;/a&gt;、&lt;a href=&#34;https://app.vagrantup.com/debian/boxes/jessie64&#34;&gt;debian/jessie64&lt;/a&gt;），但這沒辦法 scale 到正式的 CI 流程上。此刻 Travis CI 及 CircleCI 只提供 Ubuntu 12.04 及 14.04 兩種 instance，也沒支援 &lt;a href=&#34;http://kitchen.ci&#34;&gt;Test Kitchen&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;所幸 Travis CI 和 CircleCI 都有支援 Docker，因此，我設計了 &lt;a href=&#34;https://github.com/William-Yeh/docker-ansible&#34;&gt;&lt;code&gt;williamyeh/ansible&lt;/code&gt;&lt;/a&gt; 這一系列的 Docker images，可在 Travis CI 及 CircleCI 上面模擬出 CentOS 6 &amp;amp; 7、Debian 7 &amp;amp; 8、Ubuntu 12.04 &amp;amp; 14.04 環境，來測試我的 Ansible roles。&lt;/p&gt;

&lt;p&gt;這下子，我的 CI 護城河就更穩固了。CI 這位&lt;strong&gt;高度客觀中立&lt;/strong&gt;、&lt;strong&gt;不帶感情&lt;/strong&gt;的守門員，協助我冷靜面對以下這則算是大工程等級的 PR，不帶批判情緒的進行對話，一起搞定 CentOS/Ubuntu 雙系統：&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2015/12/pr-discussion.png&#34; alt=&#34;Discussion around a pull request&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2015/12/pr-discussion.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Discussion around a pull request&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;CI，小小的投資，大大的省事。&lt;/p&gt;

&lt;p&gt;對我而言，原本 &lt;code&gt;williamyeh/ansible&lt;/code&gt; 只是為了其他目的而順帶設計出來的副產品。但由於 Ansible 官方已不再維護它的 Docker images；而在非官方版當中，我的 &lt;code&gt;williamyeh/ansible&lt;/code&gt; 下載量居冠（統計數據&lt;a href=&#34;https://hub.docker.com/search/?q=ansible&amp;amp;page=1&amp;amp;isAutomated=0&amp;amp;isOfficial=0&amp;amp;pullCount=1&amp;amp;starCount=0&#34;&gt;在此&lt;/a&gt;），也持續有人提出 feature request⋯⋯該說是無心插柳嗎？&lt;/p&gt;

&lt;h2 id=&#34;吃自己的狗食&#34;&gt;吃自己的狗食&lt;/h2&gt;

&lt;p&gt;再拿另一個很受歡迎的 Ansible role：&lt;a href=&#34;https://github.com/William-Yeh/ansible-oracle-java&#34;&gt;&lt;code&gt;williamyeh.oracle-java&lt;/code&gt;&lt;/a&gt; 為例。它在 Ansible Galaxy 已經得到 &lt;a href=&#34;https://galaxy.ansible.com/william-yeh/oracle-java&#34;&gt;4.8 的高分&lt;/a&gt;，是一個已經為人所知，甚至為人所用的元件。&lt;/p&gt;

&lt;p&gt;因此，我必須維持良好的向後相容性，以對用戶負責。&lt;/p&gt;

&lt;p&gt;也因此，連我自己想對原始程式做更動，也不敢貿然造次。必須遵守 &lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;Git Flow&lt;/a&gt; 或 &lt;a href=&#34;https://guides.github.com/introduction/flow/&#34;&gt;GitHub Flow&lt;/a&gt; 之類的 &lt;strong&gt;workflow discipline&lt;/strong&gt;，一樣要看 CI 這位&lt;strong&gt;高度客觀中立&lt;/strong&gt;、&lt;strong&gt;不帶感情&lt;/strong&gt;的守門員的臉色。&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2015/12/github-graph.png&#34; alt=&#34;Network graph&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2015/12/github-graph.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Network graph&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;專業，就是對自己也有 discipline。CI，就是&lt;strong&gt;強制幫助你建立 discipline&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;不要輕看-ci-的紅燈&#34;&gt;不要輕看 CI 的紅燈&lt;/h2&gt;

&lt;p&gt;對這個 Ansible role，有一點我一直耿耿於懷：Travis CI 和 CircleCI 的測試結果，時好時壞。&lt;/p&gt;

&lt;p&gt;像以下截圖顯示，同樣都是針對 &lt;code&gt;6598bed&lt;/code&gt; 這個 commit，Travis CI 一次就通過，但 CircleCI 居然會出現一堆紅燈。不死心的我，一直按 rebuild 好幾次，總算才出現綠燈：&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2015/12/circleci-error.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2015/12/circleci-error.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;奇怪的是，同樣都是針對 &lt;code&gt;a9c105e&lt;/code&gt; 這個 commit，這回 CircleCI 一次就通過，反倒是 Travis CI 出狀況：&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2015/12/travisci-error.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2015/12/travisci-error.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;前幾天，我終於忍不住出手。&lt;/p&gt;

&lt;p&gt;反覆比對兩邊的 log，發現，Oracle 疑似會對 jdk 下載點做 rate limiting。每次 Travis CI 及 CircleCI 的 CI 大隊一啟動，Oracle 就惱了。&lt;/p&gt;

&lt;p&gt;所以，不是我的 Ansible role 有問題，是 Oracle 太神經兮兮了。&lt;/p&gt;

&lt;p&gt;怪罪 Oracle 於事無補，問題總得解決⋯⋯&lt;/p&gt;

&lt;p&gt;為了解決這問題，我設計一個 prefetch 機制：只向 Oracle 抓一次需要的 rpm 及 tar.gz 檔案，存放在 role 的 &lt;code&gt;files&lt;/code&gt; 目錄裡面。如此一來，不僅避開 rate limiting 的限制，連帶的也降低整體的 build time，更讓整個 role 架構 refactor 得更乾淨。&lt;/p&gt;

&lt;p&gt;CI，小小的投資，大大的省事。&lt;/p&gt;

&lt;h2 id=&#34;卻顧所來徑&#34;&gt;卻顧所來徑&lt;/h2&gt;

&lt;p&gt;這一切的一切，濫觴都只是一個小起步：要替自己寫的 Ansible role 加上 CI。&lt;/p&gt;

&lt;p&gt;一旦踏出第一步，就注定你會不斷接觸&lt;strong&gt;『遠離平庸』&lt;/strong&gt;的新觀點、新技術。&lt;/p&gt;

&lt;p&gt;你同意嗎？&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>CI 是條不歸路</title>
      <link>//william-yeh.net/post/2015/12/ci-no-turning-back/</link>
      <pubDate>Mon, 21 Dec 2015 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2015/12/ci-no-turning-back/</guid>
      
        <description>

&lt;p&gt;今年九月初參加完 &lt;a href=&#34;https://www.ithome.com.tw/article/98527&#34;&gt;DevOps 2015&lt;/a&gt; 之後，有感而發，寫了兩則 tweets：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;說實在的，打從 1999 年 Kent Beck 經典著作 &lt;em&gt;Extreme Programming Explained&lt;/em&gt; 問世，整個軟體文化就被徹底分裂成&lt;strong&gt;兩個國度&lt;/strong&gt;。以 agile best practices 出發的國度，不斷演化至另一個國度難以企及的高度。&lt;br/&gt;
&amp;mdash; Quote: &lt;a href=&#34;https://twitter.com/william_yeh/status/639246537151803392&#34;&gt;2015-09-03 Tweet #1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;這個時代，如果還覺得 DevOps 是 mission impossible，可以說，連 1999 年的&lt;strong&gt;小團隊水準&lt;/strong&gt;都達不到。或許該回頭蹲馬步，好好思考 &lt;em&gt;Extreme Programming Explained&lt;/em&gt; 裡面講的幾個 best practices，有哪些可以嘗試看看。&lt;br/&gt;
&amp;mdash; Quote: &lt;a href=&#34;https://twitter.com/william_yeh/status/639247547307986947&#34;&gt;2015-09-03 Tweet #2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/dp/0321278658/ref=cm_sw_r_tw_dp_UMaEwb1ZRMGT1&#34;&gt;&lt;em&gt;Extreme Programming Explained&lt;/em&gt;&lt;/a&gt; 書中列的 best practices 很多。有些與組織文化及流程息息相關，不見得一開始就能說服眾人採用。其中，我覺得最立竿見影的，與組織文化流程互斥最少的，就是這兩項：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ten-Minute Build&lt;/li&gt;
&lt;li&gt;Continuous Integration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;說來容易，做起來可也得花一番工夫。但這世界上，有些&lt;strong&gt;打地基&lt;/strong&gt;的事，不做，就像不會基本代數，就註定與微積分的境界絕緣。&lt;/p&gt;

&lt;p&gt;CI，就是幫助你打好地基，開啟另一扇窗的手法。&lt;/p&gt;

&lt;h2 id=&#34;打地基的切入點&#34;&gt;打地基的切入點&lt;/h2&gt;

&lt;p&gt;初入這個新國度的人，面對 &lt;a href=&#34;https://en.wikipedia.org/wiki/Agile_software_development&#34;&gt;Agile&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;CI&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_delivery&#34;&gt;CD&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/DevOps&#34;&gt;DevOps&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/Scrum_%28software_development%29&#34;&gt;Scrum&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;TDD&lt;/a&gt;⋯⋯太多神奇咒語，容易一頭霧水，搞不清楚優先順序。&lt;/p&gt;

&lt;p&gt;我不認為有放諸四海皆準的萬靈丹特效藥。如果真的要挑出一項切入手法，就從 &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;CI&lt;/a&gt; 開始吧。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;CI (continuous integration)&lt;/a&gt;，是一條不會過度陷入工具至上的 &amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cargo_cult&#34;&gt;cargo cult&lt;/a&gt;&amp;rdquo; 迷思，又能從某些角度有效撼動既有的流程制度。難怪梅姐 (Marissa Mayer) 會選擇用這條角度切入：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「沒有持續交付 (Continuous Delivery)，專案不得上線，我不是在說笑。」Yahoo 執行長 Marissa Mayer 的宣言。&lt;br /&gt;
&amp;mdash; Quote: &lt;a href=&#34;http://www.ithome.com.tw/news/99283&#34;&gt;【誰說大象不能實現 DevOps】雅虎 97% 專案擁抱持續交付的關鍵&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CI，不管你選用的是當紅的自架工具 &lt;a href=&#34;https://jenkins.io/&#34;&gt;Jenkins&lt;/a&gt;，或託管給 &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;（OSS 專案可免費使用），重點是：請踏出第一步。&lt;/p&gt;

&lt;p&gt;這不只是行動的第一步，也是照妖鏡、試金石。&lt;/p&gt;

&lt;p&gt;初步嘗試 CI，一定會踩到地雷；但你不是第一個踩雷的。我推薦過的好書《&lt;a href=&#34;http://www.books.com.tw/products/0010549884&#34;&gt;笑談軟體工程：敏捷開發法的逆襲&lt;/a&gt;》，就徹底討論過該議題了。摘錄一段當時的推薦文：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;作者感慨：「在臺灣很多試圖採用敏捷方法但卻槓龜的團隊，缺少『&lt;strong&gt;追求技術卓越&lt;/strong&gt;』的精神很有可能是一個主要的原因。」譬如說，如果沒有扎實的「自動化測試」及「持續整合」工夫，那麼，逐漸累積的「測試債」會讓 sprint 制度破功。當然啦，扎實的基本功並非一蹴可幾，作者也勉勵看過本書卻認為自己辦不到的人：「要『傻的願意相信書本裡所說的』，不要在尚未嘗試之前就先否定。」你願意開始嘗試嗎？&lt;br /&gt;
&amp;mdash; Quote: &lt;a href=&#34;https://www.ithome.com.tw/tech/88496&#34;&gt;iThome 2012年 iT人必看的好書&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;手頭沒這本書的，不妨看看以下幾則文章：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://teddy-chen-tw.blogspot.tw/2011/03/ten-minute-build.html&#34;&gt;Ten-Minute Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://teddy-chen-tw.blogspot.tw/2012/07/blog-post.html&#34;&gt;開發人員應遵循的七項持續整合要領&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://teddy-chen-tw.blogspot.tw/2012/07/blog-post_04.html&#34;&gt;持續整合工程師應遵循的十項要領（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://teddy-chen-tw.blogspot.tw/2012/07/blog-post_05.html&#34;&gt;持續整合工程師應遵循的十項要領（下）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不過，對「聰明人」來說，「&lt;strong&gt;傻得願意相信&lt;/strong&gt;」可能是頭一個要面對的關卡吧。&lt;/p&gt;

&lt;p&gt;能否面對該面對的關卡，決定你能否躍遷到更高的層次：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CI/CD/DevOps 既是條不歸路，更是大躍進之路：一旦踏出第一步，就注定你會不斷接觸&lt;strong&gt;遠離平庸&lt;/strong&gt;的新觀點、新技術。&lt;/p&gt;

&lt;p&gt;至於背後是不是跑 agile，反而不那麼絕對了。&lt;/p&gt;

&lt;p&gt;屢屢從自己與別人演講、教育訓練、Q&amp;amp;A 中歸納出來的心法……&lt;br /&gt;
&amp;mdash; Quote: &lt;a href=&#34;https://twitter.com/william_yeh/status/678524911351029760&#34;&gt;2015-12-21 Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;再強調一次：&lt;strong&gt;一旦踏出第一步，就注定你會不斷接觸「遠離平庸」的新觀點、新技術。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所以，為了呼應剛剛的感想，在新梯次的 &lt;a href=&#34;http://get.soft-arch.net/ansible&#34;&gt;Ansible Workshop&lt;/a&gt;，乾脆帶大家用 Travis CI + Docker 玩一下 CI/CD 好了。因為從今年五個梯次 &lt;a href=&#34;https://github.com/William-Yeh/docker-workshop&#34;&gt;Docker Workshop&lt;/a&gt; 的經驗看來，滿意度最高的實作任務，一直都是 GitHub → Docker Hub 這一段 CI 動線⋯⋯&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>升級成大人版的思維作業系統</title>
      <link>//william-yeh.net/post/2015/09/upgrade-adult-thinking/</link>
      <pubDate>Tue, 15 Sep 2015 23:02:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2015/09/upgrade-adult-thinking/</guid>
      
        <description>&lt;p&gt;兩個週末【&lt;a href=&#34;https://shop.darencademy.com/product/view/id/28&#34;&gt;A101 職場人際關係與優勢策略工作坊&lt;/a&gt;】，一枚價值 14 PDU 的結業證書。雖然對沒有 PMP 證照企圖的我來說，帳面數字沒什麼用處；但獲得的，絕對遠遠超過這 14 PDU。&lt;/p&gt;

&lt;p&gt;用 14 PDU 換來 Bryan 積蓄 15 年的內功，還有什麼更划算的事情呢？&lt;/p&gt;

&lt;div class=&#34;box&#34; style=&#34;max-width:30em&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2015/09/a101-certificate.jpg&#34; alt=&#34;A101 講義與結業證書&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2015/09/a101-certificate.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;A101 講義與結業證書&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;上課也會上癮&#34;&gt;上課也會上癮&lt;/h2&gt;

&lt;p&gt;繼六月底【&lt;a href=&#34;https://shop.darencademy.com/product/view/id/57&#34;&gt;大人學講座 03：尋找天賦與熱情的系統化做法&lt;/a&gt;】之後，這是我第二次上姚詩豪 (Bryan) 的【&lt;a href=&#34;https://shop.darencademy.com/&#34;&gt;大人學&lt;/a&gt;】系列。&lt;/p&gt;

&lt;p&gt;Bryan 的演講或課程，承襲老本行「專案管理」的理性風格，就算主題再軟性，也一直都有「系統化做法」這五字訣。敢喊出「系統化做法」，就知道這不是洗腦催眠精神勝利喊話的&lt;del&gt;愚民&lt;/del&gt;激勵路線，而是不打高空、硬碰硬的真功夫。&lt;/p&gt;

&lt;h2 id=&#34;案例如人生倒帶&#34;&gt;案例如人生倒帶&lt;/h2&gt;

&lt;p&gt;課堂上，拿「人際網路圖」、「同理心地圖」、「TOC 衝突圖」這些硬底子的分析工具，運用在六個真實的職場情境上。與小組討論，聽老師闡釋，突然覺得以前被整得很慘的 PMP 模擬題，尤其是「利害關係人管理」，背後其實都真的有意義，也慶幸以前沒有白費精力搞那些東西。&lt;/p&gt;

&lt;p&gt;謝謝 Bryan 這麼精彩且血淋淋的真實案例，讓我回想起當年誤入(?)某單位，欠缺大機構人際溝通敏感度的自己，被推上火坑，被當做兩陣營派系惡鬥的炮灰，做填充工作，還自以為是做核心任務。真是「苦主」無誤呀！&lt;/p&gt;

&lt;p&gt;如果能夠重來一次，這次，我應該會做得更圓融。&lt;/p&gt;

&lt;h2 id=&#34;局與勢&#34;&gt;局與勢&lt;/h2&gt;

&lt;p&gt;案例有特定時空背景，分析工具也是現實狀況的簡化，兩者都有局限；重點是，要藉此培養出對於「局」與「勢」的判斷力。&lt;/p&gt;

&lt;p&gt;從『&lt;a href=&#34;https://www.darencademy.com/article/view/id/16127&#34;&gt;搞懂「考試」這個「局」&lt;/a&gt;』開始，「局」就如影隨行。不認識「局」，並不代表不存在；刻意忽略「局」，也不代表自己就能灑脫地「跳出三界外，不在五行中」。&lt;/p&gt;

&lt;p&gt;Bryan 箴言：「只會抱怨『鬼島』的人，是對『自己無能』的一種吶喊。」&lt;/p&gt;

&lt;p&gt;課堂上每聽到局與勢這兩個字，總不禁聯想到劉必榮、嚴定暹、劉墉等人的著作。我想，藉由 Bryan 所教的這些系統化做法，再回頭看那些更險惡詭譎的事，應該更能體會「局」與「勢」的奧妙。&lt;/p&gt;

&lt;h2 id=&#34;後遺症&#34;&gt;後遺症&lt;/h2&gt;

&lt;p&gt;上了一些補血課，後遺症是，自己好像撐破乾坤一氣袋的張無忌，「只覺體內真氣流轉，似乎積蓄著無窮無盡的力氣，可是偏偏使不出來，就似滿江洪水給一條長堤攔住了，無法宣洩。」&lt;/p&gt;

&lt;p&gt;我需要小昭幫我秀出羊皮上的乾坤大挪移心法⋯⋯&lt;/p&gt;

&lt;div class=&#34;shortcode-notice note&#34;&gt;
  &lt;div class=&#34;shortcode-notice-title note&#34;&gt;
    
      續集
    
  &lt;/div&gt;
  

&lt;p&gt;▷ 九個月後的回訓心得：【&lt;a href=&#34;//william-yeh.net/post/2016/06/upgrade-adult-thinking-part2/&#34;&gt;轉大人，Part 2&lt;/a&gt;】&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>