<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Potioneer&#39;s Essays</title>
    <link>//william-yeh.net/</link>
    <description>Recent content on Potioneer&#39;s Essays</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Thu, 09 Jul 2020 23:00:00 +0800</lastBuildDate>
    
        <atom:link href="//william-yeh.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Travis CI 虛擬機的地雷</title>
      <link>//william-yeh.net/post/2020/07/travisci-hacks/</link>
      <pubDate>Thu, 09 Jul 2020 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2020/07/travisci-hacks/</guid>
      
        <description>&lt;p&gt;我算是 &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt; 的老用戶了。&lt;/p&gt;
&lt;p&gt;以前 Travis CI 很慢，對 Docker 不友善，又很難 debug，讓我一度將重心轉移到後起之秀 &lt;a href=&#34;https://circleci.com/&#34;&gt;CircleCI&lt;/a&gt;。後來 Travis CI 向 CircleCI 看齊，讓我們能夠 ssh 進去虛擬機 debug，兩者的差距已經逐漸縮小。所以，我自己的重要專案，總是盡量同時掛上 Travis CI 及 CircleCI，讓 CI pipeline 的核心在某種程度上也能盡量 reproducible 不被 lock in。&lt;/p&gt;
&lt;p&gt;Travis CI 也提供許多常見的程式語言及伺服器軟體，以方便做 CI 測試。我個人的習慣是，盡量不去使用這些功能，而是直接用 Docker 或 Docker Compose 來組裝，以降低對於 Travis CI 的依賴（尤其我還要兼顧 CircleCI）。&lt;/p&gt;
&lt;p&gt;不過，如果是與人合作的專案，就得顧及其他人的習慣。我在使用 Travis CI 提供的伺服器軟體 Postgres、Cassandra、RabbitMQ 時，遇到一些雷，特地記錄下來，供有類似困擾的人參考。&lt;/p&gt;
&lt;h2 id=&#34;虛擬機版本&#34;&gt;虛擬機版本&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;.travis.yml&lt;/code&gt; 檔案裡面可以指定 CI 虛擬機的 Ubuntu 版本&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。若不特別指定，以現在（2020 年七月）來說，預設版本會是 Ubuntu 16.04 LTS，代號為 &lt;strong&gt;Xenial&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我遇到一些專案，&lt;code&gt;.travis.yml&lt;/code&gt; 指定的是代號為 &lt;strong&gt;Trusty&lt;/strong&gt; 的 Ubuntu 14.04 LTS。由於 Trusty 的官方保固期限已於 2019-04 到期&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，理論上來說，至少應該要升級到 2021-04 才到期的 Xenial 版，才比較安全。&lt;/p&gt;
&lt;p&gt;事情並沒想像中那麼簡單。&lt;/p&gt;
&lt;p&gt;我以兩個 repo 來示範：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 Trusty 虛擬機的專案：&lt;a href=&#34;https://github.com/William-Yeh/test-travisci-trusty&#34;&gt;test-travisci-trusty&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 Xenial 虛擬機的專案：&lt;a href=&#34;https://github.com/William-Yeh/test-travisci-xenial&#34;&gt;test-travisci-xenial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;譬如說，在原本使用 Trusty 的專案中跑得好好的 &lt;a href=&#34;https://github.com/William-Yeh/test-travisci-trusty/blob/master/.travis.yml&#34;&gt;.travis.yml 檔&lt;/a&gt;，如果不假思索直接&lt;a href=&#34;https://github.com/William-Yeh/test-travisci-xenial/tree/0.1&#34;&gt;照搬&lt;/a&gt;到使用 Xenial 的專案，一下子就&lt;a href=&#34;https://travis-ci.org/github/William-Yeh/test-travisci-xenial/builds/706399580&#34;&gt;卡住&lt;/a&gt;了：&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/07/travisci-failure.png&#34; alt=&#34;Travis CI Xenial 噴出錯誤&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/07/travisci-failure.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Travis CI Xenial 噴出錯誤&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;非常詭異。反覆實驗，總算找出需要修改的三個地方。&lt;/p&gt;
&lt;h2 id=&#34;postgres&#34;&gt;Postgres&lt;/h2&gt;
&lt;p&gt;使用 Trusty 虛擬機時，照著 Travis CI 官方指南及問題排除文件，我們可以順利安裝不同版本的 Postgres：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;官方指南：&lt;a href=&#34;https://docs.travis-ci.com/user/database-setup/#using-a-different-postgresql-version&#34;&gt;Setting up Databases and Services - Using a different PostgreSQL Version&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authentication 問題：&lt;a href=&#34;https://github.com/travis-ci/travis-ci/issues/9624&#34;&gt;Issue #9624&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;換成 Xenial 虛擬機時，不知為何，Postgres 的 port 居然靜悄悄地換成了 5432，而且沒有文件直接明講。&lt;/p&gt;
&lt;p&gt;解決之道很簡單，直接修改相對應的變數：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/07/diff-postgres.png&#34; alt=&#34;Postgres 修改之處&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/07/diff-postgres.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Postgres 修改之處&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;你也可以直接點選&lt;a href=&#34;https://www.diffchecker.com/186oQ7pu&#34;&gt;這裡&lt;/a&gt;剪貼相關的設定內容。&lt;/p&gt;
&lt;h2 id=&#34;cassandra&#34;&gt;Cassandra&lt;/h2&gt;
&lt;p&gt;使用 Trusty 虛擬機時，照著 Travis CI 官方指南，我們可以順利安裝不同版本的 Cassandra：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官方指南：&lt;a href=&#34;https://docs.travis-ci.com/user/database-setup/#cassandra&#34;&gt;Setting up Databases and Services - Cassandra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;換成 Xenial 虛擬機時，不知為何，Cassandra 不再是 Travis CI 直接提供的資料庫了，而且沒有文件直接明講。&lt;/p&gt;
&lt;p&gt;解決之道是自力救濟，自己下載，自己安裝&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/07/diff-cassandra.png&#34; alt=&#34;Cassandra 修改之處&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/07/diff-cassandra.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Cassandra 修改之處&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;你也可以直接點選&lt;a href=&#34;https://www.diffchecker.com/T3Xyacxp&#34;&gt;這裡&lt;/a&gt;剪貼相關的設定內容。&lt;/p&gt;
&lt;h2 id=&#34;rabbitmq&#34;&gt;RabbitMQ&lt;/h2&gt;
&lt;p&gt;使用 Trusty 虛擬機時，照著 Travis CI 官方指南及 Stack Overflow 問答庫，我們可以順利安裝 RabbitMQ 以及常用的 rabbitmqadmin 設定工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;官方指南：&lt;a href=&#34;https://docs.travis-ci.com/user/database-setup/#rabbitmq&#34;&gt;Setting up Databases and Services - RabbitMQ&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stack Overflow 問答：&lt;a href=&#34;https://stackoverflow.com/q/52107517/714426&#34;&gt;Declaring rabbitmq exchanges in travis build setup&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;換成 Xenial 虛擬機時，這次官方文件總算有特別提醒對應的修改&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。可惜 Travis CI 只做了一半，忘了啟動常見的 &lt;a href=&#34;https://www.rabbitmq.com/management.html&#34;&gt;RabbitMQ Management Plugin&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;解決之道是自力救濟，自己開啟：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/07/diff-rabbitmq.png&#34; alt=&#34;Cassandra 修改之處&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/07/diff-rabbitmq.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Cassandra 修改之處&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;你也可以直接點選&lt;a href=&#34;https://www.diffchecker.com/fp9mOgUx&#34;&gt;這裡&lt;/a&gt;剪貼相關的設定內容。&lt;/p&gt;
&lt;h2 id=&#34;結語&#34;&gt;結語&lt;/h2&gt;
&lt;p&gt;代號為 Xenial 的 Ubuntu 16.04，官方保固期將於 2021-04 到期，若升級到代號為 Bionic，官方保固期到 2023-04 的 Ubuntu 18.04，免不了又要經歷一輪類似的修改。&lt;/p&gt;
&lt;p&gt;據我目前初步測試，Travis CI 的 Bionic 虛擬機會遇到更多雷（難怪 Travis CI 目前仍然預設為 Xenial）。如果沒有其他考量，我還是強烈建議，直接用 Docker 或 Docker Compose 去設定 CI 所需動用的程式語言及伺服器軟體，以降低對於 Travis CI 的依賴，甚至預留轉換至 &lt;a href=&#34;https://circleci.com/&#34;&gt;CircleCI&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt; 的彈性。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Travis CI 支援許多虛擬機，完整列表請見 &amp;ldquo;&lt;a href=&#34;https://docs.travis-ci.com/user/reference/overview/&#34;&gt;Build Environment Overview&lt;/a&gt;&amp;rdquo; 一文。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;在 &lt;a href=&#34;https://en.wikipedia.org/wiki/Ubuntu_version_history&#34;&gt;Ubuntu version history&lt;/a&gt; 文件中，詳列了 Ubuntu 各版本代號及官方保固期限。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;我參考 &lt;a href=&#34;https://github.com/aio-libs/aiocassandra&#34;&gt;aiocassandra 專案&lt;/a&gt;的設定，將 Cassandra 安裝在 Travis CI 的 Xenial 虛擬機上：https://github.com/aio-libs/aiocassandra/blob/master/.travis.yml &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;可能也是在官方論壇收到 &amp;ldquo;&lt;a href=&#34;https://travis-ci.community/t/rabbitmq-on-xenial/1827&#34;&gt;RabbitMQ on Xenial&lt;/a&gt;&amp;rdquo; 這則提問，Travis CI 才會把這一段解法放進官方文件吧。 &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
      
    </item>
    
    <item>
      <title>Jira Board Hacks</title>
      <link>//william-yeh.net/post/2020/06/jira-board-hacks/</link>
      <pubDate>Sat, 06 Jun 2020 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2020/06/jira-board-hacks/</guid>
      
        <description>&lt;h2 id=&#34;實體看板&#34;&gt;實體看板&lt;/h2&gt;
&lt;p&gt;在導入 Scrum 時，我偏好實體看板。&lt;/p&gt;
&lt;p&gt;實體看板容易 zoom in/out，利於適時切換俯瞰與細節視角，不需過度的數字管理。&lt;/p&gt;
&lt;p&gt;實體看板的空間共時性，容易塑造團隊的一體感。&lt;/p&gt;
&lt;p&gt;實體看板彈性大，能以最小成本，讓團隊在敏捷路上不斷嘗試與調整。&lt;/p&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/06/physical-kanban.png&#34; alt=&#34;實體看板&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/06/physical-kanban.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;實體看板&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;不過，在重視數字管理的組織，或是有 remote 成員存在的組織，恐怕不得不面對數位化電子看板的存在。輕量級的如 &lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt;，重量級的如 &lt;a href=&#34;https://www.atlassian.com/software/jira&#34;&gt;Jira&lt;/a&gt;，不管並存抑或取代，都得學著與之共舞。&lt;/p&gt;
&lt;p&gt;說實在的，為了迎合管理視角，電子看板犧牲許多實體敏捷性。萬一真的不能不採用，我們還是得學著發揮它的優點，並設法降低它的負面影響。&lt;/p&gt;
&lt;p&gt;以下我會介紹幾個小技巧，讓我過去一個禮拜在透過 Jira 引導 daily stand-up 時，找回部份實體看板的手感。&lt;/p&gt;
&lt;h2 id=&#34;jira-的泳道縮放&#34;&gt;Jira 的泳道縮放&lt;/h2&gt;
&lt;p&gt;Daily stand-up 一開始，我習慣先站在更全局的角度鳥瞰：將卡片全都收縮起來，只留下泳道 (swimlane)。畢竟，與 sprint goal 最直接對應的，是 swimlane，而非個別卡片。&lt;/p&gt;
&lt;p&gt;我會先用 Jira 熱鍵 &lt;code&gt;z&lt;/code&gt; 隱藏側邊欄，用 Jira 熱鍵 &lt;code&gt;-&lt;/code&gt; 收縮泳道：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/06/jira-board-collapse.png&#34; alt=&#34;Jira 看板，泳道視角&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/06/jira-board-collapse.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Jira 看板，泳道視角&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;接下來，再逐一展開個別泳道來進行探討：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/06/jira-swimlane-one.png&#34; alt=&#34;Jira 看板，泳道局部展開&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/06/jira-swimlane-one.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Jira 看板，泳道局部展開&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;jira-的全局卡片視角&#34;&gt;Jira 的全局卡片視角&lt;/h2&gt;
&lt;p&gt;為了迎合管理視角，Jira 的每一張卡片，塞了非常多資訊：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:20em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/06/jira-card.png&#34; alt=&#34;Jira card&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/06/jira-card.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Jira card&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;這其實並不算是問題——如果單獨只看一張、兩張卡片的話。&lt;/p&gt;
&lt;p&gt;聽出我的弦外之音了嗎？&lt;/p&gt;
&lt;p&gt;問題在於：若將所有卡片全都陳列在看板上，會發現，卡片佔用的總面積，與實際展現出來有意義的資訊總量，不符合比例原則。&lt;/p&gt;
&lt;p&gt;個別卡片已經太佔空間了，更糟糕的是，能夠擺放卡片的看板區域，也被別人偷偷霸佔。&lt;/p&gt;
&lt;p&gt;以我的 13.3 英吋螢幕為例。寶貴的螢幕可視區域中，最上面是一堆置頂區域：先是一排選單，再來是好幾排大標題，接下來才輪到一排看板的進度欄。經過這一輪置頂空間爭奪戰，1/5 空間被吃掉了，剩下來的看板空間，能夠在同一頁完整秀出來的卡片，最多只有 12 張；想看更多，只得往下捲動：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/06/jira-board-before.png&#34; alt=&#34;手術前的 Jira 看板，空間利用率甚低。&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/06/jira-board-before.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;手術前的 Jira 看板，空間利用率甚低。&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;需要一直捲動的看板，如何給人全局觀？&lt;/p&gt;
&lt;p&gt;簡言之，Jira 缺少許多軟體常見的 &amp;ldquo;Zen mode&amp;rdquo; 或 &amp;ldquo;Presentation mode&amp;rdquo;。我希望，當卡片太多時（我知道這是 bad smell 啦⋯⋯），能夠一鍵隱藏不必要的置頂區域，隱藏不必要的卡片欄位，譬如說，只秀出卡片標題。&lt;/p&gt;
&lt;p&gt;用&lt;a href=&#34;https://violentmonkey.github.io/&#34;&gt;暴力猴&lt;/a&gt;之類的東西就辦得到。我寫了一隻簡單的 userscript：&lt;a href=&#34;https://greasyfork.org/en/scripts/404806-atlassian-jira-cleaner-rapid-board&#34;&gt;Atlassian JIRA - Cleaner Rapid Board&lt;/a&gt;，透過它，只要一鍵（預設為 &lt;code&gt;Ctrl&lt;/code&gt;-&lt;code&gt;H&lt;/code&gt;），就能切換成較清爽的全局視角：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/06/jira-board-after.png&#34; alt=&#34;手術後的 Jira 看板，空間利用率提高了。&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/06/jira-board-after.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;手術後的 Jira 看板，空間利用率提高了。&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;如此一來，寶貴的螢幕可視區域，只放絕對必要的資訊，就能多擺幾張卡片（是的，是的，我知道這是 bad smell 啦⋯⋯）。&lt;/p&gt;
&lt;p&gt;不過，Jira 本身已經夠笨重了，甚至連 Jira 本身的熱鍵都會不時失效；若再搭配像暴力猴這類 script 式外掛，可能會不夠穩定。如果你想要穩定一點的方案，或者不想透過熱鍵切換，只想一勞永逸眼不見為淨，不妨考慮改用 &lt;a href=&#34;https://userstyles.org/&#34;&gt;Stylish&lt;/a&gt; 之類的東西，自動套用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;c&#34;&gt;/* For horizontal headers */&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;css-e2mdyo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;ghx-header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;none&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;!important&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;/* For card fields */&lt;/span&gt;
 &lt;span class=&#34;nt&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;ghx-extra-fields&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;ghx-row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;ghx-highlighted-field&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;none&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;!important&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;jira-的聚焦卡片視角&#34;&gt;Jira 的聚焦卡片視角&lt;/h2&gt;
&lt;p&gt;在 daily stand-up 進行時，常常需要讓大家知道「我們現在正在討論某一張卡片」。&lt;/p&gt;
&lt;p&gt;在 Jira 裡，我們可以對某一張卡片原地拖曳一下下，就會有類似的視覺聚焦效果：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/06/jira-focus-by-drag.png&#34; alt=&#34;原地拖曳卡片&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/06/jira-focus-by-drag.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;原地拖曳卡片&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;不過，視覺效果還有很大的改善空間，而且⋯⋯需要一直維持拖曳狀態，手指頭會累。&lt;/p&gt;
&lt;p&gt;你可以改用素有「簡報神器」之稱的 &lt;a href=&#34;https://www.logitech.com/zh-tw/product/spotlight-presentation-remote&#34;&gt;Logitech SPOTLIGHT&lt;/a&gt; 的聚光燈特效。視覺效果一流，但缺點一樣是手指頭需要一直按著簡報器按鈕，聚光燈會晃動，大拇指會疲累。你也可以試著用我以前在〈&lt;a href=&#34;//william-yeh.net/post/2016/08/presenter-tools/&#34;&gt;簡報者的小工具&lt;/a&gt;〉一文介紹過的 &lt;a href=&#34;https://boinx.com/mousepose/&#34;&gt;Mouseposé&lt;/a&gt; 軟體，手指頭就不必一直按著不放，聚光燈也會穩穩的固定不動：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/06/jira-focus-by-mousepose.png&#34; alt=&#34;透過 Mouseposé 聚焦特定卡片&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/06/jira-focus-by-mousepose.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;透過 Mouseposé 聚焦特定卡片&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;總結&#34;&gt;總結&lt;/h2&gt;
&lt;p&gt;電子看板犧牲許多實體敏捷性。&lt;/p&gt;
&lt;p&gt;本文介紹幾則 Jira 電子看板的小技巧，有些是 Jira 本身就有提供的，有些則是透過其他軟體輔助：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;善用 Jira 熱鍵 &lt;code&gt;z&lt;/code&gt; 及 &lt;code&gt;-&lt;/code&gt; 縮放泳道。你也可以從 &lt;code&gt;?&lt;/code&gt; 當中嘗試看看有沒有更多適合自己風格的熱鍵。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;善用&lt;a href=&#34;https://violentmonkey.github.io/&#34;&gt;暴力猴&lt;/a&gt;或 &lt;a href=&#34;https://userstyles.org/&#34;&gt;Stylish&lt;/a&gt; 整頓出全局卡片視角。你可以從我寫的 &lt;a href=&#34;https://greasyfork.org/en/scripts/404806-atlassian-jira-cleaner-rapid-board&#34;&gt;Atlassian JIRA - Cleaner Rapid Board&lt;/a&gt; 當出發點，修改成適合自己的版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;善用 &lt;a href=&#34;https://boinx.com/mousepose/&#34;&gt;Mouseposé&lt;/a&gt; 聚焦單一卡片。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望透過這些工具，加上適度的引導技巧，能夠更接近實體看板的手感。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>gRPC 測試工具</title>
      <link>//william-yeh.net/post/2020/04/grpc-testing-tools/</link>
      <pubDate>Tue, 14 Apr 2020 22:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2020/04/grpc-testing-tools/</guid>
      
        <description>&lt;p&gt;RESTful API 時代，我們有許多簡單好用的測試工具：有酷炫的 &lt;a href=&#34;https://www.postman.com/&#34;&gt;Postman&lt;/a&gt;，有命令列控愛用的 &lt;a href=&#34;https://httpie.org/&#34;&gt;HTTPie&lt;/a&gt;，當然也有硬漢必備的萬用瑞士刀 &lt;a href=&#34;https://curl.haxx.se/&#34;&gt;curl&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;那麼，gRPC 呢？&lt;/p&gt;
&lt;p&gt;這篇文章介紹兩個好用的小工具：&lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;gRPCurl&lt;/a&gt; 及 &lt;a href=&#34;https://github.com/bojand/ghz&#34;&gt;ghz&lt;/a&gt;，一個是輸入輸出介面測試工具，另一個是壓測工具，也順便介紹一些簡化測試的技巧。&lt;/p&gt;
&lt;h2 id=&#34;待測程式&#34;&gt;待測程式&lt;/h2&gt;
&lt;p&gt;待測程式放在 &lt;a href=&#34;https://github.com/William-Yeh/grpcurl-and-ghz-demo&#34;&gt;https://github.com/William-Yeh/grpcurl-and-ghz-demo&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
  &lt;summary style=&#34;background-color:#f5f5f5;border:1px solid #ccc;padding:5px;&#34;&gt;
    檔案簡介：
    
  &lt;/summary&gt;
  

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;.
├── README.md
├── build.sh                 ← 編譯命令
├── go.mod
├── go.sum
├── out                      ← 編譯後的可執行檔
│   ├── server
│   └── server-new
├── routeguide               ← gRPC 介面定義；原封不動取自 &amp;#34;gRPC-Go&amp;#34; 專案
│   ├── route_guide.pb.go
│   └── route_guide.proto
├── server                   ← server 程式；原封不動取自 &amp;#34;gRPC-Go&amp;#34; 專案
│   └── server.go
├── server-new               ← 由我修改過的新版 server 程式
│   └── server-new.go
├── testdata.dat             ← 給 gRPCurl 的測試資料
└── testdata.json            ← 給 ghz 的測試資料&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/details&gt;

&lt;p&gt;為了方便起見，我挑選 &amp;ldquo;&lt;a href=&#34;https://github.com/grpc/grpc-go&#34;&gt;gRPC-Go&lt;/a&gt;&amp;rdquo; 專案裡面的 &amp;ldquo;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/route_guide&#34;&gt;the route guide server and client&lt;/a&gt;&amp;rdquo; 範例做為待測程式。&lt;/p&gt;
&lt;p&gt;這隻 server 程式透過 gRPC 提供 &lt;code&gt;RouteGuide&lt;/code&gt; 服務，我們這次只會測試其中的 &lt;code&gt;RecordRoute&lt;/code&gt; 呼叫。以下是從 gRPC 介面定義檔 &lt;a href=&#34;https://github.com/William-Yeh/grpcurl-and-ghz-demo/blob/master/routeguide/route_guide.proto&#34;&gt;&lt;code&gt;route_guide.proto&lt;/code&gt;&lt;/a&gt; 摘錄我們會用到的部份：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-proto&#34; data-lang=&#34;proto&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;routeguide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RouteGuide&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// A client-to-server streaming RPC.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// Accepts a stream of Points on a route being traversed, returning a
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// RouteSummary when traversal is completed.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;rpc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RecordRoute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RouteSummary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;latitude&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;longitude&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RouteSummary&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;point_count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;feature_count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;distance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elapsed_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我也針對 server 程式小改三個地方，弄出另一個 server-new 程式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ diff  server/server.go  server-new/server-new.go
42a43
&amp;gt; 	&lt;span class=&#34;s2&#34;&gt;&amp;#34;google.golang.org/grpc/reflection&amp;#34;&lt;/span&gt;
55c56
&amp;lt; 	&lt;span class=&#34;nv&#34;&gt;port&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; flag.Int&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;, 10000, &lt;span class=&#34;s2&#34;&gt;&amp;#34;The server port&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
---
&amp;gt; 	&lt;span class=&#34;nv&#34;&gt;port&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; flag.Int&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;, 20000, &lt;span class=&#34;s2&#34;&gt;&amp;#34;The server port&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
243a245,248
&amp;gt;
&amp;gt; 	// Register reflection service on gRPC server.
&amp;gt; 	reflection.Register&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;grpcServer&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;簡單來說，新舊兩版的差別是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;舊版 server 的 gRPC port = 10000，新版 server-new 則是 20000。&lt;/li&gt;
&lt;li&gt;新版 server-new 支援 &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/server-reflection.md&#34;&gt;server reflection&lt;/a&gt; 功能。稍後會再說明這是什麼。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;實驗環境&#34;&gt;實驗環境&lt;/h2&gt;
&lt;p&gt;實驗所需環境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go 1.14 以上。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;gRPCurl&lt;/a&gt; 1.5.0 以上。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bojand/ghz&#34;&gt;ghz&lt;/a&gt; 0.51.0 以上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先來編譯程式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./build.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;成功後，會在 &lt;code&gt;out&lt;/code&gt; 目錄拿到兩份執行檔：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;out/server&lt;/code&gt;：原封不動來自 &amp;ldquo;gRPC-Go&amp;rdquo; 專案的 server 程式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;out/server-new&lt;/code&gt;：由我小小修改過的新程式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;進行實驗時，建議將你的終端機配置成這樣：&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/04/grpcurl-demo-layout.png&#34; alt=&#34;終端機建議配置&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/04/grpcurl-demo-layout.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;終端機建議配置&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;然後，請分別啟動 &lt;code&gt;out/server&lt;/code&gt; 及 &lt;code&gt;out/server-new&lt;/code&gt; 程式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 舊程式，跑在 10000 port&lt;/span&gt;
$ out/server

&lt;span class=&#34;c1&#34;&gt;# 新程式，跑在 20000 port&lt;/span&gt;
$ out/server-new
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一切就緒，準備要來測試它們了。&lt;/p&gt;
&lt;h2 id=&#34;實驗一搭配-proto-檔&#34;&gt;實驗一：搭配 proto 檔&lt;/h2&gt;
&lt;p&gt;先針對舊版的 server 來實驗。&lt;/p&gt;
&lt;h3 id=&#34;grpcurl&#34;&gt;gRPCurl&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;gRPCurl&lt;/a&gt;，顧名思義，是在向硬漢必備的萬用瑞士刀 &lt;a href=&#34;https://curl.haxx.se/&#34;&gt;curl&lt;/a&gt; 致敬。不妨將它視為 gRPC 版的 curl。&lt;/p&gt;
&lt;p&gt;gRPCurl 使用上最主要的差別是，因應 gRPC 的特性，必須餵給它 proto 檔案，才會知道該如何封裝訊息格式。&lt;/p&gt;
&lt;p&gt;譬如說，我們可將 proto 檔案的路徑寫在 &lt;code&gt;-import-path&lt;/code&gt; 中、將 proto 檔案名稱寫在 &lt;code&gt;-proto&lt;/code&gt; 中、將參數寫在 &lt;code&gt;-d&lt;/code&gt; 中，再呼叫 server 的遠端程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ grpcurl -plaintext  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;latitude&amp;#34;:-460000000,&amp;#34;longitude&amp;#34;:-1160000000} {&amp;#34;latitude&amp;#34;:720000000,&amp;#34;longitude&amp;#34;:-540000000}&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -import-path ./routeguide        &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -proto       route_guide.proto   &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    127.0.0.1:10000                  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    routeguide.RouteGuide.RecordRoute

&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;pointCount&amp;#34;&lt;/span&gt;: 2,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;distance&amp;#34;&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;13975745&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我們也可將事先備妥的資料檔餵給 gRPCurl。像是含有 100 筆資料的 &lt;code&gt;testdata.dat&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ grpcurl -plaintext -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;            &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -import-path ./routeguide          &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -proto       route_guide.proto     &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    127.0.0.1:10000                    &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    routeguide.RouteGuide.RecordRoute  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &amp;lt; testdata.dat

&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;pointCount&amp;#34;&lt;/span&gt;: 100,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;distance&amp;#34;&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;1003784333&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ghz&#34;&gt;ghz&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bojand/ghz&#34;&gt;ghz&lt;/a&gt; 壓測工具，是這麼自我介紹的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Simple gRPC benchmarking and load testing tool inspired by &lt;a href=&#34;https://github.com/rakyll/hey/&#34;&gt;hey&lt;/a&gt; and &lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;grpcurl&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，從命令列參數及統計結果上，都可看出它們的影響。&lt;/p&gt;
&lt;p&gt;譬如說，我們可將 proto 檔案的路徑寫在 &lt;code&gt;--import-path&lt;/code&gt; 中、將 proto 檔案名稱寫在 &lt;code&gt;--proto&lt;/code&gt; 中、將參數寫在 &lt;code&gt;--data&lt;/code&gt; 中，再呼叫 server 的遠端程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ghz --insecure  -z 20s  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --data &lt;span class=&#34;s1&#34;&gt;&amp;#39;[{&amp;#34;latitude&amp;#34;:-460000000,&amp;#34;longitude&amp;#34;:-1160000000},{&amp;#34;latitude&amp;#34;:720000000,&amp;#34;longitude&amp;#34;:-540000000}]&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --import-paths ./routeguide         &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --proto        route_guide.proto    &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --call routeguide.RouteGuide.RecordRoute  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      127.0.0.1:10000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;details&gt;
  &lt;summary style=&#34;background-color:#f5f5f5;border:1px solid #ccc;padding:5px;&#34;&gt;
    壓測 20 秒，結果如下：
    
  &lt;/summary&gt;
  

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;Summary:
  Count:        548082
  Total:        20.00 s
  Slowest:      50.36 ms
  Fastest:      0.12 ms
  Average:      1.74 ms
  Requests/sec: 27403.72

Response time histogram:
  0.123 [1]     |
  5.147 [543463]        |∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
  10.170 [4297] |
  15.194 [271]  |
  20.217 [8]    |
  25.241 [3]    |
  30.264 [1]    |
  35.288 [0]    |
  40.311 [0]    |
  45.335 [0]    |
  50.358 [1]    |

Latency distribution:
  10 % in 0.90 ms
  25 % in 1.21 ms
  50 % in 1.58 ms
  75 % in 2.04 ms
  90 % in 2.66 ms
  95 % in 3.24 ms
  99 % in 4.93 ms

Status code distribution:
  [Canceled]      33 responses
  [Unavailable]   4 responses
  [OK]            548045 responses

Error distribution:
  [33]   rpc error: code = Canceled desc = grpc: the client connection is closing
  [4]    rpc error: code = Unavailable desc = transport is closing&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/details&gt;

&lt;p&gt;同樣的，我們也可將事先備妥的資料檔餵給 ghz。像是含有 100 筆資料的 &lt;code&gt;testdata.json&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ghz --insecure --data&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@  -z 20s  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --import-paths ./routeguide         &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --proto        route_guide.proto    &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --call routeguide.RouteGuide.RecordRoute  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      127.0.0.1:10000  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &amp;lt; testdata.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;details&gt;
  &lt;summary style=&#34;background-color:#f5f5f5;border:1px solid #ccc;padding:5px;&#34;&gt;
    壓測 20 秒，結果如下：
    
  &lt;/summary&gt;
  

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;Summary:
  Count:        788680
  Total:        20.00 s
  Slowest:      28.02 ms
  Fastest:      0.13 ms
  Average:      1.23 ms
  Requests/sec: 39432.62

Response time histogram:
  0.126 [1]     |
  2.915 [772021]        |∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
  5.705 [15003] |∎
  8.495 [1000]  |
  11.285 [458]  |
  14.074 [95]   |
  16.864 [10]   |
  19.654 [12]   |
  22.444 [3]    |
  25.233 [5]    |
  28.023 [40]   |

Latency distribution:
  10 % in 0.65 ms
  25 % in 0.86 ms
  50 % in 1.11 ms
  75 % in 1.42 ms
  90 % in 1.88 ms
  95 % in 2.30 ms
  99 % in 3.57 ms

Status code distribution:
  [OK]         788648 responses
  [Canceled]   32 responses

Error distribution:
  [32]   rpc error: code = Canceled desc = grpc: the client connection is closing&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/details&gt;

&lt;h2 id=&#34;實驗二不需搭配-proto-檔&#34;&gt;實驗二：不需搭配 proto 檔&lt;/h2&gt;
&lt;p&gt;使用前，每次都要先備妥待測程式的 proto 檔，其實也滿麻煩的。萬一複雜的 proto 檔案又去 import 其他 proto 檔 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，可能就得條列一堆 &lt;code&gt;-import-path&lt;/code&gt; 或 &lt;code&gt;--import-path&lt;/code&gt; 命令列參數給 gRPCurl 及 ghz。&lt;/p&gt;
&lt;p&gt;有沒有省力一點的方法？&lt;/p&gt;
&lt;p&gt;有的，就是透過 &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/server-reflection.md&#34;&gt;server reflection&lt;/a&gt; 功能。&lt;/p&gt;
&lt;h3 id=&#34;server-reflection&#34;&gt;Server reflection&lt;/h3&gt;
&lt;p&gt;我以這次的範例程式 server-new 為例，說明如何加上 server reflection 功能。&lt;/p&gt;
&lt;p&gt;首先，請加上 &lt;a href=&#34;https://pkg.go.dev/google.golang.org/grpc/reflection?tab=doc&#34;&gt;&lt;code&gt;google.golang.org/grpc/reflection&lt;/code&gt;&lt;/a&gt; 套件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;google.golang.org/grpc/reflection&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著，在 &lt;code&gt;grpcServer.Serve&lt;/code&gt; 之前，呼叫 &lt;code&gt;reflection.Register&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;grpcServer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;opts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Register reflection service on gRPC server.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reflection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;grpcServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;grpcServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Serve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;只需要這兩個步驟，你的 gRPC 程式本身就具有 server reflection 功能，對方不再需要 proto 檔案就能直接進行遠端呼叫。&lt;/p&gt;
&lt;p&gt;針對新版的 server-new 來實驗看看吧。&lt;/p&gt;
&lt;h3 id=&#34;grpcurl-1&#34;&gt;gRPCurl&lt;/h3&gt;
&lt;p&gt;我們可用 &lt;code&gt;list&lt;/code&gt; 指令查詢 server-new 提供哪些服務：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ grpcurl -plaintext  127.0.0.1:20000  list

grpc.reflection.v1alpha.ServerReflection
routeguide.RouteGuide
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可用 &lt;code&gt;describe&lt;/code&gt; 指令查詢 server-new 提供服務的介面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ grpcurl -plaintext  127.0.0.1:20000  describe

grpc.reflection.v1alpha.ServerReflection is a service:
service ServerReflection &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  rpc ServerReflectionInfo &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; stream .grpc.reflection.v1alpha.ServerReflectionRequest &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; returns &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; stream .grpc.reflection.v1alpha.ServerReflectionResponse &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
routeguide.RouteGuide is a service:
service RouteGuide &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  rpc GetFeature &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; .routeguide.Point &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; returns &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; .routeguide.Feature &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  rpc ListFeatures &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; .routeguide.Rectangle &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; returns &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; stream .routeguide.Feature &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  rpc RecordRoute &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; stream .routeguide.Point &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; returns &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; .routeguide.RouteSummary &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  rpc RouteChat &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; stream .routeguide.RouteNote &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; returns &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; stream .routeguide.RouteNote &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可用 &lt;code&gt;describe&lt;/code&gt; 指令進一步查詢某參數的具體格式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ grpcurl -plaintext  127.0.0.1:20000  describe .routeguide.Point

routeguide.Point is a message:
message Point &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  int32 &lt;span class=&#34;nv&#34;&gt;latitude&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  int32 &lt;span class=&#34;nv&#34;&gt;longitude&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 2&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可看出，gRPCurl 不需要 proto 檔案，就能直接向 server-new 查詢遠端呼叫所需知道的介面細節。&lt;/p&gt;
&lt;p&gt;最後，讓我們將含有 100 筆資料的 &lt;code&gt;testdata.dat&lt;/code&gt; 餵給 gRPCurl 來測測看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ grpcurl -plaintext -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    127.0.0.1:20000         &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    routeguide.RouteGuide.RecordRoute  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &amp;lt; testdata.dat

&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;pointCount&amp;#34;&lt;/span&gt;: 100,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;distance&amp;#34;&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;1003784333&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有了 server reflection 功能，是不是方便多了？如果你有權修改原始程式，這是值得好好考慮的，可讓測試工作輕鬆一點。&lt;/p&gt;
&lt;p&gt;當然啦，你可以考慮在 production 環境&lt;strong&gt;關掉&lt;/strong&gt;這功能；但在測試環境中，這真的很方便。&lt;/p&gt;
&lt;h3 id=&#34;ghz-1&#34;&gt;ghz&lt;/h3&gt;
&lt;p&gt;儘管 server reflection 通常不會在 production 環境啟用，不過我還是很好奇：server reflection 對執行效率的影響有多少？尤其是涉及 marshalling。&lt;/p&gt;
&lt;p&gt;用 ghz 試試看吧！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ghz --insecure --data&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@  -z 20s  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --call routeguide.RouteGuide.RecordRoute  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      127.0.0.1:20000  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &amp;lt; testdata.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;details&gt;
  &lt;summary style=&#34;background-color:#f5f5f5;border:1px solid #ccc;padding:5px;&#34;&gt;
    壓測 20 秒，結果如下：
    
  &lt;/summary&gt;
  

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;Summary:
  Count:        826524
  Total:        20.00 s
  Slowest:      19.79 ms
  Fastest:      0.12 ms
  Average:      1.17 ms
  Requests/sec: 41317.73

Response time histogram:
  0.118 [1]     |
  2.085 [776730]        |∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
  4.052 [45892] |∎∎
  6.019 [3018]  |
  7.986 [550]   |
  9.953 [112]   |
  11.920 [74]   |
  13.887 [51]   |
  15.854 [37]   |
  17.821 [17]   |
  19.788 [1]    |

Latency distribution:
  10 % in 0.62 ms
  25 % in 0.82 ms
  50 % in 1.06 ms
  75 % in 1.36 ms
  90 % in 1.80 ms
  95 % in 2.20 ms
  99 % in 3.38 ms

Status code distribution:
  [OK]            826483 responses
  [Canceled]      40 responses
  [Unavailable]   1 responses

Error distribution:
  [40]   rpc error: code = Canceled desc = grpc: the client connection is closing
  [1]    rpc error: code = Unavailable desc = transport is closing&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/details&gt;

&lt;p&gt;雖然這還不算非常嚴謹的實驗，但可看出，&lt;strong&gt;沒有&lt;/strong&gt; server reflection 功能的 server 版本，與&lt;strong&gt;有&lt;/strong&gt;此功能的 server-new 版本，執行效率沒有顯著差異。&lt;/p&gt;
&lt;p&gt;因此，server reflection 功能，值得嘗試。&lt;/p&gt;
&lt;h2 id=&#34;總結&#34;&gt;總結&lt;/h2&gt;
&lt;p&gt;本篇文章，介紹兩個好用的 gRPC 測試小工具：輸入輸出介面測試工具 &lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;gRPCurl&lt;/a&gt;，以及壓測工具 &lt;a href=&#34;https://github.com/bojand/ghz&#34;&gt;ghz&lt;/a&gt;。最後並推薦 &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/server-reflection.md&#34;&gt;server reflection&lt;/a&gt; 功能來簡化 gRPC 測試工作。&lt;/p&gt;
&lt;p&gt;ghz 也有 web 介面，目前是 beta 狀態。有興趣的，請去 &lt;a href=&#34;https://ghz.sh/&#34;&gt;ghz 官網&lt;/a&gt;看看。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Proto 檔案也可以 import 其他 proto 檔。詳見 &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/proto3#importing-definitions&#34;&gt;https://developers.google.com/protocol-buffers/docs/proto3#importing-definitions&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
      
    </item>
    
    <item>
      <title>gRPC Load Balancing in Kubernetes</title>
      <link>//william-yeh.net/post/2020/03/grpc-load-balancing/</link>
      <pubDate>Mon, 30 Mar 2020 22:30:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2020/03/grpc-load-balancing/</guid>
      
        <description>&lt;p&gt;Kubernetes 有個很方便的地方：只要修改 deployment 的 &lt;code&gt;spec.replicas&lt;/code&gt; 數字，就能橫向擴展 pod，以應付更大的流量負載需求。&lt;/p&gt;
&lt;p&gt;這一招，對於 stateless 的 HTTP 服務很管用，也是 Kubernetes 入門教學愛用的例子。但是，對於 &lt;a href=&#34;https://grpc.io/&#34;&gt;gRPC&lt;/a&gt; 呢？&lt;/p&gt;
&lt;p&gt;gRPC 是以 &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP/2&#34;&gt;HTTP/2&lt;/a&gt; 作為傳輸協定，而 HTTP/2 的特點是持久連線：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;One connection per origin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;all HTTP/2 connections are persistent, and only one connection per origin is required, which offers numerous performance benefits.     &amp;ndash; &lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/http2&#34;&gt;Introduction to HTTP/2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;既然 gRPC 會盡可能維持既有連線，不會傻傻地一直斷線與重連，那麼，當 Kubernetes 橫向擴展 pod 了，gRPC 流量是否也能順便平均分散到新長出來的 pod 身上，還是死咬著原本的連線不放？&lt;/p&gt;
&lt;p&gt;做個簡單的實驗吧。&lt;/p&gt;
&lt;h2 id=&#34;實驗環境&#34;&gt;實驗環境&lt;/h2&gt;
&lt;p&gt;實驗程式放在 &lt;a href=&#34;https://github.com/William-Yeh/grpc-lb&#34;&gt;https://github.com/William-Yeh/grpc-lb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;實驗所需環境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go 1.14 以上。&lt;/li&gt;
&lt;li&gt;Kubernetes 1.14 以上。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://skaffold.dev/&#34;&gt;Skaffold&lt;/a&gt; 1.6.0 以上。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linkerd.io/&#34;&gt;Linkerd&lt;/a&gt; 2.7.0 以上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;實驗進行之前，請先編譯所需的執行檔及容器映像檔：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Generate native binaries in `out` directory:&lt;/span&gt; 
./build.sh

&lt;span class=&#34;c1&#34;&gt;# Generate Docker images:&lt;/span&gt;
skaffold build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;會產生以下程式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;執行檔 &lt;code&gt;out/server&lt;/code&gt; &amp;amp; 映像檔 &lt;code&gt;addr-server&lt;/code&gt;：接收 HTTP 及 gRPC 連線，傳回自己的 IP 位址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;執行檔 &lt;code&gt;client-http&lt;/code&gt; &amp;amp; 映像檔 &lt;code&gt;addr-client-http&lt;/code&gt;：透過 HTTP 查詢 server 位址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;執行檔 &lt;code&gt;client-grpc&lt;/code&gt; &amp;amp; 映像檔 &lt;code&gt;addr-client-grpc&lt;/code&gt;：透過 gRPC 查詢 server 位址。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;實驗一純-kubernetes-模式&#34;&gt;實驗一：純 Kubernetes 模式&lt;/h2&gt;
&lt;p&gt;首先實驗看看，若 server 程式跑在 Kubernetes 裡，除了 HTTP 流量會自動負載均衡之外，是否 gRPC 流量也享有同等待遇。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/03/demo-1.png&#34; alt=&#34;實驗一：純 K8s 模式的佈局&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/03/demo-1.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;實驗一：純 K8s 模式的佈局&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;為了方便一眼看出整體狀況，請將終端機面板配置如下：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/03/demo-k8s-1.png&#34; alt=&#34;實驗一：終端機建議配置&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/03/demo-k8s-1.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;實驗一：終端機建議配置&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;請依照以下步驟進行實驗：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;建立 &lt;code&gt;grpc-lb&lt;/code&gt; namespace：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl create ns grpc-lb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;grpc-lb&lt;/code&gt; 裡執行 server，此時 &lt;code&gt;spec.replicas&lt;/code&gt; 為 &lt;code&gt;1&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;skaffold dev  -n grpc-lb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;執行 client-http，透過 HTTP 連線到 server：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;out/client-http  http://127.0.0.1:30080/addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;執行 client-grpc，透過 gRPC 連線到 server：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;out/client-grpc  localhost:30051
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因為現在 server pod 只有一個，所以 client-http 及 client-grpc 都只會連線到同一個 IP 位址（即此例的 &lt;code&gt;10.1.0.8&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;  &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;現在，讓我們把 server pod 的 &lt;code&gt;spec.replicas&lt;/code&gt; 數字擴展成 &lt;code&gt;5&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl scale -n grpc-lb &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --replicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;  deployment/addr-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如下圖所示，當 server pod 數目從 1 變成 5，Kubernetes 的確開始將 HTTP 流量平均分配到 5 個 pods 身上（即此例的 &lt;code&gt;10.1.0.8&lt;/code&gt; ～ &lt;code&gt;10.1.0.12&lt;/code&gt;）。可是 gRPC 流量卻仍然綁在舊的那一個 pod 身上（即此例的 &lt;code&gt;10.1.0.8&lt;/code&gt;）。&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/03/demo-k8s-2.png&#34; alt=&#34;實驗一：gRPC 流量並未平均分配&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/03/demo-k8s-2.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;實驗一：gRPC 流量並未平均分配&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;可見，Kubernetes 並沒有對 gRPC 進行負載均衡。&lt;/p&gt;
&lt;p&gt;為什麼？&lt;/p&gt;
&lt;h2 id=&#34;l4-vs-l7-負載均衡&#34;&gt;L4 vs L7 負載均衡&lt;/h2&gt;
&lt;p&gt;根據 &amp;ldquo;&lt;a href=&#34;https://blog.nobugware.com/post/2019/kubernetes_mesh_network_load_balancing_grpc_services/&#34;&gt;gRPC Load Balancing inside Kubernetes&lt;/a&gt;&amp;rdquo; 一文所述，Kubernetes 原生的負載均衡機制，是建立在 L4：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you create a Service in Kubernetes, it creates a &lt;strong&gt;layer 4&lt;/strong&gt; proxy and load balance connections to your pods using iptables, the service endpoint is one IP and a port hiding your real pods.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此，對於不具備真正持久連線的 HTTP 來說，Kubernetes 原生的 L4 負載均衡機制足以應付 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;；但是，對於真正具有持久連線的 gRPC，L4 就行不通了。&lt;/p&gt;
&lt;p&gt;文中列出三種解決方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Client 端的負載均衡：叫 client 維持一個 gRPC connection pool，主動與每一個 gRPC server pods 都維持連線。缺點是：必須修改 client 程式碼，也暴露 server pods 的一些內部細節。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes edge 端的負載均衡：透過 ingress 之類的機制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes service mesh：透過 sidecar 之類的機制。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;為了簡單起見，我參考 Kubernetes 官網文章 &amp;ldquo;&lt;a href=&#34;https://kubernetes.io/blog/2018/11/07/grpc-load-balancing-on-kubernetes-without-tears/&#34;&gt;gRPC Load Balancing on Kubernetes without Tears&lt;/a&gt;&amp;rdquo; 的做法，用 Linkerd 2 這個 service mesh 方案來實驗。 &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;實驗二service-mesh-模式&#34;&gt;實驗二：Service mesh 模式&lt;/h2&gt;
&lt;p&gt;根據 Linkerd 官網 &lt;a href=&#34;https://linkerd.io/2/faq/#whats-the-difference-between-linkerd-1x-and-2x&#34;&gt;FAQ&lt;/a&gt; 所述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Linkerd 1.x is built on the “Twitter stack”: Finagle, Netty, Scala, and the JVM.&lt;/p&gt;
&lt;p&gt;Linkerd 2.x is built in Rust and Go. It is significantly faster and lighter weight than 1.x, but currently only supports Kubernetes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Linkerd 2 比前一版有長足的進步，又是 &lt;a href=&#34;https://smi-spec.io/&#34;&gt;SMI&lt;/a&gt; 陣營的一員，頗值得一試。&lt;/p&gt;
&lt;h3 id=&#34;linkerd-前置作業&#34;&gt;Linkerd 前置作業&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安裝 Linkerd 2 到現行的 Kubernetes cluster：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Install&lt;/span&gt;
linkerd install &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; kubectl apply -f -

&lt;span class=&#34;c1&#34;&gt;# Check&lt;/span&gt;
linkerd check
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先刪掉舊的 &lt;code&gt;grpc-lb&lt;/code&gt; namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl delete ns grpc-lb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立新的 &lt;code&gt;grpc-lb&lt;/code&gt; namespace，並注入 Linkerd：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f ns.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;檢查一下 &lt;code&gt;grpc-lb&lt;/code&gt; namespace 的 data plane 是否正常：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;linkerd -n grpc-lb check --proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我們把 &lt;code&gt;grpc-lb&lt;/code&gt; namespace 圈成一塊 service mesh 疆域。如果一切順利，在 &lt;code&gt;grpc-lb&lt;/code&gt; namespace 裡面的東西，會自動被 Linkerd 接管——包括 gRPC 負載均衡。&lt;/p&gt;
&lt;h3 id=&#34;replicas--1&#34;&gt;Replicas = 1&lt;/h3&gt;
&lt;p&gt;首先實驗看看，若我們將 addr-client-grpc 與 server 都放在 service mesh 疆域內，兩者間的 gRPC 流量是否會自動負載均衡。我也保留一份舊的 client-grpc 故意「&lt;strong&gt;不&lt;/strong&gt;」讓它跑在 Kubernetes 裡面，作為對照組。&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/03/demo-2.png&#34; alt=&#34;實驗二：K8s service mesh 模式的佈局&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/03/demo-2.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;實驗二：K8s service mesh 模式的佈局&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;為了方便一眼看出整體狀況，請將終端機面板配置如下：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/03/demo-mesh-1.png&#34; alt=&#34;實驗二：終端機建議配置&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/03/demo-mesh-1.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;實驗二：終端機建議配置&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;請依照以下步驟進行實驗：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;移掉 &lt;code&gt;skaffold.yaml&lt;/code&gt; 這一行的註解符號：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;kubectl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;manifests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- server.yml&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#- client-grpc.yml  ← 請讓這一行生效！&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;grpc-lb&lt;/code&gt; namespace 裡執行 addr-client-grpc 及 server，此時 server 的 &lt;code&gt;spec.replicas&lt;/code&gt; 為 &lt;code&gt;1&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;skaffold dev  -n grpc-lb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等前一個步驟跑到穩定狀態之後，在 Kubernetes 外面也執行一份舊的 client-grpc 作為對照組：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;out/client-grpc  localhost:30051
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此時，因為 server pod 只有一個，所以，位於 service mesh 疆域內的 addr-client-grpc 及疆域外的 client-grpc 都只會連線到同一個 IP 位址（即此例的 &lt;code&gt;10.1.0.71&lt;/code&gt;）。&lt;/p&gt;
&lt;h3 id=&#34;replicas--5&#34;&gt;Replicas = 5&lt;/h3&gt;
&lt;p&gt;一切就緒，讓我們把 server pod 的 &lt;code&gt;spec.replicas&lt;/code&gt; 數字擴展成 &lt;code&gt;5&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl scale -n grpc-lb &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --replicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;  deployment/addr-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如下圖所示，當 server pod 數目從 1 變成 5，Kubernetes 的確開始將 service mesh 疆域內 addr-client-grpc 產生的 gRPC 流量平均分配到 5 個 pods 身上（即此例的 &lt;code&gt;10.1.0.71&lt;/code&gt; ～ &lt;code&gt;10.1.0.75&lt;/code&gt;）。可是「&lt;strong&gt;不&lt;/strong&gt;」位於 service mesh 疆域的 client-grpc 產生的 gRPC 流量，就仍然綁在舊的那一個 pod 身上（即此例的 &lt;code&gt;10.1.0.71&lt;/code&gt;）。&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/03/demo-mesh-2.png&#34; alt=&#34;實驗二：gRPC 流量分配狀況&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/03/demo-mesh-2.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;實驗二：gRPC 流量分配狀況&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&#34;linkerd-儀表板&#34;&gt;Linkerd 儀表板&lt;/h3&gt;
&lt;p&gt;讓我們看看酷炫一點的東西吧！請用以下命令打開 Linkerd 儀表板：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;linkerd dashboard &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;請切換到 &lt;code&gt;grpc-lb&lt;/code&gt; namespace，觀察三個角色之間的網路互連架構，並檢視一些效率指標。如下圖所示，Linkerd 2.7.0 對於 gRPC load balancing 的表現很不錯，即使打開 mesh sidecar，P99 latency 也仍然壓在 10ms 左右的水準：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/03/dashboard-1.png&#34; alt=&#34;實驗二：Topology&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/03/dashboard-1.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;實驗二：Topology&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;從下圖也可以看到 5 個 server pods 都有輪流服務到 addr-client-grpc。其中，最後一個 pod 比較可憐，湊巧服務到獨佔連線的外部 client-grpc：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/03/dashboard-2.png&#34; alt=&#34;實驗二：gRPC 負載均衡的數據&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/03/dashboard-2.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;實驗二：gRPC 負載均衡的數據&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;!-- raw HTML omitted --&gt;  &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;簡單的實驗，示範在 Kubernetes 裡，可以透過 service mesh 替 gRPC 加上負載均衡機制。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;嚴格來說，HTTP/1.1 的 keep alive 機制，或多或少會影響到 Kubernetes 的負載均衡效果。不過正如&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_persistent_connection#HTTP_1.1&#34;&gt;維基百科&lt;/a&gt;所說，許多 Web server 本來就會針對 HTTP 設定較短的 timeout 以避免副作用。若真的要在 Web 上進行持久連線，一般都會建議改走 &lt;a href=&#34;https://en.wikipedia.org/wiki/WebSocket&#34;&gt;WebSocket&lt;/a&gt; 路線。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;有在玩 &lt;a href=&#34;https://istio.io/&#34;&gt;Istio&lt;/a&gt; 的朋友，可以參考〈&lt;a href=&#34;https://medium.com/getamis/istio-%E5%9F%BA%E7%A4%8E-grpc-%E8%B2%A0%E8%BC%89%E5%9D%87%E8%A1%A1-d4be0d49ee07&#34;&gt;Istio 基礎 — gRPC 負載均衡&lt;/a&gt;〉一文的做法。不過，比較起來，Istio 設定上會比 Linkerd 複雜。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
      
    </item>
    
    <item>
      <title>Idempotency Key：原理與實測</title>
      <link>//william-yeh.net/post/2020/03/idempotency-key-test/</link>
      <pubDate>Tue, 10 Mar 2020 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2020/03/idempotency-key-test/</guid>
      
        <description>&lt;p&gt;最近幾年，在微服務打滾的人，不時會遇到神祕的 &amp;ldquo;idempotency key&amp;rdquo; 字眼。本文爬梳 idempotency key 的技術背景，探討運作流程，並分析資料庫的實作選項。&lt;/p&gt;
&lt;h2 id=&#34;idempotency-冪等性&#34;&gt;Idempotency 冪等性&lt;/h2&gt;
&lt;p&gt;在 API 服務中，常常需要留意 idempotency（冪等性）。&lt;/p&gt;
&lt;p&gt;名詞：idempotency，形容詞：idempotent。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Idempotency&amp;rdquo; 這字眼源自數學。維基百科是這麼解釋 &amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Idempotence#Idempotent_functions&#34;&gt;idempotent function&lt;/a&gt;&amp;rdquo; 的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;idempotent elements are the functions &lt;em&gt;f&lt;/em&gt;: &lt;em&gt;E&lt;/em&gt; → &lt;em&gt;E&lt;/em&gt; [&amp;hellip;] such that for all &lt;em&gt;x&lt;/em&gt; in &lt;em&gt;E&lt;/em&gt;, &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)) = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果套用到電腦界 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，idempotency 性質可以詮釋成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;f&lt;/em&gt;：可以是 function 或是 API endpoint。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;x&lt;/em&gt;：可以是 argument 或是 API header &amp;amp; payload。&lt;/li&gt;
&lt;li&gt;如果 &lt;em&gt;f&lt;/em&gt; 是 idempotent，就代表：對 &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;) 執行 1 次產生的效果，與執行 &lt;em&gt;N&lt;/em&gt; 次產生的效果，完全一樣。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;譬如說，如果有一個管理商品庫存的服務：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Item&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*...*/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ItemInventory&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// 查詢庫存量   
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SetQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 設定庫存量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;DecreaseQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// 庫存量減一
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那麼，像以下這些動作，呼叫 1 次的效果，與呼叫 &lt;em&gt;N&lt;/em&gt; 次的效果一樣，即可稱為是 idempotent：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 查詢庫存量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 設定庫存量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SetQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SetQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SetQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;反之，像以下這些動作，呼叫 1 次的效果，與呼叫 &lt;em&gt;N&lt;/em&gt; 次的效果會&lt;strong&gt;不一樣&lt;/strong&gt;，即可稱為是 non-idempotent：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*...*/&lt;/span&gt;                              &lt;span class=&#34;c1&#34;&gt;// 起初庫存量為 100
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;DecreaseQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;// 庫存量會變成 99
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;DecreaseQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;// 庫存量會變成 98
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;DecreaseQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;// 庫存量會變成 97
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;non-idempotent-操作有必要存在嗎&#34;&gt;Non-idempotent 操作有必要存在嗎？&lt;/h2&gt;
&lt;p&gt;在 &lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_programming&#34;&gt;functional programming&lt;/a&gt; 思潮下，immutability 及 idempotency 似乎才是政治正確之舉。&lt;/p&gt;
&lt;p&gt;Non-idempotent 的操作，真的有必要存在嗎？&lt;/p&gt;
&lt;p&gt;譬如說，即使沒有 non-idempotent 的 &lt;code&gt;DecreaseQuantity&lt;/code&gt;，我們仍可透過 idempotent 的 &lt;code&gt;SetQuantity&lt;/code&gt; 來達到一樣的效果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// 起初庫存量為 100
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;numTarget&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SetQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numTarget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 庫存量會變成 99
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;numTarget&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SetQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numTarget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 庫存量會變成 98
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;numTarget&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SetQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numTarget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 庫存量會變成 97
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如此一來，是否真的沒有必要再留下 non-idempotent 的 &lt;code&gt;DecreaseQuantity&lt;/code&gt;？至少有兩件事需要思考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;語意層面的改變。原本 &lt;code&gt;DecreaseQuantity&lt;/code&gt; 的簽名，並沒有「庫存量」這一欄，也就是說，client 並不需要知道「目前庫存量」，即可進行「庫存量減一」。如果改寫成 &lt;code&gt;SetQuantity&lt;/code&gt; 版本，簽名不同，多了「庫存量」欄位，換句話說，原本不必知道的「庫存量」內容，現在就必須透露出來了——這改變了原本「庫存量減一」的操作語意。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同步問題。同一時間，萬一有別人也在透過這個新方法改動「庫存量」，就會發生 race condition。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，某些時候，non-idempotency 可能無法完全迴避。&lt;/p&gt;
&lt;h2 id=&#34;http-的-idempotency-規範&#34;&gt;HTTP 的 idempotency 規範&lt;/h2&gt;
&lt;p&gt;HTTP 對於 idempotency 有一些規範。像 HTTP/1.1 的規格書 &lt;a href=&#34;https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.1.2&#34;&gt;§9.1.2&lt;/a&gt; 就指出：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Methods can also have the property of &amp;ldquo;idempotence&amp;rdquo; in that (aside from error or expiration issues) the side-effects of &lt;em&gt;N&lt;/em&gt; &amp;gt; 0 identical requests is the same as for a single request. The methods &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; share this property. Also, the methods &lt;code&gt;OPTIONS&lt;/code&gt; and &lt;code&gt;TRACE&lt;/code&gt; SHOULD NOT have side effects, and so are inherently idempotent.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5789&#34;&gt;RFC 5789&lt;/a&gt; 也提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;PATCH&lt;/code&gt; is neither safe nor idempotent as defined by &lt;a href=&#34;https://tools.ietf.org/html/rfc2616&#34;&gt;RFC2616&lt;/a&gt;, Section 9.1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，綜合來說，在 HTTP 的標準規範當中，只有 &lt;code&gt;POST&lt;/code&gt; 及 &lt;code&gt;PATCH&lt;/code&gt; 不是 idempotent。&lt;/p&gt;
&lt;p&gt;對這些 HTTP 細節感興趣的，請參考 ihower 的〈&lt;a href=&#34;https://ihower.tw/blog/archives/6483&#34;&gt;HTTP Verbs：談 POST, PUT 和 PATCH 的應用&lt;/a&gt;〉一文。&lt;/p&gt;
&lt;h2 id=&#34;web-api-的-idempotency-問題&#34;&gt;Web API 的 idempotency 問題&lt;/h2&gt;
&lt;p&gt;前面的 Go 程式碼講的是 in process 場景。環境單純，沒有太多失敗、重試的未知狀況，不會有太大的 idempotency 問題。如果換成 out of process 場景，環境不再單純，網路環境不可靠，另一頭的通訊對象也不見得是穩定的，失敗、重試的未知狀況勢必增加，idempotency 就變成不得不去正視的議題。&lt;/p&gt;
&lt;p&gt;譬如說，如果把管理商品庫存服務實作成 RESTful API：&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;strconv&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;router&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 查詢庫存量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;router&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/inventory/quantity/:item_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;//...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;//...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 設定庫存量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;router&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;PUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/inventory/quantity/:item_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;//...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strconv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Atoi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;PostForm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SetQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;//...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 庫存量減一
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;router&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/inventory/quantity/:item_id/dec&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;//...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;DecreaseQuantity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;///
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;router&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;對於原本就是 idempotent 的 &lt;code&gt;GetQuantity&lt;/code&gt; 和 &lt;code&gt;SetQuantity&lt;/code&gt; 操作來說，換成 RESTful 版本並沒什麼問題。像以下這個例子中，Client 在 🅐 步驟向 Server 呼叫 query quantity 操作時，只要該資料沒被別人改動到，這個 🅐 步驟不管重試多少次，得到的結果都會是一樣的。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/03/restapi-idempotent.png&#34; alt=&#34;Idempotent API operations&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/03/restapi-idempotent.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Idempotent API operations&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;但是，對於原本就是 non-idempotent 的 &lt;code&gt;DecreaseQuantity&lt;/code&gt; 操作來說，一遇到失敗、重試的未知狀況就麻煩了。像以下這個例子中，Client 在 🅑 步驟向 Server 呼叫 decrease quantity 操作時，Server 及 DB 都完成了各自的任務，可惜當 Server 在回傳結果給 Client 時，因為網路不穩定而漏失訊息。&lt;/p&gt;
&lt;p&gt;Client 不會知道 🅑 背後涉及的各個環節究竟完成了多少，只會以為 🅑 步驟沒有生效，便主動以 🅑’ 步驟重試一次。Server 並不知道這個 🅑’ 只是個美麗的誤會，只能忠實地再執行一次 &lt;code&gt;DecreaseQuantity&lt;/code&gt; 操作。於是，&lt;code&gt;DecreaseQuantity&lt;/code&gt; 這個 non-idempotent 操作，就被錯誤地重複使用，造成錯誤的結果。&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/03/restapi-nonidempotent.png&#34; alt=&#34;Non-idempotent API operations&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/03/restapi-nonidempotent.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Non-idempotent API operations&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;這也是為什麼我們在一些沒有仔細處理 idempotency 的交易網站上，會看到這類警語：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;交易進行中，請勿按下【重新載入此頁】按鈕，以避免重複扣款。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是說，他們認為，倘若因為電腦或網路不穩定而頻頻手動重試，從而導致的任何不良後果，都是使用者不聽勸告的錯。&lt;/p&gt;
&lt;h2 id=&#34;向-tcp-取經&#34;&gt;向 TCP 取經&lt;/h2&gt;
&lt;p&gt;在不穩定的分散式系統中，對於 non-idempotent 的操作，該如何避免重試所引發的問題？&lt;/p&gt;
&lt;p&gt;不妨師法 TCP 吧，畢竟它算是在不可靠的 IP 傳輸環境中進行可靠傳輸的老祖宗了。&lt;/p&gt;
&lt;p&gt;每一個 TCP segment 的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure&#34;&gt;header&lt;/a&gt; 都帶有一個&lt;strong&gt;序列號&lt;/strong&gt; (&lt;strong&gt;seq&lt;/strong&gt;)，透過它，TCP 通訊的雙方，得以在不可靠的環境中，處理連線建立、流量控制、連線關閉等議題。&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 就以 TCP 的 3-way handshake 機制為例，雙方藉由 seq 來溝通是否成功地傳送與接收訊息：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/03/tcp-3way-handshake.png&#34; alt=&#34;TCP 3-way handshake&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/03/tcp-3way-handshake.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;TCP 3-way handshake&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;我們來分析 🅒 🅓 🅔 這幾種訊息丟失的狀況。&lt;/p&gt;
&lt;p&gt;如果 🅒 訊息在中途就丟失了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;那麼，Server 自然不會送出 🅓。&lt;/li&gt;
&lt;li&gt;既然 Client 遲遲沒收到 🅓，也就會繼續重試 🅒 (seq=&lt;em&gt;x&lt;/em&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 🅒 訊息成功送給 Server 了，但 🅓 訊息卻在中途就丟失了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;既然 Client 遲遲沒收到 🅓，就會繼續重試 🅒 (seq=&lt;em&gt;x&lt;/em&gt;)。&lt;/li&gt;
&lt;li&gt;Server 在收到 🅒 時，會根據 seq=&lt;em&gt;x&lt;/em&gt; 得知這是重複的訊息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 🅔 訊息在中途就丟失了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;既然 Server 遲遲沒收到 🅔，就會繼續重試 🅓 (seq=&lt;em&gt;y&lt;/em&gt;)。&lt;/li&gt;
&lt;li&gt;Client 在收到 🅓 時，會根據 seq=&lt;em&gt;y&lt;/em&gt; 得知這是重複的訊息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根據以上分析，我們可從 TCP 偷學一個祕訣：只要在 request 附上一個&lt;strong&gt;識別碼&lt;/strong&gt;，就能讓通訊雙方偵測出失敗重試的情況，以採取對應的措施。&lt;/p&gt;
&lt;p&gt;這就是 TCP 在 layer 4 進行的可靠傳輸措施。&lt;/p&gt;
&lt;h2 id=&#34;識別碼由誰來產生&#34;&gt;識別碼，由誰來產生？&lt;/h2&gt;
&lt;p&gt;這一招，不僅在 layer 4 行之有年，在 layer 7 也一樣管用。&lt;/p&gt;
&lt;p&gt;接下來的問題是：識別碼，由誰來產生？由 request 的接收方，還是發起方？&lt;/p&gt;
&lt;p&gt;識別碼可以由 request 接收方：server 產生。像 &lt;a href=&#34;https://www.amazon.com/dp/0596801688/138-6991958-6648417&#34;&gt;&lt;em&gt;Restful Web Services Cookbook&lt;/em&gt;&lt;/a&gt; §10.8 &amp;amp; §10.9 就建議，針對 non-idempotent 的操作，server 可先產生 &lt;a href=&#34;https://en.wikipedia.org/wiki/Cryptographic_nonce&#34;&gt;nonce&lt;/a&gt; 當作識別碼，將它當成參數添加到服務的 URI 上面，再請 client 透過這個加過料的 URI 來操作 server 的服務。&lt;/p&gt;
&lt;p&gt;也有人把識別碼的生成責任交給 request 發起方：client 來做。像 Stripe 官方提供的 &lt;a href=&#34;https://github.com/stripe/stripe-ruby/blob/1a20c2476d35d80e411e5a692727ed5438614d66/lib/stripe/stripe_client.rb#L747&#34;&gt;StripeClient 程式庫&lt;/a&gt;，針對 &lt;code&gt;POST&lt;/code&gt; 及 &lt;code&gt;DELETE&lt;/code&gt; 類型的操作，會先在 client 這邊產生 uuid v4 當作識別碼，將它添加到 HTTP header 中（此例為 &lt;code&gt;Idempotency-Key&lt;/code&gt;），再傳給 server：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# It is only safe to retry network failures on post and delete&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# requests if we add an Idempotency-Key header&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Stripe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_network_retries&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Idempotency-Key&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;簡單的概念，近年來較新的服務，尤其是與金流或電子商務有關的，似乎也很流行這種 “idempotency key” 手法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adyen: &lt;a href=&#34;https://docs.adyen.com/development-resources/api-idempotency&#34;&gt;API idempotency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Airbnb: &lt;a href=&#34;https://medium.com/airbnb-engineering/avoiding-double-payments-in-a-distributed-payments-system-2981f6b070bb&#34;&gt;Avoiding Double Payments in a Distributed Payments System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Square: &lt;a href=&#34;https://developer.squareup.com/docs/working-with-apis/idempotency&#34;&gt;Working with APIs: Idempotency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stitch Fix: &lt;a href=&#34;https://multithreaded.stitchfix.com/blog/2017/06/26/patterns-of-soa-idempotency-key/&#34;&gt;Patterns of Service-oriented Architecture: Idempotency Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stripe：&lt;a href=&#34;https://stripe.com/docs/api/idempotent_requests&#34;&gt;API Reference: Idempotent Requests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;概念很簡單，卻有個來歷不明的酷炫名詞 “&lt;a href=&#34;https://stripe.com/blog/idempotency&#34;&gt;idempotency key&lt;/a&gt;”。根據 Stripe 工程師 &lt;a href=&#34;https://twitter.com/brandur&#34;&gt;Brandur Leach&lt;/a&gt; 在 &amp;ldquo;&lt;a href=&#34;https://brandur.org/idempotency-keys&#34;&gt;Implementing Stripe-like Idempotency Keys in Postgres&lt;/a&gt;&amp;rdquo; 一文所說，這名詞是 Stripe 發明的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An &lt;strong&gt;idempotency key&lt;/strong&gt; is a unique value that’s generated by a client and sent to an API along with a request. The server stores the key to use for bookkeeping the status of that request on its end. If a request should fail partway through, the client retries with the &lt;em&gt;same&lt;/em&gt; idempotency key value, and the server uses it to look up the request’s state and continue from where it left off. &lt;strong&gt;The name “idempotency key” comes from Stripe’s API.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在沒有進一步翻案證據之前，暫時姑且接受「這是 Stripe 發明的」的說法吧。&lt;/p&gt;
&lt;h2 id=&#34;idempotency-key-的生成&#34;&gt;Idempotency key 的生成&lt;/h2&gt;
&lt;p&gt;理論上，任何機制，只要在合理範圍內具有唯一性，就能用來產生 idempotency key。&lt;/p&gt;
&lt;p&gt;但實務上，在實作 idempotency key 時，可能還需要考慮幾個議題：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;由資料庫自動產生，還是由程式邏輯層產生？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;純亂數，還是單調遞增？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;資料庫能夠自動替我們產生單調遞增序號。只要將 idempotency key 宣告成 MySQL 的 &lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/example-auto-increment.html&#34;&gt;&lt;code&gt;auto_increment&lt;/code&gt;&lt;/a&gt; 或 PostgreSQL 的 &lt;a href=&#34;https://www.postgresql.org/docs/current/datatype-numeric.html#DATATYPE-SERIAL&#34;&gt;&lt;code&gt;serial&lt;/code&gt;&lt;/a&gt; 之類的資料型態，再搭配像 MySQL 的 &lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_last-insert-id&#34;&gt;&lt;code&gt;last_insert_id()&lt;/code&gt;&lt;/a&gt; 或 PostgreSQL 的 &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-insert.html&#34;&gt;&lt;code&gt;insert returning&lt;/code&gt;&lt;/a&gt; 之類的查詢語法，即可一次搞定 idempotency key 生成與儲存。&lt;/p&gt;
&lt;p&gt;乍看之下很方便，不過，如果資料庫有分庫分表，就需要再額外處理，才能確保序號的唯一性。另一個或許更嚴重的缺點是，從架構潔癖的角度來看，違反了 &lt;a href=&#34;https://www.tenlong.com.tw/products/9789864342945&#34;&gt;clean architecture&lt;/a&gt; 的分層原則與相依原則：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;資料庫是個細節，我們將這些東西放在外頭，在那邊它們不會有什麼危害。&lt;/p&gt;
&lt;p&gt;資料庫不是資料模型。資料庫是一塊軟體，是提供對於資料存取的工具。它是一個低層級的細節——是一種機制。一名好的架構師，不會允許底層機制污染系統的架構。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同樣有架構潔癖的 DDD，也不喜歡過於仰賴資料庫機制，像 &lt;a href=&#34;https://www.amazon.com/dp/0321834577/ref=cm_sw_r_tw_dp_U_x_gp2zEbQ9DT5BB&#34;&gt;&lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt;&lt;/a&gt; 的 §5.2 就直接建議大家將序號產生機制放在 Repository 層。&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;如果要改由程式邏輯層產生 idempotency key，可能會直接套用 &lt;a href=&#34;https://en.wikipedia.org/wiki/Universally_unique_identifier&#34;&gt;uuid&lt;/a&gt;，甚至訴諸 &lt;a href=&#34;https://developer.twitter.com/en/docs/basics/twitter-ids&#34;&gt;Snowflake&lt;/a&gt;、&lt;a href=&#34;https://github.com/sony/sonyflake&#34;&gt;Sonyflake&lt;/a&gt;、&lt;a href=&#34;https://tech.meituan.com/2017/04/21/mt-leaf.html&#34;&gt;Leaf&lt;/a&gt; 這類分散式 ID 服務。不依賴資料庫，彈性大，也符合架構潔癖。&lt;/p&gt;
&lt;p&gt;不依賴資料庫，符合了架構潔癖，是否會因此犧牲了資料庫的效能？接下來我們就來探討這議題。&lt;/p&gt;
&lt;h2 id=&#34;idempotency-key-的儲存&#34;&gt;Idempotency key 的儲存&lt;/h2&gt;
&lt;p&gt;透過程式邏輯產生的 id，可粗分為三大類：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;純亂數：像 &lt;a href=&#34;https://www.uuidtools.com/uuid-versions-explained#version-4&#34;&gt;uuid v4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;局部單調遞增：像 &lt;a href=&#34;https://www.uuidtools.com/uuid-versions-explained#version-1&#34;&gt;uuid v1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;全域單調遞增：像 &lt;a href=&#34;https://developer.twitter.com/en/docs/basics/twitter-ids&#34;&gt;Snowflake&lt;/a&gt;、&lt;a href=&#34;https://github.com/sony/sonyflake&#34;&gt;Sonyflake&lt;/a&gt;、&lt;a href=&#34;https://tech.meituan.com/2017/04/21/mt-leaf.html&#34;&gt;Leaf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些 idempotency key 該如何儲存，才可與資料庫內建的單調遞增序號一較高下？&lt;/p&gt;
&lt;p&gt;理論上來說，在目前資料庫系統主流的 &lt;a href=&#34;https://en.wikipedia.org/wiki/B%2B_tree&#34;&gt;B+ tree&lt;/a&gt; 索引結構下，單調遞增的數值，會比純亂數來得有效率。因此，若不計資料欄位大小差異，三者的存取效率，理論上應該會是 Snowflake &amp;gt; uuid v1 &amp;gt; uuid v4。&lt;/p&gt;
&lt;p&gt;不過，我對於 PostgreSQL 提供的 &lt;a href=&#34;https://www.postgresql.org/docs/current/datatype-uuid.html&#34;&gt;uuid 資料型態&lt;/a&gt;格外感興趣：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL provides storage and comparison functions for UUIDs, but the core database does not include any function for generating UUIDs, because no single algorithm is well suited for every application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;從 PostgreSQL 原始碼 &lt;a href=&#34;https://github.com/postgres/postgres/blob/0a42a2e9ce8481a024d085f2cc526a366db8df59/src/include/utils/uuid.h#L17-L23&#34;&gt;uuid.h&lt;/a&gt; 及 &lt;a href=&#34;https://github.com/postgres/postgres/blob/master/src/backend/utils/adt/uuid.c&#34;&gt;uuid.c&lt;/a&gt; 來看，骨子裡是用 16 bytes 字元陣列來實作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* uuid size in bytes */&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define UUID_LEN 16
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_uuid_t&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID_LEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_uuid_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;


&lt;span class=&#34;cm&#34;&gt;/* internal uuid compare function */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;uuid_internal_cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_uuid_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_uuid_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;memcmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UUID_LEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/* hash index support */&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Datum&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;uuid_hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PG_FUNCTION_ARGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;pg_uuid_t&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PG_GETARG_UUID_P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash_any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UUID_LEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;對於 uuid 的存取性能，PostgreSQL 似乎是有備而來胸有成竹。&lt;/p&gt;
&lt;p&gt;因此，我針對 PostgreSQL 的 &lt;code&gt;uuid&lt;/code&gt; 資料型態，分別實驗「亂數」與「遞增數值」存取效率，順便也拿 &lt;code&gt;bigint&lt;/code&gt; 做對照組，看看這些排列組合，哪一種比較適合 idempotency key 用途：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Idempotency Key 類型&lt;/th&gt;
&lt;th&gt;演算法&lt;/th&gt;
&lt;th&gt;資料大小 (bytes)&lt;/th&gt;
&lt;th&gt;PostgreSQL 資料型態&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;亂數&lt;/td&gt;
&lt;td&gt;uuid v4&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;uuid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;遞增數值&lt;/td&gt;
&lt;td&gt;uuid v1&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;uuid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;遞增數值&lt;/td&gt;
&lt;td&gt;Snowflake&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;bigint&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;針對這些排列組合，我進行三組實驗：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;寫入 &lt;em&gt;N&lt;/em&gt; 筆資料：InsertUuidV1、InsertUuidV4、InsertSnowflake&lt;/li&gt;
&lt;li&gt;隨機存取 10% 資料，無 DB cache：SelectUuidV1/clean、InsertUuidV4/clean、InsertSnowflake/clean&lt;/li&gt;
&lt;li&gt;隨機存取 10% 資料，有 DB cache：SelectUuidV1/cache、InsertUuidV4/cache、InsertSnowflake/cache&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;實驗程式放在 &lt;a href=&#34;https://github.com/William-Yeh/idempotency-key-test&#34;&gt;https://github.com/William-Yeh/idempotency-key-test&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我的實驗環境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MacBook Pro&lt;/li&gt;
&lt;li&gt;CPU: 2.8 GHz 四核心Intel Core i7&lt;/li&gt;
&lt;li&gt;Go: 1.14&lt;/li&gt;
&lt;li&gt;PostgreSQL: 12.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先牛刀小試一下，實驗 10 萬筆資料：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/03/items-100k.png&#34; alt=&#34;Test with N=100k&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/03/items-100k.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Test with N=100k&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;乍看之下，三種 idempotency key 資料類型，彼此性能差異並不大。數量級分別是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;寫入 &lt;em&gt;N&lt;/em&gt; 筆資料：每秒能處理約 5*10³ 筆操作。&lt;/li&gt;
&lt;li&gt;隨機存取 10% 資料，無 DB cache：每秒能處理約 5*10⁴ 筆操作。&lt;/li&gt;
&lt;li&gt;隨機存取 10% 資料，有 DB cache：每秒能處理約 8*10⁴ 筆操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;放大十倍試試看，實驗 100 萬筆資料：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/03/items-1m.png&#34; alt=&#34;Test with N=1m&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/03/items-1m.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Test with N=1m&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;最後，實驗 300 萬筆資料，順便看看三種 idempotency key 資料類型佔用的索引空間：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2020/03/items-3m.png&#34; alt=&#34;Test with N=3m&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2020/03/items-3m.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Test with N=3m&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;執行速度差異不大。至於索引結構，則是 uuid v1 顯著偏高，而 uuid v4 與 snowflake 無太大差異。&lt;/p&gt;
&lt;p&gt;綜合以上實驗，PostgreSQL 的 &lt;code&gt;uuid&lt;/code&gt; 效能十分優異，足堪大任。我建議：如果你的 idempotency key 想要是亂數，可以直接把 uuid v4 存在 &lt;code&gt;uuid&lt;/code&gt; 欄位中；如果你的 idempotency key 想要是單調遞增數值，不妨考慮把 snowflake 存在 &lt;code&gt;bigint&lt;/code&gt; 欄位中。&lt;/p&gt;
&lt;p&gt;如果你用的是其他資料庫系統，此處的建議不見得適用，請自行實驗。&lt;/p&gt;
&lt;h2 id=&#34;致謝&#34;&gt;致謝&lt;/h2&gt;
&lt;p&gt;實驗設計過程中，從 Carousell 同事得到許多建議，特此致謝。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://careers.carousell.com/&#34;&gt;We&amp;rsquo;re hiring!&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;嚴格來說，電腦領域講的 &amp;ldquo;idempotency&amp;rdquo;，已經與數學領域講的 &amp;ldquo;idempotency&amp;rdquo; 不盡相同了，可說是一種假借。詳情請見維基百科的說明： &lt;a href=&#34;https://en.wikipedia.org/wiki/Idempotence#Computer_science_meaning&#34;&gt;https://en.wikipedia.org/wiki/Idempotence#Computer_science_meaning&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;對於 TCP 序列號機制感興趣的，可參考鄭中勝寫的三篇介紹文章：〈&lt;a href=&#34;https://notfalse.net/26/tcp-seq&#34;&gt;TCP 序列號 (Sequence Number, SEQ)&lt;/a&gt;〉、〈&lt;a href=&#34;https://notfalse.net/7/three-way-handshake&#34;&gt;TCP 三向交握 (Three-way Handshake)&lt;/a&gt;〉、〈&lt;a href=&#34;https://notfalse.net/24/tcp-flow-control&#34;&gt;TCP 流量控制 (Flow Control)&lt;/a&gt;〉。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;在 DDD 中，id 生成機制很適合放在 Repository 層。如果你沒有 &lt;a href=&#34;https://www.amazon.com/dp/0321834577/ref=cm_sw_r_tw_dp_U_x_gp2zEbQ9DT5BB&#34;&gt;&lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt;&lt;/a&gt; 這本書，也可以參考劉鳳軒寫的〈&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10223150&#34;&gt;DDD 戰術設計：Entity 概念與實作&lt;/a&gt;〉一文。 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
      
    </item>
    
    <item>
      <title>求職，別忘了突出你的亮點</title>
      <link>//william-yeh.net/post/2020/01/career-spotlight/</link>
      <pubDate>Wed, 08 Jan 2020 22:30:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2020/01/career-spotlight/</guid>
      
        <description>&lt;p&gt;在網路上看到 Joe 喟然&lt;a href=&#34;https://www.facebook.com/story.php?story_fbid=3000276969985335&amp;amp;id=100000091845448&#34;&gt;嘆曰&lt;/a&gt;：「今天重要功課：仔細看過明天 20 位&lt;a href=&#34;https://www.darencademy.com/activity/view/id/16419&#34;&gt;履歷課&lt;/a&gt;同學的履歷以及繳交的功課。說起來這堂課好像是我們最耗能的一堂課，完全是做功德的一堂課。」&lt;/p&gt;
&lt;p&gt;我，身為履歷表價值鏈另一端的面試官，也很能瞭解這番滋味。&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;近年來，履歷教戰守則廣傳，有專書，甚至還有專門課程。理論上，「不懂得 &lt;del&gt;包裝美化履歷&lt;/del&gt; 正確呈現履歷」的低級錯誤應該會越來越少見——其實不然。驚訝的是，即使是獵頭轉來的履歷也常無法倖免，真不知該怎麼說了。&lt;/p&gt;
&lt;p&gt;遇到比較多的反例，是沒有&lt;strong&gt;亮點&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;年資不必然是亮點&#34;&gt;年資，不必然是亮點&lt;/h2&gt;
&lt;p&gt;先破除一個迷思：年資，不必然是忠誠，不必然是專注，不必然是匠人精神。一言以蔽之，不必然是亮點。&lt;/p&gt;
&lt;p&gt;猶記 2016 年擔任軟體工程師面試官時，看著其中某一份履歷，我寫下如此感觸：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;收到一份履歷，他在某接案公司待了 &lt;em&gt;N&lt;/em&gt; 年。&lt;/p&gt;
&lt;p&gt;很可惜。在我眼中，這只值兩年呀。&lt;/p&gt;
&lt;p&gt;對接案公司無不敬之意。但是，字裡行間，實在看不出反駁我對他「只有兩年的工作經驗，只不過重複了 &lt;em&gt;N&lt;/em&gt; 年」認知錯誤的理由。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其實，多年以來，每一段面試高峰期都會出現同樣的觀察與感觸——看不出求職者的亮點，尤其是與職務相關的亮點，遑論職涯層次的亮點。&lt;/p&gt;
&lt;p&gt;書面的履歷表也就罷了。更麻煩的是，怕誤判，約來面試，試著口頭引導一下，都不見得引導得出來。&lt;/p&gt;
&lt;p&gt;面試官當下的任務，是替用人單位選才，而不是當應徵者的職涯諮詢者。&lt;/p&gt;
&lt;p&gt;請自己先正確表述你的亮點，而不是徒留年資流水帳。&lt;/p&gt;
&lt;h2 id=&#34;成長性&#34;&gt;成長性&lt;/h2&gt;
&lt;p&gt;不同企業、不同職種，側重的亮點或許不盡相同。&lt;/p&gt;
&lt;p&gt;在我所處的軟體研發領域，「成長性」是非常重要的。除非某職缺有立即上戰場的急迫性，否則，我會側重在求職者的成長性，包括硬技能成長性及軟技能成長性；有時候，成長性甚至會重於即戰力。&lt;/p&gt;
&lt;p&gt;什麼樣的成長性才稱得上是亮點？&lt;/p&gt;
&lt;p&gt;且讓我套用裘凱宇老師在【&lt;a href=&#34;https://www.ekoob.com.tw/course/6642&#34;&gt;過好人生學&lt;/a&gt;】課程所講的「&lt;a href=&#34;https://youtu.be/-EHOn0UxMys&#34;&gt;站位／靶位&lt;/a&gt;」概念來分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;固定站位：在單一領域，發展到學徒、創造、達人的哪一個階段？&lt;/li&gt;
&lt;li&gt;固定靶位：在單一領域，持續創造了什麼成果？&lt;/li&gt;
&lt;li&gt;固定站位，不固定靶位：多元發展&lt;/li&gt;
&lt;li&gt;不固定站位，固定靶位：跨界創意&lt;/li&gt;
&lt;li&gt;不固定站位，不固定靶位：多元發展 ＋ 跨界創意&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;站位／靶位的固定與否，是個人的主觀選擇（或被動的被選擇）；不過，不管是屬於哪一種排列組合，請試著客觀回顧履歷一遍，能否據以勾勒出某些清晰的移動路徑？&lt;/p&gt;
&lt;p&gt;成長性，從這路徑就看得出來了。&lt;/p&gt;
&lt;p&gt;你，是一直在打怪升級成長 &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，是在死守四行倉庫，還是&lt;a href=&#34;https://www.darencademy.com/article/view/id/15393&#34;&gt;在宇宙漂流&lt;/a&gt;？&lt;/p&gt;
&lt;h2 id=&#34;敏銳於遊戲規則&#34;&gt;敏銳於遊戲規則&lt;/h2&gt;
&lt;p&gt;履歷，畢竟是對既有產品（「個人」）既成事實的推銷；說句老實話，不免有為時已晚的風險。更可靠的，應該是在走到這田地之前，就下意識讓自己在站位／靶位兩方面都逐漸成長。&lt;/p&gt;
&lt;p&gt;成長，不是臨時抱佛腳一蹴可幾，更不是刻舟求劍緣木求魚。&lt;/p&gt;
&lt;p&gt;成長，需要敏銳於職場的遊戲規則。&lt;/p&gt;
&lt;p&gt;其一：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其實，每一個位子都有可能發光發熱，重點仍在於是否有自覺進行「&lt;strong&gt;換位思考&lt;/strong&gt;」及「&lt;strong&gt;系統思考&lt;/strong&gt;」。&lt;/p&gt;
&lt;p&gt;有自覺，你的一年工作經驗，就有別人 &lt;em&gt;N&lt;/em&gt; 年的價值；反之，你的 &lt;em&gt;N&lt;/em&gt; 年工作經驗，就只有一年的價值。&lt;/p&gt;
&lt;p&gt;   &amp;mdash; Quote: &lt;a href=&#34;https://twitter.com/william_yeh/status/766813695070449664&#34;&gt;2016-08-20 Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其二：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是在大公司就一定學得深，不是在新創就一定學得廣。&lt;/p&gt;
&lt;p&gt;重點仍在於自己。在於「自己有沒有系統思考及換位思考的自覺及行動」。&lt;/p&gt;
&lt;p&gt;在於&lt;strong&gt;專業態度&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;「專業技能」固然重要，但是，能夠讓自己從流水帳的制式履歷表欄位中脫穎而出的，終究是「專業態度」。很準。只要針對每一份履歷表，個別客製化追問一兩次，幾乎就能分辨出哪些人有下意識追求「專業態度」的成長。&lt;/p&gt;
&lt;p&gt;&amp;mdash; Quote: 〈&lt;a href=&#34;//william-yeh.net/post/2016/07/professional-attitude/&#34;&gt;專業態度的養成&lt;/a&gt;〉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其三：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;許多事情，跟你身在大公司還是小公司是低度相關的。&lt;strong&gt;心智框架&lt;/strong&gt;，是要靠自己主動觀察、取經、思考的。&lt;/p&gt;
&lt;p&gt;   &amp;mdash; Quote: &lt;a href=&#34;https://twitter.com/william_yeh/status/765158230364344320&#34;&gt;2016-08-15 Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;成長，是下意識的選擇，是用持續的意志去磨銳遊戲規則的基本功：換位思考、系統思考、專業態度、心智框架。&lt;/p&gt;
&lt;h2 id=&#34;求人找亮點&#34;&gt;求人找亮點？&lt;/h2&gt;
&lt;p&gt;大環境長期低薪，促使許多人尋求更多元的選項。就連「副業」這個老詞彙，居然也孳生「斜槓」這個聽起來更新潮、也更容易炒作的詞彙。職涯、生涯的重定位，一時之間蔚為風潮。&lt;/p&gt;
&lt;p&gt;是真需求也好，是炒作起來的需求也好，有需求，就有供給。於是乎，坊間有了《&lt;a href=&#34;https://www.books.com.tw/products/0010733134&#34;&gt;做自己的生命設計師&lt;/a&gt;》這樣的書，有了所謂【設計你的人生】工作坊，甚至像 S 姐在〈&lt;a href=&#34;https://betweengos.com/career-job-development-transformation/&#34;&gt;默默的，你認知的這些工作都已轉型&lt;/a&gt;〉所說，開始有了 &amp;ldquo;career coach&amp;rdquo; 這樣的新興職業。&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;打著 &amp;ldquo;career coach&amp;rdquo; 名號的，在這一兩年，真的如雨後春筍（尤其是在 FB &amp;amp; LinkedIn）。&lt;/p&gt;
&lt;p&gt;多試試，無妨；但，請慎選建議。畢竟，自稱 &amp;ldquo;coach&amp;rdquo; 者，並不總是 coach。&lt;/p&gt;
&lt;h2 id=&#34;正派的推薦&#34;&gt;正派的推薦&lt;/h2&gt;
&lt;p&gt;其實我真的很鼓勵求職者，在丟出履歷、赴約面試之前，先讀讀一些正派的相關書籍，或尋求正派的諮詢者。畢竟，不是每位面試官都想在緊湊的當下順便兼任求職諮詢。&lt;/p&gt;
&lt;p&gt;面試官很累的，別奢想他們都是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%8D%9E%E5%92%8C&#34;&gt;卞和&lt;/a&gt;。請自己打磨出你的亮點。&lt;/p&gt;
&lt;p&gt;四處征戰的應徵者也是很累的，我知道。所以，請不要奢想你是當下就能七步成詩感動天地的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%9B%B9%E6%A4%8D&#34;&gt;曹植&lt;/a&gt;，請事先就打磨出你的亮點。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;之所以會強調「正派」二字，是因為⋯⋯在某些書上看到一些耍小聰明的招數。說實在的，那些小聰明，請不要秀出來～～&lt;/p&gt;
&lt;h3 id=&#34;書籍&#34;&gt;書籍&lt;/h3&gt;
&lt;p&gt;推薦這幾本正派的書。不管是身為面試者還是被面試者，我都從中獲得許多啟發：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010779401&#34;&gt;但願你因工作而閃亮&lt;/a&gt;》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010843696&#34;&gt;2030 轉職地圖&lt;/a&gt;》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《&lt;a href=&#34;http://www.books.com.tw/products/0010641668&#34;&gt;三年後，你的工作還在嗎？&lt;/a&gt;》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《&lt;a href=&#34;http://www.books.com.tw/products/0010733434&#34;&gt;工作愈換愈好，得有這些本事&lt;/a&gt;》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《&lt;a href=&#34;http://www.books.com.tw/products/0010446102&#34;&gt;轉職必勝班&lt;/a&gt;》&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;對外商或國際化環境感興趣的，除了《&lt;a href=&#34;https://www.books.com.tw/products/0010843696&#34;&gt;2030 轉職地圖&lt;/a&gt;》之外，可再參考以下這本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010834465&#34;&gt;外商、大企業求職秘笈&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至於暗黑一點的，就不公開列了。&lt;/p&gt;
&lt;h3 id=&#34;實體課程&#34;&gt;實體課程&lt;/h3&gt;
&lt;p&gt;［Disclaimer］以下列的課程，我都沒上過，也沒拿工商服務費，我的信心，純粹根據他們過往發表極有洞見的內容而來。請自行判斷察驗。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;大人學：&lt;a href=&#34;https://www.darencademy.com/activity/view/id/16419&#34;&gt;A103 / 履歷優化與個人品牌重塑&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;獵頭的日常 (Lynn)：&lt;a href=&#34;https://lihi1.com/qFb72/0105fbpost&#34;&gt;完備你的履歷轉職力&lt;/a&gt;、&lt;a href=&#34;https://lihi1.com/sEKiE/0105fbpost&#34;&gt;提升你的面試潛勝率&lt;/a&gt;、&lt;a href=&#34;https://lihi1.com/9sGg6/0105fbpost&#34;&gt;專屬你的優勢說明書&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至於暗黑一點的，就不公開列了。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;詳見〈&lt;a href=&#34;//william-yeh.net/post/2019/12/tech-interview/&#34;&gt;技術面試的小觀點&lt;/a&gt;〉一文。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;詳見〈&lt;a href=&#34;//william-yeh.net/post/2016/12/game-frame/&#34;&gt;打怪升級路線圖&lt;/a&gt;〉一文。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;獵頭 S 姐甚至說：「有點沮喪，因為 LinkedIn 都找得到以下這些位置，但在 104 卻用手指頭算得出來，但為什麼大家還是要瘋狂依賴 104？」 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
      
    </item>
    
    <item>
      <title>2019 個人回顧</title>
      <link>//william-yeh.net/post/2019/12/2019-retrospective/</link>
      <pubDate>Thu, 26 Dec 2019 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/12/2019-retrospective/</guid>
      
        <description>&lt;p&gt;年初，告別服務五年的單位，走出舒適圈，歸零，重啟。&lt;/p&gt;
&lt;p&gt;如果說 &lt;a href=&#34;//william-yeh.net/post/2018/12/2018-retrospective/&#34;&gt;2018&lt;/a&gt; 是收攝靜觀的一年，那麼，2019 可謂驚滔駭浪了。做對了一些事，也犯下許多蠢事。&lt;/p&gt;
&lt;p&gt;到了年終，又開始要做個總回顧，再對來年許願。去除一些不便揭露的事情，以下是簡單的回顧。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/12/ippo.jpg&#34; alt=&#34;鷹村對幕之內畫的那條線，我要踏過去了。&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/12/ippo.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;鷹村對幕之內畫的那條線，我要踏過去了。&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;補血課程&#34;&gt;補血課程&lt;/h2&gt;
&lt;p&gt;這一年，由於時間問題，參加的補血課程大幅減少。只能精選再精選。&lt;/p&gt;
&lt;p&gt;實體課程中，收穫最大的，就屬這場暌違多年經典課程的復刻版：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shop.darencademy.com/product/view/id/78&#34;&gt;201a / 專案管理個案實戰 - 利害關係人與需求管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若要用一句話來描述它，我會說，這是一門&lt;strong&gt;回歸本質&lt;/strong&gt;的課。畢竟，專案的起點，就是目標與限制；而左右目標與限制的最大因素，就是利害關係人與需求管理。擒賊不擒王，後續的種種規劃執行手法只是徒然在失焦的漩渦中打轉。&lt;/p&gt;
&lt;p&gt;個案攻防一如往常的燒腦，彷彿把過去幾年幾門課的核心都橫向統整了一輪：&lt;a href=&#34;https://shop.darencademy.com/product/view/id/1&#34;&gt;101&lt;/a&gt;、&lt;a href=&#34;https://shop.darencademy.com/product/view/id/28&#34;&gt;A101&lt;/a&gt;、&lt;a href=&#34;https://shop.darencademy.com/product/view/id/13&#34;&gt;302&lt;/a&gt;、&lt;a href=&#34;https://shop.darencademy.com/product/view/id/70&#34;&gt;510&lt;/a&gt;⋯⋯覆盤檢討，照見許多這陣子刻意練習，但還沒到位之處。&lt;/p&gt;
&lt;p&gt;充電，重新得到力量。&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/12/201a.jpg&#34; alt=&#34;201a / 利害關係人與需求管理&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/12/201a.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;201a / 利害關係人與需求管理&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;除了實體課程，我也嘗試了一些線上課程。不過，截至目前為止，真正 100% 完課，且不時還會回頭複習的，就只有裘凱宇老師的這門課：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ekoob.com.tw/course/6642&#34;&gt;【過好人生學】除了熱情，你更需要知道的事&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;裘凱宇老師主辦的實體講座我參加過幾次了，也有幾本他的書，對他開的線上課程，我是充滿信心的。&lt;a href=&#34;https://youtu.be/-EHOn0UxMys&#34;&gt;試聽&lt;/a&gt; 30 分鐘，很快就決定參加。&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/-EHOn0UxMys&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;難得有這一系列我不忍心 1.25 倍速快轉的中文音頻。在通勤的捷運車廂，裘老師溫暖療癒的嗓音，猶如及時雨，撫慰了我徬徨的心。&lt;/p&gt;
&lt;p&gt;隨著課程進行，我開始正視自己三個老毛病：熱情症候群、堅持妄想症、理想偏執狂，更老老實實照著課程練習，重新扎根四個關鍵能力：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;創造結果&lt;/strong&gt;的能力：聚焦、優化、反饋&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;建立生態圈&lt;/strong&gt;的能力：學徒、創造、達人&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;做決定&lt;/strong&gt;的能力：期望值、預想最差結果、正確歸因、時間軸思考&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;創造意義&lt;/strong&gt;的能力：解決問題、迎向挑戰、投入行動&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;將近 4 小時的線上音頻課程，猶如一場觀念重塑之旅，對職場生涯本質再一次深思與探索，對我幫助極大。&lt;/p&gt;
&lt;h2 id=&#34;脫敏&#34;&gt;脫敏&lt;/h2&gt;
&lt;p&gt;2019 年，到了一間素有敏捷標竿之名的外商。&lt;/p&gt;
&lt;p&gt;首當其衝的難關，不是敏捷文化，是商務英語。&lt;/p&gt;
&lt;p&gt;聽與說，向來是我的罩門。尤其是遠距 con-call，通訊品質變數叢生，少了現場白板輔助，純以赤裸裸的聽力應付南腔北調，令人不寒而慄。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/in/jill-chang-89753817/&#34;&gt;張瀞仁 (Jill)&lt;/a&gt; 在《&lt;a href=&#34;https://www.books.com.tw/products/0010794006&#34;&gt;安靜是種超能力&lt;/a&gt;》提到：內向者的&lt;strong&gt;能量&lt;/strong&gt;較易耗盡，需要妥善管理能量。我則是有另一番新體悟：與外國人隔空對話，也是很耗能量的～～～&lt;/p&gt;
&lt;p&gt;能量，要如何保護？&lt;/p&gt;
&lt;p&gt;我從 Jill 書中看到 &amp;ldquo;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%84%B1%E6%95%8F%E6%B3%95&#34;&gt;desensitization&lt;/a&gt;&amp;rdquo; 這個看起來很管用的點子：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;脫敏&lt;/strong&gt;是不斷地讓自己暴露在恐懼的事物前，讓大腦中的杏仁核逐漸降低敏感度（譬如讓有懼高症的人常常爬高梯），當然，過程中必須仔細控制恐懼程度。或許光用想的就很可怕，但只要跨出第一步，其他就會漸漸好轉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我得盡快尋找具體的方法，脫敏自己對於 con-call in English 的恐懼；而且，要先聚焦，精準地脫敏對於技術領域商務英語的 con-call 恐懼。&lt;/p&gt;
&lt;p&gt;首先，鎖定這四本核心教材：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clare: 《&lt;a href=&#34;https://www.books.com.tw/products/0010635304&#34;&gt;商務英語的祕密&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;Clare: 《&lt;a href=&#34;https://www.books.com.tw/products/0010747532&#34;&gt;商務英文大解密&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;Quentin Brand: 《&lt;a href=&#34;http://www.betamedia.com.tw/book.aspx?no=1707&amp;amp;bno=8130&#34;&gt;愈忙愈要學 100 個商業動詞&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;Quentin Brand: 《&lt;a href=&#34;http://www.betamedia.com.tw/book.aspx?no=1704&amp;amp;bno=8144&#34;&gt;愈忙愈要學英文：大家開會說英文&lt;/a&gt;》&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;尤其是 &lt;a href=&#34;http://clarehsu0724.blogspot.com/&#34;&gt;Clare&lt;/a&gt; 介紹的&lt;a href=&#34;http://clarehsu0724.blogspot.com/p/blog-page_1930.html&#34;&gt;綜效式商英學習法&lt;/a&gt;及&lt;a href=&#34;http://clarehsu0724.blogspot.com/p/blog-page_23.html&#34;&gt;自學商英教材&lt;/a&gt;，乍看之下很蠢，就是傻傻的跟述 (&lt;strong&gt;shadow&lt;/strong&gt;)、朗誦 (&lt;strong&gt;recite&lt;/strong&gt;)、聽寫 (&lt;strong&gt;dictate&lt;/strong&gt;)。&lt;/p&gt;
&lt;p&gt;這方法，十幾年前張嘉倩的書有講，郭岱宗的書有講，現在 Clare 的書還是這麼講。而且這方法也非常吻合裘凱宇老師【&lt;a href=&#34;https://www.ekoob.com.tw/course/6642&#34;&gt;過好人生學&lt;/a&gt;】課程所講的「建立學習反饋機制」要點：小時段、小行為、小實驗、小挑戰。&lt;/p&gt;
&lt;p&gt;似拙，實巧。&lt;/p&gt;
&lt;p&gt;這麼多人都這麼講了。十年前，我當耳邊風；我再不照著做，再過十年，還是會怨嘆一直原地踏步。傻得願意相信，就對了。&lt;/p&gt;
&lt;p&gt;於是，我就這樣老老實實地進行英聽特訓。光是第一周，就感受到在「脫敏」方面有一點效果，大受鼓舞。&lt;/p&gt;
&lt;p&gt;要持續下去。&lt;/p&gt;
&lt;h2 id=&#34;回歸基本功&#34;&gt;回歸基本功&lt;/h2&gt;
&lt;p&gt;在外商，異國異地 con-call 開會，已經是一種低情境的溝通了 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，使用英語，更是嚴重限縮表達力的頻寬。低頻寬、低情境，顛覆我多年的認知。&lt;/p&gt;
&lt;p&gt;簡報尤然。我過去慣常的簡報模式，高度仰賴口語埋哏與鋪陳，快慢交錯的視覺節奏更是拿手好戲。可惜的是，以現在自己的英語口語程度，其實很難支撐得起駕馭得了這種簡報風格。&lt;/p&gt;
&lt;p&gt;記得自己簡報風格的轉變關鍵，第一是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%AB%98%E6%A9%8B%E6%B5%81%E7%B0%A1%E5%A0%B1%E6%B3%95&#34;&gt;高橋流&lt;/a&gt;，第二是 &lt;a href=&#34;https://prezi.com/&#34;&gt;Prezi&lt;/a&gt;，第三是 &lt;a href=&#34;https://en.wikipedia.org/wiki/Keynote_(presentation_software)&#34;&gt;Keynote&lt;/a&gt;。現在，好像遇到第四個轉捩點了。投影片好像應該要更瘦身、更樸素才是⋯⋯&lt;/p&gt;
&lt;p&gt;我更發現，為了突破低頻寬低情境的禁錮，不只簡報風格，不只溝通風格，甚至連更基本的職場思維也要轉變。套句裘凱宇老師【&lt;a href=&#34;https://www.ekoob.com.tw/course/6642&#34;&gt;過好人生學&lt;/a&gt;】課程所講的，我需要踏實走一次「學徒」階段。我得盡快尋找具體的方法，從頭練習職場基本功——我需要學習在低情境、低頻寬處境下更簡潔、更高效的風格，還得具有某種跨文化的通用性。&lt;/p&gt;
&lt;p&gt;最後，我鎖定這兩本，重新蹲馬步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;功夫老師：《&lt;a href=&#34;https://www.books.com.tw/products/0010681486&#34;&gt;不懂這些，別想加薪&lt;/a&gt;》&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010811943&#34;&gt;埃森哲顧問教你６堂回報的話術&lt;/a&gt;》&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:20em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/12/job-basics.jpg&#34; alt=&#34;蹲馬步的書：職場基本功&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/12/job-basics.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;蹲馬步的書：職場基本功&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;不要被狀似聳動的書名騙了。這兩本書作者都有管顧背景，內容扎實，且相呼應之處甚多。讀到後來，發現，這不僅是話術，更是&lt;strong&gt;職場思考&lt;/strong&gt;的基本功。&lt;/p&gt;
&lt;p&gt;譬如說，《&lt;a href=&#34;https://www.books.com.tw/products/0010681486&#34;&gt;不懂這些，別想加薪&lt;/a&gt;》介紹的「一分鐘口頭報告」要點，就跟《&lt;a href=&#34;https://www.books.com.tw/products/0010811943&#34;&gt;埃森哲顧問教你６堂回報的話術&lt;/a&gt;》介紹的「自我主導說明」形式非常相似。既然英雄所見略同，原理沒問題，就老老實實照著功夫老師交代的方式來做：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;接下來便是要勤於練習並運用。你可以將「一分鐘工作進度口頭報告表」和「一分鐘問題現況口頭報告表」兩個表格列印出來隨身攜帶，未來要向主管報告前，依表格中的方式和提醒進行思考，在一分鐘內精準又明快的做好口頭報告。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有時我也會切換成英文來練習：特地從商英教父 Quentin Brand 幾本書尋找對應的罐頭 set phrases，偷學一些得體的應對方法。&lt;/p&gt;
&lt;p&gt;自從開始混搭數種低頻寬低情境的方法來刻意練習，幾個月下來，雖然自承還沒進步多少，也常常犯錯，卻已經開始敏銳看到許多反例的問題。值此，不禁想起《神雕俠侶》中甫遭斷臂之禍，卻別有一番奇遇的楊過：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如此練劍數日，楊過提著重劍時手上已不如先前沉重，擊刺揮掠，漸感得心應手。同時越來越覺以前所學劍術變化太繁，花巧太多，想到獨孤求敗在青石上所留「&lt;strong&gt;重劍無鋒，大巧不工&lt;/strong&gt;」八字，其中境界，遠勝世上諸般最巧妙的劍招。他一面和神雕搏擊，一面凝思劍招的去勢回路，但覺越是平平無奇的劍招，對方越難抗禦。比如挺劍直刺，只要勁力強猛，威力遠比玉女劍法等變幻奇妙的劍招更大。&lt;/p&gt;
&lt;p&gt;當晚他竟不安睡，在水中悟得了許多順刺、逆擊、橫削、倒劈的劍理，到這時方始大悟，以此使劍，真是無堅不摧，劍上何必有鋒？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是的，「重劍無鋒，大巧不工」。&lt;/p&gt;
&lt;h2 id=&#34;本質練習&#34;&gt;本質練習&lt;/h2&gt;
&lt;p&gt;楊過有神雕幫忙練劍，我沒有。只好私底下設計一些練劍方法與儀式。&lt;/p&gt;
&lt;p&gt;譬如說，《&lt;a href=&#34;https://www.books.com.tw/products/0010811943&#34;&gt;埃森哲顧問教你６堂回報的話術&lt;/a&gt;》提出兩則思考要點：具體化 (crystallize) 及概述 (summarize)。拿我熟悉的議題小試須臾，驚覺：我以為我知道，但其實我不知道。&lt;/p&gt;
&lt;p&gt;該向幾年前的自己看齊，重拾學徒之心，對這些我以為我知道的東西從頭演繹一番。&lt;/p&gt;
&lt;p&gt;因此，我在筆記軟體開設【本質練習】專區，不敢說每天，但至少常常拿來重整精煉自己所知的事物。譬如說，以下是我對某些 agile/devops/arch 議題的私房詮釋（這只是截至目前的版本）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Agile 本質簡述：一種以高速、高頻率 PDCA 循環的角度，處理複雜問題的態度及方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cloud native 本質簡述：An architectural style designed around elasticity and anti-fragility in a massive dynamic environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Container 本質簡述：一種將 異質性 應用程式 &amp;amp; 相依執行環境 予以統一封裝 的高效率單位與機制 (An efficient packaging unit and mechanism for heterogeneous apps and dependent environment)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DevOps 本質簡述：Engineering practices &amp;amp; culture to glue dev &amp;amp; ops to evolve a high performing team.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes 本質簡述：大規模 微服務容器 自動化調度 的產業標準平臺 (An industry standard platform for orchestrating containerized microservices at scale)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Microservices 本質簡述：「單一職責介面」與「去中心化」的架構設計風格 (An architecture style based on SRP interface and decentralization)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scrum 本質簡述：一種經驗主義式的敏捷實踐流程，擅長高強度操練經驗曲線 (An agile process based on empiricism to train experience curve in a high-intensity style)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我也常常用心智圖來鋪陳這些具體化的本質概述。近來更體會到，以前一直把心智圖用錯了——心智圖，不是拿來讀的，是拿來畫的。&lt;/p&gt;
&lt;p&gt;如此練劍數月，體會到難以言喻的好處。這種本質修練，應該會一直持續下去吧。&lt;/p&gt;
&lt;h2 id=&#34;敏捷基本功&#34;&gt;敏捷基本功&lt;/h2&gt;
&lt;p&gt;手持玄鐵重劍，為之四顧，躊躇滿志，忍不住對所見所聞臧否巷議。&lt;/p&gt;
&lt;p&gt;譬如說，看到一些敏捷心靈雞湯文章說要換位思考、要 QBQ，就忍不住提出修正觀點：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;QBQ 和同理心，誤用，或是無限上綱使用，很容易被歸為資方的洗腦工具。&lt;/p&gt;
&lt;p&gt;越來越覺得，欠缺 QBQ，不全然是當事人自己不正面思考、不當責的問題，常常也是結構面造成的。譬如：&lt;a href=&#34;//william-yeh.net/post/2019/01/scrum-good-to-great/#heading4&#34;&gt;刺蝟原則&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;沒有刺蝟原則，就很難要求 ownership，也就更難要求 QBQ 或同理心。所以，一路溯源，就跟管理界的老生常談搭上線了。&lt;/p&gt;
&lt;p&gt;現在，我逐漸傾向：怪罪敏捷之前，先反思：是不是連核心的管理與領導思路都歪掉了呢？或許，那才是基本功呀。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;譬如說，看到君婷老師〈&lt;a href=&#34;https://www.projectup.net/article/view/id/16580&#34;&gt;為什麼團隊總是對目標無感？&lt;/a&gt;〉一文提到：「你的團隊有多麼目標導向，取決於你有多強大的讓團隊精準&lt;strong&gt;理解並聚焦目標&lt;/strong&gt;能力，這需要練習，更需要準備。」就忍不住附和：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這，真的是談 KPI 或更潮的 OKR 之前，就該先磨練的基本功。&lt;/p&gt;
&lt;p&gt;基本功沒到位，空談許多炫酷潮詞，是枉然的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;譬如說，看到君婷老師〈&lt;a href=&#34;https://www.projectup.net/article/view/id/16587&#34;&gt;到底是誰殺了敏捷？&lt;/a&gt;〉一文提到：「相信組織在導入敏捷前，一定花了許多時間與精力說服老闆、克服文化、組織重建、團隊成熟度的問題，但開始正式 run 敏捷之後，卻忘了最重要的&lt;strong&gt;利害關係人&lt;/strong&gt;，其心中最要緊的&lt;strong&gt;價值&lt;/strong&gt;。」又忍不住附和：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;熊熊想到去年發表的那張&lt;a href=&#34;https://www.slideshare.net/williamyeh/agile-transition-a-toc-perspective&#34;&gt;敏捷導入 CLD&lt;/a&gt; &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;起手式，很重要。看懂局與勢，很重要。&lt;/p&gt;
&lt;p&gt;多多回到基本原理，勤練基本功吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什麼是敏捷的起手式？&lt;/p&gt;
&lt;p&gt;像前面擷取的三段短評，其實說穿了，就是老掉牙的 5W1H 當中的 Why + What + Who，就是本篇年度回顧文章一開頭提到的&lt;strong&gt;目標&lt;/strong&gt;與&lt;strong&gt;利害關係人&lt;/strong&gt;兩大要素，敏捷圈甚至早已發展出慣用的 impact mapping 引導手法呢（所以，我的招牌課程【敏捷原理與團隊塑造】第一天下午就是以 impact mapping 進行個案研討）。你，在敏捷鳴槍起跑前，有整個團隊跑過一輪 impact mapping 來對焦嗎？&lt;/p&gt;
&lt;p&gt;起手式，很重要。&lt;/p&gt;
&lt;p&gt;像這樣在研討會、在社群聚會、在網路採集田野故事，匪夷所思的「敏捷怪現狀」屢見不鮮，卻也多半都能夠以根本原理來解釋。&lt;/p&gt;
&lt;p&gt;根本原理，不會因為是老掉牙的老調而不再重要。&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;（速成班不會講的事）&lt;/p&gt;
&lt;p&gt;敏捷失敗，有人怪罪沒有全部跑過規定的 4(+1) 會議，有人怪罪 top down 導入，有人怪罪 bottom up 導入，有人怪罪插單太多，有人怪罪沒有專職 Scrum master，有人怪罪顧問只會嘴砲，有人怪罪文化劣根性或國情不合⋯⋯&lt;/p&gt;
&lt;p&gt;真可謂「幸福的敏捷都是相似的，不幸的敏捷則各有各的不幸」呀！&lt;/p&gt;
&lt;p&gt;儘管 Scrum 不見得才是最好最適的，但是，田野觀察到業界對於 Scrum 誤解之深，就覺得 Scrum 被玩爛被汙名化，良有已也。&lt;/p&gt;
&lt;p&gt;形式與本質都歪得很嚴重。更慘的是，在「守」的階段，賴以捍衛形式與本質的 Scrum master，依然是稀缺資源。&lt;/p&gt;
&lt;p&gt;我置身一間素有敏捷標竿之名的外商，得以就近觀察某個新人過半的新產品團隊。我發現，即使有極為優秀的 Scrum master 近乎全程坐鎮，都還需要好幾個 sprints 才看到內化的持續改善跡象，委實難以想像沒有正知見坐鎮的 Scrum，會歪樓到什麼地步。&lt;/p&gt;
&lt;p&gt;（守、破、離）&lt;/p&gt;
&lt;p&gt;很慶幸自己走過了那些迷惘掙扎期。&lt;/p&gt;
&lt;p&gt;試著回到單純的根本原理吧。網路上、文獻上到處都可以找到一些正派的根本原理：&lt;a href=&#34;https://agilemanifesto.org/&#34;&gt;Agile Manifesto&lt;/a&gt;、&lt;a href=&#34;https://scrumguides.org/scrum-guide.html#theory&#34;&gt;Scrum 3 pillars&lt;/a&gt;、&lt;a href=&#34;https://www.scrum.org/resources/blog/5-scrum-values-take-center-stage&#34;&gt;Scrum 5 values&lt;/a&gt;、&lt;a href=&#34;http://modernagile.org/&#34;&gt;Modern Agile&lt;/a&gt;、&lt;a href=&#34;https://less.works/less/principles/systems-thinking.html&#34;&gt;systems thinking&lt;/a&gt;&amp;hellip; 請從任何一組根本原理來審視你們的工作，誠實地。&lt;/p&gt;
&lt;p&gt;撇開會議、流程、看板、便利貼、組織、角色等外在形式，回到根本原理，會發現，很多原理是相通的。很多基本原理或基本功，若不扎實，再多新潮的技法，也只是浮沙築高塔。&lt;/p&gt;
&lt;p&gt;請撇開外在形式，先拿【&lt;a href=&#34;https://www.ekoob.com.tw/course/6642&#34;&gt;過好人生學&lt;/a&gt;】課程所講的兩種「優化」思維來重新審視你敏捷之旅的本質吧——洞與痛、笨問題法則：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;洞：你的敏捷之旅，是為了獲得什麼利益？&lt;/li&gt;
&lt;li&gt;痛：你的敏捷之旅，是為了解除什麼痛苦？&lt;/li&gt;
&lt;li&gt;笨問題法則：為什麼一定得如此？如果不這麼做，會怎麼樣？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「有不得機得勢處，其病必於腰腿求之。」&lt;/p&gt;
&lt;h2 id=&#34;技術基本功&#34;&gt;技術基本功&lt;/h2&gt;
&lt;p&gt;在敏捷成熟度低的地方，挑戰的是變革管理能力。反之，則是基本功的扎實程度。&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:20em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/12/scrum-master-focus-over-time.png&#34; alt=&#34;Scrum Master focus over time (from LeSS)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/12/scrum-master-focus-over-time.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Scrum Master focus over time (from LeSS)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;2019 年，於公於私，我個人的技術主場都是 &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;。追逐 K8s 最新進展，降低 K8s 導入門檻，實驗 K8s 詭譎之處，寫了幾篇文章，帶了幾場 K8s 工作坊 &lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;，給了幾場演講⋯⋯可說一整年都在與 K8s 為伍。&lt;/p&gt;
&lt;p&gt;熱鬧的外在，內在卻開始感到某種空虛與不安。&lt;/p&gt;
&lt;p&gt;K8s，固然是在 DevOps 與 cloud native 相關領域集其大成的霸主，站在巨人肩膀上，乍看之下可增加一甲子功力。不過，讓我們誠實一點吧：你的功力，真的因此而徒增一甲子了嗎？&lt;/p&gt;
&lt;p&gt;譬如說，K8s 發明人之一 &lt;a href=&#34;https://www.linkedin.com/in/brendan-burns-487aa590/&#34;&gt;Brendan Burns&lt;/a&gt; 寫了一本有趣的小書《&lt;a href=&#34;https://www.tenlong.com.tw/products/9789865020774&#34;&gt;分散式系統設計：可擴展、可靠服務的樣式和範例&lt;/a&gt;》，大量運用 K8s 示範現代分散式系統中重要的泛用模式，是非常精要的 K8s 應用指南。那麼，試問：K8s 用了好一陣子的你，能夠像 Brendan Burns 這樣在 cloud native 領域將 K8s 揮灑自如嗎？&lt;/p&gt;
&lt;p&gt;如果不能，那麼，問題出在哪裡呢？&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/12/piano.jpg&#34; alt=&#34;外行與內行的差別 (from 琴之森 Vol 16)&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/12/piano.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;外行與內行的差別 (from 琴之森 Vol 16)&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;雖然我們常說：不要重複造輪子，但這並不代表，我們連造輪子的能力都不去操練。&lt;/p&gt;
&lt;p&gt;與其一直沈迷於熱鬧的 DevOps toolchains，不如回頭重新蹲馬步，回歸扎實的技術本質。&lt;/p&gt;
&lt;p&gt;「重劍無鋒，大巧不工。」&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:40em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/12/arch-books.jpg&#34; alt=&#34;蹲馬步的書：軟體架構&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/12/arch-books.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;蹲馬步的書：軟體架構&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;似乎不只我有這種想法。我在這次 &lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman/reward&#34;&gt;iT 邦幫忙鐵人賽&lt;/a&gt;評審感言中寫下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這一屆鐵人賽，我提出一則令人欣喜的整體觀察：更多人開始回歸基本功。像〈&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20089358/ironman/2559&#34;&gt;從 0 至 1 盡可能的建立一個好的系統&lt;/a&gt;〉、〈&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20121042/ironman/2792&#34;&gt;在分散的世界中保持一致&lt;/a&gt;〉、〈&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20111997/ironman/2730&#34;&gt;Think in Domain-Driven Design&lt;/a&gt;〉這三篇得獎作品，都是值得好好學習的架構設計教材，連我都從中獲益甚多。&lt;/p&gt;
&lt;p&gt;我期待大家在研讀這些精彩作品時，也請試著和他們一樣回歸基本功。每讀懂一個小議題，請自己試著重現作者的思路，自行推導，自行寫程式印證，把基本功重新磨練一次。&lt;/p&gt;
&lt;p&gt;這樣子，才不辜負這些作者嘔心瀝血隔空授藝與傳功呀！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;洋洋灑灑一堆蹲馬步的書，份量沉重，將是我 2020 的功課。套句裘凱宇老師【&lt;a href=&#34;https://www.ekoob.com.tw/course/6642&#34;&gt;過好人生學&lt;/a&gt;】課程所講的，重新扎根在這領域「建立生態圈的能力」。&lt;/p&gt;
&lt;h2 id=&#34;信仰基本功&#34;&gt;信仰基本功&lt;/h2&gt;
&lt;p&gt;再來是私領域了。&lt;/p&gt;
&lt;p&gt;2019 下半年，經歷了許多實質意義與象徵意義的生老病死，彷彿度過了好幾年。&lt;/p&gt;
&lt;p&gt;不過，卻也豐豐富富經歷到我所信的神是真的。&lt;/p&gt;
&lt;p&gt;藉著重新修練禱告的功課，帶領我走出曠野。一幕幕猶如連續劇的異象，橫跨數月，令人讚嘆與敬畏。&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:15em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/12/pray-books.jpg&#34; alt=&#34;蹲馬步的書：禱告&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/12/pray-books.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;蹲馬步的書：禱告&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;在禱告中，一句句經文，猶如活水，湧流不已：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以別神代替耶和華的，他們的愁苦必加增。(&lt;a href=&#34;https://cnbible.com/psalms/16-4.htm&#34;&gt;詩 16:4&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我們的大祭司並不是不能同情我們的軟弱。(&lt;a href=&#34;https://cnbible.com/hebrews/4-15.htm&#34;&gt;希 4:15&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你們看天空的飛鳥：牠們不撒種，不收割，也不收進倉裡，你們的天父尚且養活牠們；難道你們不比牠們更寶貴嗎？所以不要憂慮，說：「我們該吃甚麼？喝甚麼？穿甚麼？」這些都是教外人所尋求的，你們的天父原知道你們需要這一切。你們要先求他的國和他的義，這一切都必加給你們。所以不要為明天憂慮，因為明天自有明天的憂慮，一天的難處一天當就夠了。 (&lt;a href=&#34;https://cnbible.com/matthew/6-26.htm&#34;&gt;馬 6:26&lt;/a&gt;‭, ‬31‭-‬34)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這種屬靈經驗，得親身經歷；一旦親身經歷，就再也回不去了。&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/12/religion-growth.jpg&#34; alt=&#34;「不論你信主的時間有多久，都應感受到被更新、改變、鼓舞和激勵。」&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/12/religion-growth.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;「不論你信主的時間有多久，都應感受到被更新、改變、鼓舞和激勵。」&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;傾聽神的聲音，順服，活出旨意中的命定——這是人生信仰的基本功。&lt;/p&gt;
&lt;p&gt;在這 Xmas 賜平安意念之日，也該為明年做某些決定了。&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/12/hardest-decision.jpg&#34; alt=&#34;最困難的抉擇&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/12/hardest-decision.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;最困難的抉擇&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;2020-許願&#34;&gt;2020 許願&lt;/h2&gt;
&lt;p&gt;2020 年，希望自己能做到：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;繼續在信仰裡聆聽與順服。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;繼續更深度的本質修練。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;繼續增進商務英語聽說能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;走出蟄伏期。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;開放冒險選項。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;就醬。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;艾琳．梅爾 (Erin Meyer) &lt;a href=&#34;https://www.hbrtaiwan.com/article_content_AR0002707.html&#34;&gt;說&lt;/a&gt;：「在低語境文化中，良好的溝通是精準、簡單、明確和清楚的，以表面意義來了解訊息，也認同應該為了釐清而重說一次，以書面陳述訊息的情況也一樣。在高語境文化中，溝通是複雜、微妙和多層次的，訊息通常是隱含而不直接明說，較少以書面形式提出，大多是開放供人解讀，至於怎麼解讀，要看對言外之意的領悟而定。」她在《&lt;a href=&#34;https://www.books.com.tw/products/0010771747&#34;&gt;文化地圖&lt;/a&gt;》書中，針對八個面向的文化量表，有更詳盡的分析：高情境 vs 低情境、直接否定回應 vs 間接否定回應、原理優先 vs 應用優先、平權式 vs 階級、共識 vs 由上而下、任務導向 vs 關係導向、對峙 vs 避免對峙、線性時間 vs 彈性時間。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;今年我也交互參考重讀了好幾次劉恭甫（功夫老師）兩本後續的書：《&lt;a href=&#34;https://www.books.com.tw/products/0010721292&#34;&gt;左思右想：36 堂有效解決工作難題的創新思考&lt;/a&gt;》及《&lt;a href=&#34;https://www.books.com.tw/products/0010775968&#34;&gt;Ｘ計畫：打造人生黃金交叉線的轉機與關鍵&lt;/a&gt;》，獲益良多。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;詳見我於 Agile Summit 2018 發表的演講：〈&lt;a href=&#34;https://www.slideshare.net/williamyeh/agile-transition-a-toc-perspective&#34;&gt;從限制理論角度談敏捷導入階段&lt;/a&gt;〉 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;很多人視 5W1H 為過氣的老調。有趣的是，日本人對於經典的 5W1H 似乎情有獨鍾，出了幾本專書：《&lt;a href=&#34;https://www.books.com.tw/products/0010826002&#34;&gt;5W1H 超強思考術：你的所有問題，都可以靠 5W1H 解決！&lt;/a&gt;》、《&lt;a href=&#34;https://www.books.com.tw/products/0010840745&#34;&gt;5W1H 經典思考法：容易獲得成果的人都在用&lt;/a&gt;》。 &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;引述 LeSS 的 &amp;ldquo;&lt;a href=&#34;https://less.works/less/structure/scrummaster.html&#34;&gt;Scrum Master focus over time&lt;/a&gt;&amp;rdquo; 觀點：&amp;ldquo;LeSS adoptions often involve large codebases with lots of archaic and messy legacy code; applying modern practices on them is challenging. The focus on development practices stays high as it will only become harder and harder to improve the teams even further.&amp;rdquo; &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;2019 年，我帶了幾場【給 RD 的 Kubernetes 初體驗】工作坊，有 &lt;a href=&#34;https://github.com/William-Yeh/workshop-k8s201908&#34;&gt;GKE 版本&lt;/a&gt;，也有 &lt;a href=&#34;https://github.com/William-Yeh/workshop-k8s201909-eks&#34;&gt;EKS 版本&lt;/a&gt;。 &lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
      
    </item>
    
    <item>
      <title>技術面試的小觀點</title>
      <link>//william-yeh.net/post/2019/12/tech-interview/</link>
      <pubDate>Wed, 04 Dec 2019 22:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/12/tech-interview/</guid>
      
        <description>&lt;p&gt;年底，人才流動的旺季。&lt;/p&gt;
&lt;p&gt;這陣子，經手一堆履歷，更面試超過十場，深深覺得，若多一點人懂得&lt;strong&gt;面試&lt;/strong&gt;的遊戲規則，甚至更廣義的&lt;strong&gt;職場&lt;/strong&gt;遊戲規則，將是賓主盡歡的美事。&lt;/p&gt;
&lt;p&gt;Bryan &lt;a href=&#34;https://www.facebook.com/bryan.yao.1/posts/2666223613434413&#34;&gt;說得好&lt;/a&gt;：「求職過程投入越多，越能理解這個遊戲規則，也對自己的目標更清晰！」&lt;/p&gt;
&lt;p&gt;我們或許都沒有前衛到像 Netflix《&lt;a href=&#34;https://www.books.com.tw/products/0010796709&#34;&gt;給力&lt;/a&gt;》那樣「鼓勵員工經常去面試別家公司的工作」，但說實話，多一些面試與被面試的經歷，的確能夠更掌握遊戲規則，也會衝擊到自己原先的浪漫幻想，降低美麗的錯誤，將自己導向更務實的定位。&lt;/p&gt;
&lt;p&gt;面試與被面試都經歷過不少的我，想針對這陣子的所見所聞，分享一些個人的觀點。&lt;/p&gt;
&lt;h2 id=&#34;刷題&#34;&gt;刷題&lt;/h2&gt;
&lt;p&gt;以前我對刷題之舉是很不屑一顧的。總覺得這不是每位軟體工程師都需要去嘗試的。&lt;/p&gt;
&lt;p&gt;不過，就如同程天縱在〈&lt;a href=&#34;https://tuna.press/?p=9978&#34;&gt;自己爬上巨人的肩膀：踏入職場的艱辛旅程&lt;/a&gt;〉一文對美國軟體研發界的觀察：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在十年前的 2009 年，只要會寫軟體，甚至不需要經驗，學校一畢業就可以很容易的找到工作。&lt;/p&gt;
&lt;p&gt;但近十年來，大量中國和印度的留學生來到了美國，專攻互聯網、軟體開發、算法、人工智慧、大數據分析、雲計算等等領域，使得就業競爭越發激烈。尤其川普總統上任以後，緊縮了綠卡和移民的名額，導致美國留學申請的門檻更加提高了。&lt;/p&gt;
&lt;p&gt;因此，過去簡單的、走形式的面試問題和技術測試，難度就越來越高了；尤其網路和社群的普及，考過的題目立刻被分享在網上。因此，各個徵才企業就不斷的更新題庫、甚至提高難度。於是，&lt;a href=&#34;https://leetcode.com/&#34;&gt;LeetCode&lt;/a&gt; 網站上的題目，幾乎都是要去面試的軟體工程師必「做」、必「背」的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;典型的滾雪球軍備競賽，正增強迴路。&lt;/p&gt;
&lt;p&gt;甚至像&lt;a href=&#34;https://crossing.cw.com.tw/blogTopic.action?id=1095&amp;amp;nid=10739&#34;&gt;這篇文章&lt;/a&gt;所說，不只是近期內打算求職的人會去刷題：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如今在矽谷的每一天，這個「刷題例行工作」，更是許多不論資深或資淺的工程師，在上班時間外的「必做功課」之一。&lt;/p&gt;
&lt;p&gt;每天利用時間刷題，連續這樣刷上幾個月到一兩年，在矽谷是司空見慣的：最近我有兩個同事離職去了 Uber，他們在此之前分別刷了一年和整整兩年的考古題目；另一位同事刷了半年的題，進了 Amazon。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這就是美國軟體研發重鎮的遊戲規則。&lt;/p&gt;
&lt;p&gt;台灣，雖然還沒有發展出如此激烈的競爭態勢，但相對低薪太久了，優秀人才思遷外流，精明外商也在台設置研發據點就地搶人，導致刷題風氣也開始在某些小圈子裡盛行。像這次 &lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman/reward&#34;&gt;iT 邦幫忙鐵人賽&lt;/a&gt;就有兩位以 LeetCode 為主題的得獎者，其中一位甚至還在別處開設&lt;a href=&#34;https://hiskio.com/courses/319&#34;&gt;線上課程&lt;/a&gt;教人 LeetCode 解題呢。&lt;/p&gt;
&lt;p&gt;當然啦，刷題網站不只可拿來操練演算法，據我所知，同溫層當中也有些人拿這類刷題素材做為 TDD kata。最有名的例子就是 &lt;a href=&#34;https://dotblogs.com.tw/hatelove/series/1?qq=LeetCode%2520%E7%B7%B4%E5%8A%9F%E6%88%BF&#34;&gt;91&lt;/a&gt; 了。&lt;/p&gt;
&lt;p&gt;因此，我開始修正對於刷題網站的觀點。我會視情況，用兩種解題心態來看待它們：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Kata 心態。借用刷題素材，熟悉新的程式語言及標準程式庫，或是磨練 TDD 之類的技法。此時的重點在於「型」的固化與內化，不在於演算法的錙銖必較，因此，要有「可能暫時過不了刷題評分系統」的心理準備。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;演算法複雜度優化心態。我建議，盡量自我要求，不要驟然追求速解，該用類似 &lt;a href=&#34;https://www.amazon.com/dp/069111966X&#34;&gt;&lt;em&gt;How to Solve It&lt;/em&gt;&lt;/a&gt; 或 &lt;a href=&#34;https://www.amazon.com/dp/0201120372&#34;&gt;&lt;em&gt;Introduction to Algorithms: A Creative Approach&lt;/em&gt;&lt;/a&gt; 之類的逐步推演思路，有系統地闡述，才能鍛鍊出通用的解題思路，不至於淪為「背解法」。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（似乎該拿來練一下了⋯⋯）&lt;/p&gt;
&lt;h2 id=&#34;kata-心態&#34;&gt;Kata 心態&lt;/h2&gt;
&lt;p&gt;Kata 心態，不只是拿來面對刷題素材，更應該拿來用在更廣泛的地方。&lt;/p&gt;
&lt;p&gt;尤其是軟體架構。&lt;/p&gt;
&lt;p&gt;雖然我們常說：不要重複造輪子，但這並不代表，我們連造輪子的能力都不去操練。&lt;/p&gt;
&lt;p&gt;譬如說，當你學到分散式系統、微服務架構時，會不會試著甩開別人包得好好的現成框架，改而像 &lt;a href=&#34;https://columns.chicken-house.net/&#34;&gt;Andrew&lt;/a&gt; 那樣自我練習，從頭開始構築方案？ &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有興趣的話，趁這次機會，用簡化過的 POC 環境來練習看看吧！POC 的好處是你可以專注在問題本身，盡可能地排除其他環境或是框架帶來的干擾，讓你專心地思考問題本身該怎麼解決。也只有 POC，你才能有機會觀察到實際測試的統計數據與評分，讓你比較與改善的過程可以更加科學。  &lt;!-- raw HTML omitted --&gt;     &amp;mdash; 〈&lt;a href=&#34;https://columns.chicken-house.net/2019/08/30/scheduling-practices/&#34;&gt;後端工程師必備: 排程任務的處理機制練習&lt;/a&gt;〉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;譬如說，當你學到最近當紅的 DDD 及 clean architecture，會不會試著甩開別人包得好好的現成框架，改而像這次 &lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman/reward&#34;&gt;iT 邦幫忙鐵人賽&lt;/a&gt;的優選作品〈&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20111997/ironman/2730&#34;&gt;Think in Domain-Driven Design&lt;/a&gt;〉那樣，試著從頭開始構築方案？&lt;/p&gt;
&lt;p&gt;造輪子的能力，是否曾經刻苦磨練過，在面談時很難隱藏。&lt;/p&gt;
&lt;p&gt;身體學會的，誰也帶不走。&lt;/p&gt;
&lt;h2 id=&#34;行為面談&#34;&gt;行為面談&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;行為面談法&lt;/strong&gt; (behavioral interview) 是許多招募專家推薦的面談策略，搭配 &lt;strong&gt;STAR&lt;/strong&gt; (situation, task, action, result) 問題設計，可以挖掘到很深的層次。&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;行為面談，對於「被面談者」來說，挑戰性自不在話下；但是，對於「面試官」來說，也不是很輕鬆的差事。事前的設計要花時間，甚至得客製化；就連面談當下的引導、追溯與記錄，甚至事後的歸納整理與評斷，都非常費神。&lt;/p&gt;
&lt;p&gt;這一直困擾著我。&lt;/p&gt;
&lt;p&gt;所幸，後來受到《&lt;a href=&#34;https://www.books.com.tw/products/0010811254&#34;&gt;Amazon 的人為什麼這麼厲害？&lt;/a&gt;》的啟發，對行為面談法多了些把握。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010811254&#34;&gt;Amazon 的人為什麼這麼厲害？&lt;/a&gt;》作者佐藤將之是日本亞馬遜創始成員，服務了 15 年。他的現身說法，應該頗具代表性。&lt;/p&gt;
&lt;p&gt;本書試著以 Amazon 角度，回答一個關鍵問題：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;到了面試的時候，面試官會注意應徵者的哪些特質呢？&lt;/p&gt;
&lt;p&gt;用一句話來說，就是對象是否具備「&lt;strong&gt;我們的領導力準則&lt;/strong&gt;」(&lt;a href=&#34;https://www.aboutamazon.com/working-at-amazon/our-leadership-principles&#34;&gt;our leadership principles; OLP&lt;/a&gt;) 特質。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多企業的 vision/mission/values 是寫給華爾街看的。漂亮的話人人會說，怎麼知道是不是玩真的？&lt;/p&gt;
&lt;p&gt;Amazon 的做法很有趣：在面試當中察驗。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/12/olp14.jpg&#34; alt=&#34;Amazon 14 OLP&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/12/olp14.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Amazon 14 OLP&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010811254&#34;&gt;Amazon 的人為什麼這麼厲害？&lt;/a&gt;》解釋 OLP 在面試時扮演吃重的角色：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OLP 也會實際在面試時採用。對亞馬遜來說，徵才面試的目的，是深入探究面試者在過去的工作過程中如何發現 OLP。換句話說，亞馬遜不會只看技能或成績，還會看面試者是否能加速亞馬遜的成長，而重要的判斷基準就是這套領導力準則。&lt;/p&gt;
&lt;p&gt;第一關面試會由招募經理進行，人事部也會視情況面試。⋯⋯&lt;/p&gt;
&lt;p&gt;負責第二關的面試官，都會事先從招聘經理那裡收到以下請託：「一對一面試時，希望特別針對這個重點提問。」這個重點也是 OLP 中的其中一項。面試官在詳閱履歷表後，便會依照事前收到的要求，思考要發問的問題，與應徵者一對一面試。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具體的 OLP 提問方式，其實就跟行為面談法的精神相同：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;亞馬遜的招聘面試非常注重&lt;strong&gt;邏輯&lt;/strong&gt;，應該有不少應徵者在面試過程中覺得「被追問到底」。這是因為在面試過程中，面試官必須&lt;strong&gt;具體&lt;/strong&gt;的詢問「基於什麼樣的想法，做了什麼事，如何成功的⋯⋯」，並將其&lt;strong&gt;記錄&lt;/strong&gt;下來。&lt;/p&gt;
&lt;p&gt;不問「這是⋯⋯？」或「是否⋯⋯？」等封閉式問句，而是用 &lt;strong&gt;5W1H&lt;/strong&gt; 來提問。&lt;/p&gt;
&lt;p&gt;經常有應徵者在履歷表上過度誇耀自己的實績，這時若能深入發掘：「如何思考，並具體採取了什麼行動？」就能不被對方的職稱所動搖，看出應徵者的實力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我從這本書學到，要把行為面談法連繫到企業的核心價值觀。&lt;/p&gt;
&lt;p&gt;更重要的是，要自己融會出一套，與核心價值聯繫起來的 STAR 架構，不管是面試還是被面試。&lt;/p&gt;
&lt;p&gt;譬如說，針對技術領域，我自己發展出一套容易操作的探索察驗程序，並聯想《復仇者聯盟》與四顆無限寶石的情節，以便記憶：&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/12/stones.png&#34; alt=&#34;Stones&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/12/stones.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Stones&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;這需要操練。&lt;/p&gt;
&lt;h2 id=&#34;以-devops-領域為例&#34;&gt;以 DevOps 領域為例&lt;/h2&gt;
&lt;p&gt;口說無憑，就以最近在 DevOps 社群看到的話題為例吧。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&#34;https://www.facebook.com/groups/DevOpsTaiwan/permalink/2566212293465801/&#34;&gt;「請問各位在面試 DevOps Engineer 都會問什麼問題」討論串&lt;/a&gt;當中，Rick Hwang 提出一則很好的示範：「你過去的經驗，通常用哪一種部署策略？考慮哪些因素？為什麼？怎麼實踐？」不難看出，這已經算是很接近 STAR 精神的行為面談。&lt;/p&gt;
&lt;p&gt;我也來稍微示範一下，如何將行為面談法連繫到企業的核心價值觀。&lt;/p&gt;
&lt;p&gt;如果我們想聯繫上 OLP 核心價值，該怎麼問呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;顧客至上：「你過去的經驗，通常用哪一種部署策略？是給哪些人用的？他們對此有什麼看法？你有嘗試過推動其他更好的部署策略嗎？他們對此又有什麼看法？過程中遇到哪些困難？你是如何克服的？」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;創新與簡化：「新的部署策略，哪些地方比以前方便，哪些地方反而比以前複雜？當他們抱怨時，你是如何進一步克服這問題的？」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;刨根問底：「如果要進行混合雲與多雲的部署，你會怎麼做？」視情況，這議題可以挖得很深很深⋯⋯&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果我們想聯繫上 DevOps 核心價值，該怎麼運用《復仇者聯盟》四顆無限寶石的口訣來提問呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reality：「你過去的經驗，通常用哪一種部署策略？」視現場互動情況，再以 5W1H 角度去蒐集具體事實：what? why? why not? for who? with who? when? how? &amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Space：「以你所知，還有哪些部署策略是業界流行的？你為什麼不採用它們？以你所知，在部署策略上，未來的趨勢是？你對它們的評論是？」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time：「假設有一個像 xxx 這樣的個案，你會如何導入剛剛提到的 yyy 部署策略？」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mind：「這種導入過程，需要哪些人配合？你會如何說服他們配合？」&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;運用之妙，存乎一心。這需要操練。&lt;/p&gt;
&lt;h2 id=&#34;馬拉松&#34;&gt;馬拉松&lt;/h2&gt;
&lt;p&gt;程天縱在〈&lt;a href=&#34;https://tuna.press/?p=9978&#34;&gt;自己爬上巨人的肩膀：踏入職場的艱辛旅程&lt;/a&gt;〉一文提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在美國最夢幻的僱主就是「FLAG」四家企業：Facebook 、LinkedIn、Amazon、Google。這四家企業招聘軟體工程師都非常慎重，進入門檻也都非常的高。&lt;/p&gt;
&lt;p&gt;這些公司的面試，都要經過四、五輪的電話面試、線上技術測試、視訊面試和測驗，最糟糕的是，時間拖得非常長，前後有長到兩、三個月的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《&lt;a href=&#34;https://www.books.com.tw/products/0010811254&#34;&gt;Amazon 的人為什麼這麼厲害？&lt;/a&gt;》也自嘲：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人力仲介業界常說亞馬遜的招聘面試會「搞死仲介」，因為他們向亞馬遜推薦的人才都很難被錄用，所以常會抱怨：「已經不知道該推薦誰才好了」。只不過，我們的想法是「寧缺勿濫」，內部有招聘優秀人才的基本思維及穩健機制。&lt;/p&gt;
&lt;p&gt;第一關面試會由招聘經理進行。⋯⋯&lt;/p&gt;
&lt;p&gt;第二關面試可以說很有亞馬遜的風格。首先是人數，最多會從公司內部召集五名面試官，皆為其他部門的管理者階層。這群面試官之中，肯定會包含一位稱為「抬桿者」(bar raiser)  &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; 的人物。第二關面試也是一對一，每次約 40~45 分鐘，最多要進行五場。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我並不盲目鼓吹這種過五關斬六將的風格。不過，如果你遇到這樣的機會，請把握，如果這是值得的。&lt;/p&gt;
&lt;p&gt;請保持向著標竿直跑的勇氣與耐心吧。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;對於軟體架構 kata 感興趣的，請拿 Andrew 的【&lt;a href=&#34;https://columns.chicken-house.net/categories/#%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0:%20%E6%9E%B6%E6%A7%8B%E9%9D%A2%E8%A9%A6%E9%A1%8C&#34;&gt;架構面試題&lt;/a&gt;】系列文章來挑戰看看吧！ &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;對於&lt;strong&gt;行為面談法&lt;/strong&gt; (behavioral interview) 感興趣的，可讀讀知名獵頭 Lynn 所寫的〈&lt;a href=&#34;http://www.lynncareers.com/2017/09/behavioralinterview.html&#34;&gt;【面試的藝術】行為面試，現正進行中&lt;/a&gt;〉一文。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;「抬桿者」(bar raiser) 是 Amazon 很獨特的用人思維。請參考〈&lt;a href=&#34;https://bookzone.cwgv.com.tw/topic/details/6007&#34;&gt;亞馬遜如何挑選人才？&lt;/a&gt;〉一文。 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
      
    </item>
    
    <item>
      <title>Volume Resizing Mechanism in Kubernetes</title>
      <link>//william-yeh.net/post/2019/07/k8s-vol-resizing/</link>
      <pubDate>Wed, 31 Jul 2019 13:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/07/k8s-vol-resizing/</guid>
      
        <description>&lt;p&gt;Non-stop storage scaling (vertical or horizontal scaling) is essential in a data-intensive system, database servers in particular.&lt;/p&gt;
&lt;p&gt;Is it possible in Kubernetes?&lt;/p&gt;
&lt;p&gt;In Kubernetes v1.11 the &lt;em&gt;persistent volume expansion&lt;/em&gt; feature is being promoted to beta and enabled by default.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; There is also a nontrivial real-world use case for this: &lt;a href=&#34;https://strimzi.io/&#34;&gt;Strimzi Kafka operator&lt;/a&gt;. Strimzi merely builds on top of existing Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/storage-classes/&#34;&gt;storage class&lt;/a&gt; mechanism to grow the storage of Kafka cluster.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; Therefore, the volume resizing feature is not exclusively available for Strimzi and Kafka. You can put this feature into your own application as long as you learn the mechanism.&lt;/p&gt;
&lt;p&gt;To get a concrete knowledge of the volume resizing, I&amp;rsquo;ve conducted a simple experiment on GCP and GKE. The experiment tries to answer the following questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Does volume resizing really work in Kubernetes?&lt;/li&gt;
&lt;li&gt;Is the resizing process non-stop?&lt;/li&gt;
&lt;li&gt;Are data still persistent after resizing?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All experiment materials are available in the &lt;a href=&#34;https://github.com/William-Yeh/vol-resize&#34;&gt;vol-resize&lt;/a&gt; repo, for your convenience.&lt;/p&gt;
&lt;h2 id=&#34;about-the-sample-app&#34;&gt;About the sample app&lt;/h2&gt;
&lt;p&gt;A sample app &lt;a href=&#34;https://github.com/William-Yeh/vol-resize/blob/master/voltest.sh&#34;&gt;voltest.sh&lt;/a&gt; will be used for the whole experiment.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; It displays the size of available disk spaces in the specified mount point (as the 1st argument), and also records the data continuously in the specified output file (as the 2nd argument; default to &lt;code&gt;&amp;quot;data&amp;quot;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see how it works. Assume that we are in the &lt;code&gt;/home&lt;/code&gt; directory, with available disk space about 4.5 GB:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% pwd
/home
%
% df -h
Filesystem      Size  Used Avail Use% Mounted on
overlay          41G   32G  8.2G  80% /
tmpfs            64M     0   64M   0% /dev
tmpfs           848M     0  848M   0% /sys/fs/cgroup
/dev/sda1        41G   32G  8.2G  80% /root
/dev/sdb1       4.8G   38M  4.5G   1% /home
overlayfs       1.0M  160K  864K  16% /etc/ssh/keys
shm              64M     0   64M   0% /dev/shm
overlayfs       1.0M  160K  864K  16% /etc/ssh/ssh_host_dsa_key
tmpfs           848M  736K  847M   1% /run/metrics
tmpfs           848M     0  848M   0% /run/google/devshell&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At first run, it shows the space of current directory and records them continuously in the &lt;code&gt;data&lt;/code&gt; file within the same directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% docker run -it  -v $(pwd):/mnt  williamyeh/voltest  /mnt
---&amp;gt; Checking /mnt/data
1 : 4.5G
2 : 4.5G
3 : 4.5G
4 : 4.5G
5 : 4.5G
6 : 4.5G
7 : 4.5G
8 : 4.5G
9 : 4.5G
10 : 4.5G
11 : 4.5G
12 : 4.5G
^C
%&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Interrupt the execution at 12 on purpose, and run again. You&amp;rsquo;ll see that it picks up the last serial number 12 and continues counting:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% docker run -it  -v $(pwd):/mnt  williamyeh/voltest  /mnt
---&amp;gt; Checking /mnt/data
13 : 4.5G
14 : 4.5G
15 : 4.5G
16 : 4.5G
17 : 4.5G
18 : 4.5G
19 : 4.5G
20 : 4.5G
21 : 4.5G
22 : 4.5G
23 : 4.5G
^C
%&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the &lt;code&gt;data&lt;/code&gt; file should have 23 lines of records:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% cat data
1 : 4.5G
2 : 4.5G
3 : 4.5G
4 : 4.5G
5 : 4.5G
6 : 4.5G
7 : 4.5G
8 : 4.5G
9 : 4.5G
10 : 4.5G
11 : 4.5G
12 : 4.5G
13 : 4.5G
14 : 4.5G
15 : 4.5G
16 : 4.5G
17 : 4.5G
18 : 4.5G
19 : 4.5G
20 : 4.5G
21 : 4.5G
22 : 4.5G
23 : 4.5G
%&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the following experiment we&amp;rsquo;ll use the app and the data file to answer the 3 questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Does volume resizing really work in Kubernetes?&lt;/em&gt; Just inspect the disk spaces it displays.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Is the resizing process non-stop?&lt;/em&gt; Just inspect the screen output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Are data still persistent after resizing?&lt;/em&gt; Just inspect the content of data file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ready?&lt;/p&gt;
&lt;h2 id=&#34;experiment-part-1-initial-size&#34;&gt;Experiment part 1: initial size&lt;/h2&gt;
&lt;p&gt;The experiment is conducted on GCP and GKE. However, it should apply to other cloud Kubernetes platforms as well, with minor modification.&lt;/p&gt;
&lt;p&gt;➊ Clone the experiment repo to your workspace or Cloud Shell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% git clone https://github.com/William-Yeh/vol-resize.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;➋ Prepare a Kubernetes cluster in GKE.&lt;/p&gt;
&lt;p&gt;➌ Create a 20GB persistent disk named &lt;code&gt;voltest&lt;/code&gt;.  For example, the following command will create such a persistent disk in the us-central1-a zone:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% gcloud compute disks create         \
    --size=20GB --zone=us-central1-a  \
    voltest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check if the underlying persistent disk is created:&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/07/pd-20gb.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/07/pd-20gb.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;➍ We need a storage class with &lt;code&gt;allowVolumeExpansion&lt;/code&gt; enabled. The manifest file &lt;a href=&#34;https://github.com/William-Yeh/vol-resize/blob/master/expansion-ss.yml&#34;&gt;expansion-ss.yml&lt;/a&gt; is provided as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: expansion
parameters:
  type: pd-standard
provisioner: kubernetes.io/gce-pd
allowVolumeExpansion: true
reclaimPolicy: Delete&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a storage class &lt;code&gt;expansion&lt;/code&gt; for this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl apply -f expansion-ss.yml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;➎ We need a PV manifest file &lt;a href=&#34;https://github.com/William-Yeh/vol-resize/blob/master/voltest-pv.yml&#34;&gt;voltest-pv.yml&lt;/a&gt; to associate it with the existing persistent disk just created before:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;apiVersion: v1
kind: PersistentVolume
metadata:
  name: voltest
spec:
  storageClassName: &amp;#34;expansion&amp;#34;
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 20Gi
  gcePersistentDisk:
    pdName: voltest
    fsType: ext4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create the persistent volume &lt;code&gt;voltest&lt;/code&gt; now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl apply -f voltest-pv.yml
persistentvolume/voltest created
% kubectl get pv
NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE
voltest   20Gi       RWO            Retain           Available           expansion               8s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the &lt;code&gt;voltest&lt;/code&gt; PV is in &amp;ldquo;Available&amp;rdquo; status.&lt;/p&gt;
&lt;p&gt;➏ We need a PVC manifest file &lt;a href=&#34;https://github.com/William-Yeh/vol-resize/blob/master/voltest-pvc.yml&#34;&gt;voltest-pvc.yml&lt;/a&gt; to claim the PV:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: voltest
spec:
  volumeName: voltest
  storageClassName: &amp;#34;expansion&amp;#34;
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Claim the persistent volume now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl apply -f voltest-pvc.yml
persistentvolumeclaim/voltest created

% kubectl get pvc
NAME      STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE
voltest   Bound    voltest   20Gi       RWO            expansion      11s

% kubectl get pv
NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM             STORAGECLASS   REASON   AGE
voltest   20Gi       RWO            Retain           Bound    default/voltest   expansion               13m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the &lt;code&gt;voltest&lt;/code&gt; PV/PVC pair is in &amp;ldquo;Bound&amp;rdquo; status.&lt;/p&gt;
&lt;p&gt;➐ We need a manifest file &lt;a href=&#34;https://github.com/William-Yeh/vol-resize/blob/master/voltest-app.yml&#34;&gt;voltest-app.yml&lt;/a&gt; for our sample app to access the PV/PVC:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;apiVersion: apps/v1
kind: Deployment
...
spec:
  replicas: 1
  ...
  template:   # pod definition
    ...
    spec:
      containers:
        - name: voltest
          image: williamyeh/voltest
          volumeMounts:
            - mountPath: &amp;#34;/mnt&amp;#34;
              name: voltest

      volumes:
        - name: voltest
          persistentVolumeClaim:
            claimName: voltest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Invoke the sample app now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl apply -f voltest-app.yml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open another terminal pane to watch the logs continuously:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl logs -f deployment/voltest
---&amp;gt; Checking /mnt/data
1 : 20G
2 : 20G
3 : 20G
4 : 20G
5 : 20G
6 : 20G
7 : 20G
8 : 20G
9 : 20G
10 : 20G
11 : 20G
12 : 20G
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Quite familiar output. Everything works fine.&lt;/p&gt;
&lt;p&gt;Keep the logs running. We&amp;rsquo;ll see it again and again.&lt;/p&gt;
&lt;h2 id=&#34;experiment-part-2-resizing&#34;&gt;Experiment part 2: resizing&lt;/h2&gt;
&lt;p&gt;Now we&amp;rsquo;re about to resize the volume.&lt;/p&gt;
&lt;p&gt;➊ Edit the &lt;code&gt;voltest&lt;/code&gt; PVC:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl edit pvc/voltest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;➋ Change the value of &lt;code&gt;spec.resources.requests.storage&lt;/code&gt; from &lt;code&gt;20Gi&lt;/code&gt; to &lt;code&gt;100Gi&lt;/code&gt;. Save, and exit.&lt;/p&gt;
&lt;p&gt;➌ Check if the logs are still being generated, and the content of the logs.&lt;/p&gt;
&lt;p&gt;➍ Check the size of underlying persistent disk. It should be expanded to 100 GB now.&lt;/p&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/07/pd-100gb.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/07/pd-100gb.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;➎ Check if the PV/PVC are both expanded:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl get pv
NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM             STORAGECLASS   REASON   AGE
voltest   100Gi      RWO            Retain           Bound    default/voltest   expansion               45m

% kubectl get pvc
NAME      STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE
voltest   Bound    voltest   20Gi       RWO            expansion      32m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PV is expanded to 100 GB, but PVC not yet. In other words, &lt;em&gt;block storage volume&lt;/em&gt; is expanded, but &lt;em&gt;file system&lt;/em&gt; is not yet. The reason is described in the “&lt;a href=&#34;https://kubernetes.io/blog/2018/07/12/resizing-persistent-volumes-using-kubernetes/&#34;&gt;Resizing Persistent Volumes using Kubernetes&lt;/a&gt;” article:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Once underlying volume has been expanded by the storage provider, then the PersistentVolume object will reflect the updated size and the PVC will have the &lt;code&gt;FileSystemResizePending&lt;/code&gt; condition.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;File system expansion must be triggered by terminating the pod using the volume [&amp;hellip;] then pod that uses the PVC can be restarted to finish file system resizing on the node.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For now the question &lt;em&gt;&amp;ldquo;2. Is the resizing process non-stop?&amp;quot;&lt;/em&gt; should be obviously answered. Let&amp;rsquo;s move on to handle the &lt;code&gt;FileSystemResizePending&lt;/code&gt; condition by restarting the related pods.&lt;/p&gt;
&lt;h2 id=&#34;experiment-part-3-restart-the-pod&#34;&gt;Experiment part 3: restart the pod&lt;/h2&gt;
&lt;p&gt;➊ Kill the pod, and let deployment restart a new pod for us (&lt;code&gt;replicas=1&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl get pods
NAME                      READY   STATUS    RESTARTS   AGE
voltest-d88ff8c49-66wk2   1/1     Running   0          23m

% kubectl delete pod voltest-d88ff8c49-66wk2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;➋ Watch the logs! Our sample app will see the &lt;em&gt;file system expansion&lt;/em&gt; progress on the fly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;13465 : 20G
13466 : 20G
13467 : 20G
13468 : 24G
13469 : 30G
13470 : 30G
13471 : 30G
13472 : 30G
13473 : 30G
13474 : 42G
13475 : 77G
13476 : 99G
13477 : 99G
13478 : 99G
13479 : 99G
13480 : 99G
13481 : 99G
13482 : 99G&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;➌ Check if the PV/PVC are both expanded:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl get pv
NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM             STORAGECLASS   REASON   AGE
voltest   100Gi      RWO            Retain           Bound    default/voltest   expansion               57m

% kubectl get pvc
NAME      STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE
voltest   Bound    voltest   100Gi      RWO            expansion      44m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For now the remaining questions &lt;em&gt;“1. Does volume resizing really work in Kubernetes?”&lt;/em&gt; and &lt;em&gt;“3. Are data still persistent after resizing?”&lt;/em&gt; should be obviously answered.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As can be seen in this experiment, all you have to do to grow the PV/PVC are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Preparation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use Kubernetes ≥ 1.11.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;code&gt;allowVolumeExpansion: true&lt;/code&gt; for your &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/storage-classes/&#34;&gt;storage class&lt;/a&gt;, and choose an appropriate underlying &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/volumes/#types-of-volumes&#34;&gt;provisioner&lt;/a&gt; (storage provider).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the storage class in your PV and PVC.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Expansion&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Increase the PVC &lt;code&gt;spec.resources.requests.storage&lt;/code&gt; value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart the related pods.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes 1.11 also introduces an alpha feature called &lt;em&gt;online file system expansion&lt;/em&gt;. You can track its progress in the Kubernetes CSI Developer Documentation &amp;ldquo;&lt;a href=&#34;https://kubernetes-csi.github.io/docs/volume-expansion.html&#34;&gt;Volume Expansion&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;You may use the volume resizing feature since Kubernetes 1.11. Read the article published by kubernetes.io in more detail: “&lt;a href=&#34;https://kubernetes.io/blog/2018/07/12/resizing-persistent-volumes-using-kubernetes/&#34;&gt;Resizing Persistent Volumes using Kubernetes&lt;/a&gt;”. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;To know more about how Strimzi implements the volume resizing for Kafka, read these articles: “&lt;a href=&#34;https://strimzi.io/2019/07/08/persistent-storage-improvements.html&#34;&gt;Persistent storage improvements&lt;/a&gt;” and “&lt;a href=&#34;https://strimzi.io/2019/02/28/resizing-persistent-volumes.html&#34;&gt;Resizing persistent volumes with Strimzi&lt;/a&gt;”. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;The Docker image for this &lt;a href=&#34;https://github.com/William-Yeh/vol-resize/blob/master/voltest.sh&#34;&gt;voltest.sh&lt;/a&gt; app is available in &lt;code&gt;williamyeh/voltest&lt;/code&gt; for your convenience. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
      
    </item>
    
    <item>
      <title>CKAD (Certified Kubernetes Application Developer) 相關資料</title>
      <link>//william-yeh.net/post/2019/07/ckad-materials/</link>
      <pubDate>Thu, 11 Jul 2019 17:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/07/ckad-materials/</guid>
      
        <description>&lt;p&gt;Linux Foundation 旗下的 &lt;a href=&#34;https://www.cncf.io/&#34;&gt;CNCF (Cloud Native Computing Foundation)&lt;/a&gt; 提供兩個與 Kubernetes 相關的個人技術檢定：偏維運的 &lt;a href=&#34;https://www.cncf.io/certification/cka/&#34;&gt;CKA (Certified Kubernetes Administrator)&lt;/a&gt;，以及偏研發的 &lt;a href=&#34;https://www.cncf.io/certification/ckad/&#34;&gt;CKAD (Certified Kubernetes Application Developer)&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;其中，CKAD 與我關注的範圍、與我設計的工作坊最接近，便想進一步瞭解它的細節。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:15em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/07/kubernetes-ckad-color.png&#34; alt=&#34;CKAD logo&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/07/kubernetes-ckad-color.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;CKAD logo&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;根據官方資料，CKAD 的 &lt;a href=&#34;https://github.com/cncf/curriculum&#34;&gt;curriculum&lt;/a&gt; 只有列出檢定考試的主題與比例，並沒有列出具體的應考讀物。目前看到最接近「欽定本」地位的 CKAD 檢定準備教材，就屬 Linux Foundation 製作的 &lt;a href=&#34;https://training.linuxfoundation.org/training/kubernetes-for-developers/&#34;&gt;LDF259&lt;/a&gt; 線上課程了——全長 35 小時，$299 美金。&lt;/p&gt;
&lt;p&gt;不過，是否還有其他選擇？&lt;/p&gt;
&lt;h2 id=&#34;實惠的線上課程&#34;&gt;實惠的線上課程&lt;/h2&gt;
&lt;p&gt;我在 Udemy 找到一份新台幣 $390 的線上課程 &lt;a href=&#34;https://www.udemy.com/course/certified-kubernetes-application-developer/&#34;&gt;Kubernetes Certified Application Developer (CKAD) with Tests&lt;/a&gt;。花十幾分鐘試過它的預覽單元，發現它的內容很扎實，實作練習也很活潑，應該滿適合從實作中學習的人，從過程中發現不足之處，再去找相關資料補強。&lt;/p&gt;
&lt;p&gt;即使我對 Kubernetes 已經有一定的掌握程度，也有設計實作教材的能力，但我還是喜歡以它作為配套。&lt;/p&gt;
&lt;p&gt;這會是我的 CKAD 首推材料。我建議，即使不購買這份教材，也請花十幾分鐘把它的預覽單元全都走過一遍。&lt;/p&gt;
&lt;h2 id=&#34;牛刀小試&#34;&gt;牛刀小試&lt;/h2&gt;
&lt;p&gt;根據 &lt;a href=&#34;https://training.linuxfoundation.org/go/cka-ckad-candidate-handbook&#34;&gt;CKAD 線上考試規定&lt;/a&gt;，應考時，不能使用紙張或數位筆記軟體 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。因此，這場檢定，很大幅度在考核肌肉記憶，以及 &lt;a href=&#34;https://kubernetes.io/docs/&#34;&gt;kubernetes.io/docs/&lt;/a&gt; 官方文件查找能力。&lt;/p&gt;
&lt;p&gt;既然遊戲規則訂成這樣，我們就該先體驗一下這有多麼殘酷。呵。&lt;/p&gt;
&lt;p&gt;我建議，如果你曾經有過一點點 Kubernetes 經驗，此刻，請先去 &lt;a href=&#34;https://github.com/dgkanatsios/CKAD-exercises&#34;&gt;dgkanatsios/CKAD-exercises&lt;/a&gt; 挑戰看看你的肌肉記憶。儘管這不是官方釋出的模擬試題，但牛刀小試一番，接受洗禮，或是打擊，總是好的。&lt;/p&gt;
&lt;h2 id=&#34;官方文件&#34;&gt;官方文件&lt;/h2&gt;
&lt;p&gt;經過以上的洗禮，知道自己不足之處，就可以開始啟動特訓之旅。&lt;/p&gt;
&lt;p&gt;根據 &lt;a href=&#34;https://training.linuxfoundation.org/go/cka-ckad-candidate-handbook&#34;&gt;CKAD 線上考試規定&lt;/a&gt;，應考時，你不能向 Google 求助；你能用瀏覽器查找的文件，只有 Kubernetes 官方文件 &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;因此，請盡快熟悉以下幾個限定的參考資料來源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/&#34;&gt;https://kubernetes.io/docs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/&#34;&gt;https://github.com/kubernetes/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/blog/&#34;&gt;https://kubernetes.io/blog/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也請從現在開始自我要求，不論在其他任何地方看到的資料，都請務必回到以上官方欽定的參考資料所在地，逐一找出可與之對應的關鍵字、章節、語法規格、範例。&lt;/p&gt;
&lt;p&gt;這是 CKAD 應考時，你唯一的浮木舟。即使你並未志在 CKAD，這仍然是很好的習慣。&lt;/p&gt;
&lt;h2 id=&#34;前人經驗&#34;&gt;前人經驗&lt;/h2&gt;
&lt;p&gt;有了以上的心理建設，接下來，就可以用健康心態欣賞一下前人的經驗：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://ottodeng.io/post/ckad-exam/&#34;&gt;CKAD Exam&lt;/a&gt; on Jul 9, 2018.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@ikaboubi/my-feedback-about-cka-and-ckad-e82a35585fe9&#34;&gt;My Feedback about CKA and CKAD&lt;/a&gt; on Jun 4, 2018.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/chotot/tips-tricks-to-pass-certified-kubernetes-application-developer-ckad-exam-67c9e1b32e6e&#34;&gt;Tips to pass Certified Kubernetes Application Developer (CKAD) exam&lt;/a&gt; on Dec 15, 2018.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;感謝你花了幾分鐘，讀完由一位沒參加過 CKAD 的人所整理的這篇文章。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://training.linuxfoundation.org/go/cka-ckad-candidate-handbook&#34;&gt;CKA/CKAD Candidate Handbook&lt;/a&gt; v1.20 提到：“The following resources are forbidden during the exam: Use of devices other than the exam desktop; Notes;  Documentation; Notepads (other than what’s provided within the exam browser tab); Course manuals [&amp;hellip;]” &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://training.linuxfoundation.org/go/cka-ckad-candidate-handbook&#34;&gt;CKA/CKAD Candidate Handbook&lt;/a&gt; v1.20 提到：“You are permitted to use your Chrome or Chromium browser to open one additional tab in order to access assets at &lt;a href=&#34;https://kubernetes.io/docs/&#34;&gt;https://kubernetes.io/docs/&lt;/a&gt; and its subdomain, &lt;a href=&#34;https://github.com/kubernetes/&#34;&gt;https://github.com/kubernetes/&lt;/a&gt; and its subdomains, or &lt;a href=&#34;https://kubernetes.io/blog/&#34;&gt;https://kubernetes.io/blog/&lt;/a&gt;. No other tabs may be opened and no other sites may be navigated to. The allowed sites above may contain links that point to external sites. It is the responsibility of the candidate not to click on any links that cause them to navigate to a domain that is not allowed.” &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
      
    </item>
    
    <item>
      <title>Docker File Permissions on Windows</title>
      <link>//william-yeh.net/post/2019/06/docker-file-permissions/</link>
      <pubDate>Mon, 24 Jun 2019 12:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/06/docker-file-permissions/</guid>
      
        <description>&lt;p&gt;Currently Linux containers are still more popular than Windows containers. And Windows users often need to use Linux containers even from their Windows computers.&lt;/p&gt;
&lt;p&gt;Recently I&amp;rsquo;ve found something very strange about Linux-style file permissions when the Docker images are built from Windows hosts.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; Therefore, I&amp;rsquo;ve conducted a suite of test cases to investigate whether file permissions are preserved with Docker &amp;amp; &lt;a href=&#34;https://skaffold.dev/&#34;&gt;Skaffold&lt;/a&gt; toolchains. All experiment materials are available in the &lt;a href=&#34;https://github.com/William-Yeh/container-chmod&#34;&gt;container-chmod&lt;/a&gt; repo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% git clone https://github.com/William-Yeh/container-chmod.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;experiment-setting&#34;&gt;Experiment setting&lt;/h2&gt;
&lt;p&gt;The experiments are composed of a few files with typical Unix-style file permissions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;.
├── skaffold.yaml
└── src
    ├── Dockerfile
    ├── file-644.txt
    └── script-755.sh

-rw-r--r-- 1 william  70 Jun 24 17:01 Dockerfile
-rw-r--r-- 1 william  57 Jun 24 15:17 file-644.txt
-rwxr-xr-x 1 william  84 Jun 24 15:19 script-755.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will use two ways to build the Linux-container images:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To build image with &lt;code&gt;docker build&lt;/code&gt; command (Docker Engine 18.09.2).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To build image with &lt;code&gt;skaffold build&lt;/code&gt; command (Skaffold v0.32.0).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And we&amp;rsquo;ll conduct the experiments in the following environment settings:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Host&lt;/th&gt;
&lt;th&gt;Built w/ Docker CLI&lt;/th&gt;
&lt;th&gt;Built w/ Skaffold (WSL version)&lt;/th&gt;
&lt;th&gt;Built w/ Skaffold (host version)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;macOS&lt;/td&gt;
&lt;td&gt;➊&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;➋&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WSL + Docker Desktop for Windows&lt;/td&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;➍&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;⑹&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Will all experiments display the correct file permissions?&lt;/p&gt;
&lt;h2 id=&#34;macos--&#34;&gt;macOS: ➊ ➋&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s begin with macOS, which acts as the control group.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/253423&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/253423.svg&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Perfect! All Unix-style file permissions are set correctly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;total 20                                                                        
drwxr-xr-x    1 root     root          4096 Jun 24 22:30 .                      
drwxr-xr-x    1 root     root          4096 Jun 24 22:30 ..                     
-rw-r--r--    1 root     root            70 Jun 24 22:18 Dockerfile             
-rw-r--r--    1 root     root            57 Jun 24 22:18 file-644.txt           
-rwxr-xr-x    1 root     root            84 Jun 24 22:18 script-755.sh          &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;wsl--&#34;&gt;WSL: ③ ➍&lt;/h2&gt;
&lt;p&gt;On Windows, my preference is to use WSL to connect to Docker Desktop for Windows.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;  Will this combination work well with Unix-style file permissions?&lt;/p&gt;
&lt;p&gt;Below are experiments conducted on WSL:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/253450&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/253450.svg&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As shown in this demo, the ➍ skaffold experiment works quite well on WSL. The ③ docker-cli experiment works, though not the best-possible Unix-style file permissions:&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SECURITY WARNING: You are building a Docker image from Windows against a non-Windows Docker host. All files and directories added to build context will have &lt;code&gt;&#39;-rwxr-xr-x&#39;&lt;/code&gt; permissions. It is recommended to double check and reset permissions for sensitive files and directories.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;pure-windows--&#34;&gt;Pure Windows: ⑤ ⑹&lt;/h2&gt;
&lt;p&gt;What if a Windows user sticks with pure-Windows toolchains, i.e., use traditional Command Prompt (cmd) to connect to Docker Desktop for Windows?&lt;/p&gt;
&lt;p&gt;The ⑤ docker-cli experiment shows the same result as in previous ③ &lt;code&gt;&#39;-rwxr-xr-x&#39;&lt;/code&gt; permission:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;C:\&amp;gt; docker run -it test-docker                                           
File permission (script-755.sh) should be: 755  rwxr-xr-x              
total 20                                                               
drwxr-xr-x    1 root     root          4096 Jun 25 03:45 .             
drwxr-xr-x    1 root     root          4096 Jun 25 03:45 ..            
-rwxr-xr-x    1 root     root            70 Jun 25 03:44 Dockerfile    
-rwxr-xr-x    1 root     root            57 Jun 24 08:03 file-644.txt  
-rwxr-xr-x    1 root     root            84 Jun 24 08:03 script-755.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, the ⑹ skaffold experiment shows the &lt;em&gt;worst&lt;/em&gt; result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;C:\&amp;gt; skaffold-windows-amd64.exe build
Generating tags...
 - test-skaffold -&amp;gt; test-skaffold:dbe377c
Tags generated in 228.0023ms
Starting build...
Found [docker-for-desktop] context, using local docker daemon.
Building [test-skaffold]...
Sending build context to Docker daemon  4.096kB
Step 1/4 : FROM alpine:3.9.4
...


C:\&amp;gt; docker run -it 25997136449a
docker: Error response from daemon: OCI runtime create failed: container_linux.go:344:
starting container process caused &amp;#34;exec: \&amp;#34;/app/script-755.sh\&amp;#34;: permission denied&amp;#34;: unknown.


C:\&amp;gt; docker run -it 25997136449a  ls -al
total 20
drwxr-xr-x    1 root     root          4096 Jun 25 03:51 .
drwxr-xr-x    1 root     root          4096 Jun 25 03:53 ..
-rw-rw-rw-    1 root     root            70 Jun 25 03:44 Dockerfile
-rw-rw-rw-    1 root     root            57 Jun 24 08:03 file-644.txt
-rw-rw-rw-    1 root     root            84 Jun 24 08:03 script-755.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As shown in the demo, Skaffold blindly sets all the file permissions as &lt;code&gt;&#39;-rw-rw-rw-&#39;&lt;/code&gt;, eliminating the &lt;code&gt;&#39;x&#39;&lt;/code&gt; permission required for the &lt;code&gt;script-755.sh&lt;/code&gt; script file.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Different Unix-style file permissions will be generated in the Docker images when building Linux containers with different combination of host operating systems, docker cli, and Skaffold toolchains:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Host&lt;/th&gt;
&lt;th&gt;Built w/ Docker CLI&lt;/th&gt;
&lt;th&gt;Built w/ Skaffold (WSL version)&lt;/th&gt;
&lt;th&gt;Built w/ Skaffold (host version)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;macOS&lt;/td&gt;
&lt;td&gt;➊&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;➋&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WSL + Docker Desktop for Windows&lt;/td&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;➍&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;⑹&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best results: ➊ ➋ ➍&lt;/li&gt;
&lt;li&gt;Acceptable results: ③ ⑤&lt;/li&gt;
&lt;li&gt;Unacceptable results: ⑹&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My suggestions for building Linux images are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If your applications require adequate file permissions (especially the &lt;code&gt;&#39;x&#39;&lt;/code&gt;) and you cannot completely control the build toolchains to use, be sure to modify your &lt;code&gt;Dockerfile&lt;/code&gt; accordingly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you can control the whole toolchains to use (e.g., in the CI/CD pipeline), stick with the Linux ones.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;There is also an issue about this in Skaffold: &lt;a href=&#34;https://github.com/GoogleContainerTools/skaffold/issues/1470&#34;&gt;Issue #1470: Permission denied through skaffold&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;See my article “&lt;a href=&#34;//william-yeh.net/post/2019/03/wsl-cmder-zsh/&#34;&gt;在 Windows 上復刻 Mac 使用習慣&lt;/a&gt;”. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;See &lt;a href=&#34;https://github.com/moby/moby/issues/20397#issuecomment-185471832&#34;&gt;thaJeztah&amp;rsquo;s comment on GitHub&lt;/a&gt; about this. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
      
    </item>
    
    <item>
      <title>Auto-Reload from ConfigMap</title>
      <link>//william-yeh.net/post/2019/06/autoreload-from-configmap/</link>
      <pubDate>Mon, 17 Jun 2019 17:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/06/autoreload-from-configmap/</guid>
      
        <description>&lt;p&gt;My previous article &amp;ldquo;&lt;a href=&#34;//william-yeh.net/post/2019/06/inotify-in-containers/&#34;&gt;Inotify in Containers&lt;/a&gt;&amp;rdquo; has demonstrated that when ConfigMap is mounted as directories, any changes in the ConfigMap will propagate to related pods, and can be detected with &lt;code&gt;inotify&lt;/code&gt;-like APIs.&lt;/p&gt;
&lt;p&gt;A follow-up question might be: what should a well-behaved application react to this trigger accordingly? What if it&amp;rsquo;s a ill-designed application?&lt;/p&gt;
&lt;p&gt;To clarify this I&amp;rsquo;ve conducted a series of experiments for 3 possible configmap-reloading  strategies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Built-in auto-reloading apps&lt;/li&gt;
&lt;li&gt;External signals&lt;/li&gt;
&lt;li&gt;Pod rollout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article I&amp;rsquo;m going to explain the experiments and preliminary findings.  All experiment materials are available in the &lt;a href=&#34;https://github.com/William-Yeh/configmap-auto-reload&#34;&gt;configmap-auto-reload&lt;/a&gt; repo.&lt;/p&gt;
&lt;h2 id=&#34;built-in-auto-reloading-apps&#34;&gt;Built-in auto-reloading apps&lt;/h2&gt;
&lt;p&gt;Some applications (e.g., &lt;a href=&#34;https://traefik.io/&#34;&gt;Traefik&lt;/a&gt;) are smart enough to gracefully reload themselves whenever they detect any configuration changes without downtime.  Will this work with Kubernetes ConfigMap?&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;https://github.com/William-Yeh/configmap-auto-reload/tree/master/traefik-example&#34;&gt;traefik-example&lt;/a&gt; demo:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/251179&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/251179.svg&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Perfect!  Traefik auto-reloads itself as long as you correctly mount the &lt;code&gt;traefik-config&lt;/code&gt; ConfigMap as &lt;code&gt;/etc/traefik/&lt;/code&gt; directory for the pod.  Here&amp;rsquo;s the related &lt;a href=&#34;https://github.com/William-Yeh/configmap-auto-reload/blob/master/traefik-example/traefik-config.yml#L11-L13&#34;&gt;code snippet&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;[file]
watch = true
directory = &amp;#34;/etc/traefik/&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;external-signals&#34;&gt;External signals&lt;/h2&gt;
&lt;p&gt;Some applications can &lt;em&gt;reload&lt;/em&gt; configurations; but not &lt;em&gt;auto-reload&lt;/em&gt;. Instead, they reload their configurations when they are &lt;em&gt;told&lt;/em&gt; to do so.  For example, when Nginx receives a &lt;code&gt;HUP&lt;/code&gt; signal (&lt;code&gt;nginx -s reload&lt;/code&gt;) &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, and when Apache HTTP Server receives a &lt;code&gt;HUP&lt;/code&gt; signal (&lt;code&gt;apache -k restart&lt;/code&gt;) or &lt;code&gt;USR1&lt;/code&gt; signal (&lt;code&gt;apache -k graceful&lt;/code&gt;) &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, they will reload new configurations without downtime.&lt;/p&gt;
&lt;p&gt;Who should be the &lt;code&gt;HUP&lt;/code&gt; signal sender in Kubernetes?&lt;/p&gt;
&lt;p&gt;Before Docker and Kubernetes rule the world, there were plenty of such tools, e.g., &lt;a href=&#34;https://github.com/rvoicilas/inotify-tools&#34;&gt;inotify-tools&lt;/a&gt; and &lt;a href=&#34;https://github.com/kimmobrunfeldt/chokidar-cli&#34;&gt;Chokidar cli&lt;/a&gt;.  People used them to watch for changes in specified directories and to invoke dedicated actions accordingly (including sending signals, of course).&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;//william-yeh.net/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; 
  style=&#34;max-width:30em&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;//william-yeh.net/img/2019/06/inotifywait.png&#34; alt=&#34;Combo trick: Inotifywait &amp;#43; Nginx&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;//william-yeh.net/img/2019/06/inotifywait.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Combo trick: Inotifywait &amp;#43; Nginx&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Will this combo trick work with Kubernetes ConfigMap?&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;https://github.com/William-Yeh/configmap-auto-reload/tree/master/inotifywait-example&#34;&gt;inotifywait-example&lt;/a&gt; demo:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/251666&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/251666.svg&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Good!  Inotifywait detects the changes and sends &lt;code&gt;HUP&lt;/code&gt; signals to Nginx as long as you correctly mount the &lt;code&gt;nginx-config&lt;/code&gt; ConfigMap as &lt;code&gt;/etc/nginx/&lt;/code&gt; directory for the pod.  Here&amp;rsquo;s the related &lt;a href=&#34;https://github.com/William-Yeh/configmap-auto-reload/blob/master/inotifywait-example/watch-nginx.sh#L13-L22&#34;&gt;code snippet&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;if [[ &amp;#34;$(inotifywatch -e modify,create,delete,move -t 15 /etc/nginx/ 2&amp;gt;&amp;amp;1)&amp;#34; =~ filename ]]; then
    echo &amp;#34;Try to verify updated nginx config...&amp;#34;
    nginx -t
    if [ $? -ne 0 ]; then
        echo &amp;#34;ERROR: New configuration is invalid!!&amp;#34;
    else
        echo &amp;#34;Reloading nginx with new config...&amp;#34;
        nginx -s reload
    fi
fi;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DISCLAIMER: it&amp;rsquo;s just for demo; not a robust implementation. For more examples, see &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;CAUTION: it is against the best practice of &amp;ldquo;one process per container&amp;rdquo; policy.&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;  If you really want to use this combo trick, try to model it as &amp;ldquo;multiple containers within a single pod.&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;pod-rollout&#34;&gt;Pod rollout&lt;/h2&gt;
&lt;p&gt;Some applications do not have any configuration reloading mechanism. What should we do? Maybe the only reasonable way is to rollout their running instances, and just spawn new ones with the new configurations.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/stakater/Reloader&#34;&gt;Reloader&lt;/a&gt; is a generic solution for Kubernetes. With the help of it, pods can be restarted whenever related ConfigMap has changed.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;https://github.com/William-Yeh/configmap-auto-reload/tree/master/reloader-example&#34;&gt;reloader-example&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/251670&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/251670.svg&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Perfect!  Nginx pods get rolling updated by Reloader as long as you annotate the Nginx deployment with &lt;code&gt;configmap.reloader.stakater.com/reload&lt;/code&gt;.  Here&amp;rsquo;s the related &lt;a href=&#34;https://github.com/William-Yeh/configmap-auto-reload/blob/master/reloader-example/nginx-service.yml#L25-L26&#34;&gt;code snippet&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  annotations:
    configmap.reloader.stakater.com/reload: &amp;#34;nginx-config&amp;#34;
  ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If your application is smart enough to gracefully reload itself whenever it detects any configuration changes, it continues working well with ConfigMap in Kubernetes.&lt;/p&gt;
&lt;p&gt;If not so smart, an easier approach is to use automatic tools (e.g., &lt;a href=&#34;https://github.com/stakater/Reloader&#34;&gt;Reloader&lt;/a&gt;) to rolling update related pods.&lt;/p&gt;
&lt;p&gt;I will not recommend the watch+signal approach (e.g., &lt;a href=&#34;https://github.com/rvoicilas/inotify-tools&#34;&gt;inotify-tools&lt;/a&gt;). It is prone to error and zombie processes.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  Series of Articles
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;❶ &lt;a href=&#34;//william-yeh.net/post/2019/06/inotify-in-containers/&#34;&gt;Inotify in Containers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;❷ &lt;a href=&#34;//william-yeh.net/post/2019/06/containers-and-env/&#34;&gt;Containers and Environment Variables&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;➌ Auto-Reload from ConfigMap&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Nginx official document: &lt;a href=&#34;http://nginx.org/en/docs/control.html&#34;&gt;Controlling nginx&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Apache official document: &lt;a href=&#34;https://httpd.apache.org/docs/2.4/stopping.html&#34;&gt;Stopping and Restarting Apache HTTP Server&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;An implementation worth studying: &lt;a href=&#34;https://github.com/rosskukulinski/nginx-kubernetes-reload&#34;&gt;https://github.com/rosskukulinski/nginx-kubernetes-reload&lt;/a&gt; &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Q&amp;amp;A in Stack Overflow: &lt;a href=&#34;https://stackoverflow.com/questions/41031170/nginx-reload-configuration-best-practice&#34;&gt;Nginx Reload Configuration Best Practice&lt;/a&gt; &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/telephone/nginx-watch&#34;&gt;https://github.com/telephone/nginx-watch&lt;/a&gt; &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/solutions/best-practices-for-building-containers&#34;&gt;Best practices for building containers&lt;/a&gt;. &lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
      
    </item>
    
    <item>
      <title>Containers and Environment Variables</title>
      <link>//william-yeh.net/post/2019/06/containers-and-env/</link>
      <pubDate>Mon, 17 Jun 2019 14:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/06/containers-and-env/</guid>
      
        <description>&lt;p&gt;My previous article &amp;ldquo;&lt;a href=&#34;//william-yeh.net/post/2019/06/inotify-in-containers/&#34;&gt;Inotify in Containers&lt;/a&gt;&amp;rdquo; has demonstrated that when ConfigMap is mounted as &lt;em&gt;directories&lt;/em&gt;, any changes in the ConfigMap will propagate to related pods.&lt;/p&gt;
&lt;p&gt;A follow-up question might be: what if the ConfigMap is mounted as &lt;em&gt;environment variables&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Some said that the answer is NO in Kubernetes&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;; even in the old Docker world&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.  Therefore, I&amp;rsquo;d like to begin with a simple experiment to try to answer the question: After a container starts, will it see any changes of environment variables?&lt;/p&gt;
&lt;p&gt;The experiment material is available at &lt;a href=&#34;https://github.com/William-Yeh/container-and-env&#34;&gt;https://github.com/William-Yeh/container-and-env&lt;/a&gt; , and here&amp;rsquo;s a simple demo:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/252073&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/252073.svg&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is obvious in the demo that the changes of environment variables will not affect already-running processes inside the containers &amp;mdash; let alone pods in the Kubernetes world.&lt;/p&gt;
&lt;p&gt;To simply put, if you want ConfigMap to propagate its changes to related pods, mount the ConfigMap as &lt;em&gt;directories&lt;/em&gt;, not &lt;em&gt;environment variables&lt;/em&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  Series of Articles
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;❶ &lt;a href=&#34;//william-yeh.net/post/2019/06/inotify-in-containers/&#34;&gt;Inotify in Containers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;❷ Containers and Environment Variables&lt;/p&gt;
&lt;p&gt;➌ &lt;a href=&#34;//william-yeh.net/post/2019/06/autoreload-from-configmap/&#34;&gt;Auto-Reload from ConfigMap&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;An analysis of ConfigMap hot-reload can be found in the article by Jimmy Song: “&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/configmap-hot-update.html&#34;&gt;ConfigMap 的热更新&lt;/a&gt;”. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;A good Q&amp;amp;A in Stack Overflow: &lt;a href=&#34;https://stackoverflow.com/a/54412751/714426&#34;&gt;Reload configuration when env variable has changed&lt;/a&gt;. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
      
    </item>
    
    <item>
      <title>Inotify in Containers</title>
      <link>//william-yeh.net/post/2019/06/inotify-in-containers/</link>
      <pubDate>Mon, 10 Jun 2019 18:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/06/inotify-in-containers/</guid>
      
        <description>&lt;p&gt;It is usually necessary to watch for any changes in file systems, both in development and in production modes. For example, in the development mode &lt;a href=&#34;https://webpack.js.org/&#34;&gt;Webpack&lt;/a&gt; can watch files and recompile whenever they change; in the production mode &lt;a href=&#34;https://github.com/hashicorp/consul-template&#34;&gt;Consul Template&lt;/a&gt; can watch runtime configs and invoke specific applications whenever they change.&lt;/p&gt;
&lt;p&gt;These are well-known scenarios in traditional pre-container world.  How about the container world? Do they behave the same in the new container world?&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve occasionally found that something behave differently in the container world. To clarify this I&amp;rsquo;ve conducted a series of experiments. In this article I&amp;rsquo;m going to explain the experiments and preliminary findings.  All experiment materials are available in the &lt;a href=&#34;https://github.com/William-Yeh/fswatch&#34;&gt;fswatch&lt;/a&gt; repo.&lt;/p&gt;
&lt;h2 id=&#34;experiment-setting&#34;&gt;Experiment setting&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve divided the experiments into 4 groups.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Group A (experiment 1 to 3) is the traditional native mode: run native apps in their native host operating systems, respectively. This is considered as the control group.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Group B (experiment 4 to 6) is the Linux container mode: run the same containerized Linux app in 3 different host operating systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Group C (experiment 7) is the Windows container mode: run the containerized Windows app in the Windows operating system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Group D (experiment 8) is the Kubernetes mode: run the containerized Linux app in Kubernetes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Host OS&lt;/th&gt;
&lt;th&gt;App run as&lt;!-- raw HTML omitted --&gt;native app&lt;/th&gt;
&lt;th&gt;App run as&lt;!-- raw HTML omitted --&gt;Linux Container&lt;/th&gt;
&lt;th&gt;App run as&lt;!-- raw HTML omitted --&gt;Windows Container&lt;/th&gt;
&lt;th&gt;‖&lt;/th&gt;
&lt;th&gt;App run in&lt;!-- raw HTML omitted --&gt;K8s (Linux Container)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Linux&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/William-Yeh/fswatch/tree/master/test-matrix/1_native_linux&#34;&gt;1&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/4_host_linux_container_linux&#34;&gt;4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;‖&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/8_k8s_linux&#34;&gt;8&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mac&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/William-Yeh/fswatch/tree/master/test-matrix/2_native_mac&#34;&gt;2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/5_host_mac_container_linux&#34;&gt;5&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/3_native_win&#34;&gt;3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/6_host_win_container_linux&#34;&gt;6&lt;/a&gt; (LCOW)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/7_host_win_container_win&#34;&gt;7&lt;/a&gt; (WCOW)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;group-a-native-mode&#34;&gt;Group A: native mode&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with the native mode as the control group. We&amp;rsquo;ll see how it works in the traditional world of Linux, Mac, and Windows.&lt;/p&gt;
&lt;p&gt;To make life easier, I&amp;rsquo;m using the &lt;a href=&#34;https://github.com/fsnotify/fsnotify&#34;&gt;fsnotify&lt;/a&gt; library to unify a variety of underlying operating system APIs (e.g., &lt;a href=&#34;https://en.wikipedia.org/wiki/Inotify&#34;&gt;&lt;code&gt;inotify&lt;/code&gt;&lt;/a&gt; in Linux, &lt;a href=&#34;https://en.wikipedia.org/wiki/Kqueue&#34;&gt;&lt;code&gt;kqueue&lt;/code&gt;&lt;/a&gt; in macOS, and &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-readdirectorychangesw&#34;&gt;&lt;code&gt;ReadDirectoryChangesW&lt;/code&gt;&lt;/a&gt; in Windows).  Statically-linked binaries for the 3 platforms are generated with the Go compiler 1.12.5:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2,943,200 (bytes) &lt;code&gt;fswatch-linux-x86_64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2,861,360 (bytes) &lt;code&gt;fswatch-mac&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2,914,304 (bytes) &lt;code&gt;fswatch-x86_64.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These experiments are easy to try by yourself. Take experiment &lt;a href=&#34;https://github.com/William-Yeh/fswatch/tree/master/test-matrix/1_native_linux&#34;&gt;1&lt;/a&gt; &amp;ldquo;run native Linux app in Linux host OS&amp;rdquo; for example:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/250732&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/250732.svg&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this group, changes in the file system can be tracked successfully by their native API mechanisms, respectively.&lt;/p&gt;
&lt;h2 id=&#34;group-b-and-c-container-mode&#34;&gt;Group B and C: container mode&lt;/h2&gt;
&lt;p&gt;Containers make things a little bit complicated.&lt;/p&gt;
&lt;p&gt;TL;DR: &lt;em&gt;The LCOW version doesn&amp;rsquo;t work well.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When there&amp;rsquo;s a mismatch between host OS and container, &lt;code&gt;inotify&lt;/code&gt; may not work well.&lt;/p&gt;
&lt;p&gt;Take experiment &lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/6_host_win_container_linux&#34;&gt;6&lt;/a&gt; (LCOW) &amp;ldquo;run containerized Linux app in Windows host OS&amp;rdquo; for example. The &lt;a href=&#34;https://docs.docker.com/docker-for-windows/troubleshoot/#inotify-on-shared-drives-does-not-work&#34;&gt;document&lt;/a&gt; for Docker Desktop for Windows has a warning for us:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Inotify on shared drives does not work&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Currently, &lt;code&gt;inotify&lt;/code&gt; does not work on Docker Desktop for Windows. This becomes evident, for example, when an application needs to read/write to a container across a mounted drive. Instead of relying on filesystem &lt;code&gt;inotify&lt;/code&gt;, we recommend using polling features for your framework or programming language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For Windows users, &lt;code&gt;inotify&lt;/code&gt; works well in the WCOW mode (experiment &lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/7_host_win_container_win&#34;&gt;7&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;On the other hand, Mac users are luckier.  Docker Desktop for Mac doesn&amp;rsquo;t have much trouble here (experiment &lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/5_host_mac_container_linux&#34;&gt;5&lt;/a&gt;) thanks to excellent implementation of &lt;strong&gt;osxfs&lt;/strong&gt;.  See &amp;ldquo;&lt;a href=&#34;https://docs.docker.com/docker-for-mac/osxfs/&#34;&gt;File system sharing (osxfs)&lt;/a&gt;&amp;rdquo; and &amp;ldquo;&lt;a href=&#34;https://docs.docker.com/docker-for-mac/osxfs-caching/&#34;&gt;Performance tuning for volume mounts (shared filesystems)&lt;/a&gt;&amp;rdquo; articles for more information.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;File system events&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most &lt;code&gt;inotify&lt;/code&gt; events are supported in bind mounts, and likely &lt;code&gt;dnotify&lt;/code&gt; and &lt;code&gt;fanotify&lt;/code&gt; (though they have not been tested) are also supported. This means that file system events from macOS are sent into containers and trigger any listening processes there.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;group-d-k8s-mode&#34;&gt;Group D: K8s mode&lt;/h2&gt;
&lt;p&gt;How about Kubernetes?  Does &lt;code&gt;inotify&lt;/code&gt; work well with the ConfigMap?&lt;/p&gt;
&lt;p&gt;Below is the demo for experiment &lt;a href=&#34;https://github.com/William-Yeh/fswatch/blob/master/test-matrix/8_k8s_linux&#34;&gt;8&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/250736&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/250736.svg&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As you can see in this demo, any changes in the ConfigMap will propagate to related pods in a couple of seconds, and &lt;code&gt;inotify&lt;/code&gt; will detect this event as well. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&#34;caution-about-symbolic-links&#34;&gt;Caution about symbolic links&lt;/h3&gt;
&lt;p&gt;In such situation, however, you should use &lt;code&gt;inotify&lt;/code&gt; to watch for &lt;em&gt;directories&lt;/em&gt; instead of merely for &lt;em&gt;files&lt;/em&gt;.  It is because Kubernetes may use symbolic links to point to versioned ConfigMap volumes, and &lt;code&gt;inotify&lt;/code&gt; doesn&amp;rsquo;t work well with such symbolic links. &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s retry the demo, but this time we&amp;rsquo;ll focus on the directory layout from the pod&amp;rsquo;s point of view.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/251141&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/251141.svg&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The demo from &lt;a href=&#34;https://asciinema.org/a/251141?t=0:38&#34;&gt;0:38&lt;/a&gt; to 1:55 shows the directory layout from the pod&amp;rsquo;s point of view:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;/mnt/site # ls -al
total 12
drwxrwxrwx    3 root  root   4096 Jun 12 06:19 .
drwxr-xr-x    1 root  root   4096 Jun 12 06:19 ..
drwxr-xr-x    2 root  root   4096 Jun 12 06:19 ..2019_06_12_06_19_15.187277003
lrwxrwxrwx    1 root  root     31 Jun 12 06:19 ..data -&amp;gt; ..2019_06_12_06_19_15.187277003
lrwxrwxrwx    1 root  root     15 Jun 12 06:19 main.css -&amp;gt; ..data/main.css&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Simply put, things go well if you&amp;rsquo;re inside the pod and watch for &lt;code&gt;/mnt/site&lt;/code&gt; directory, but may not go well if you try to watch for a specific file &lt;code&gt;/mnt/site/main.css&lt;/code&gt; since it is internally a symbolic link managed by Kubernetes.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;inotify&lt;/code&gt; mechanism works in the container and Kubernetes world, except for the LCOW case.&lt;/p&gt;
&lt;p&gt;If such a feature is needed in the LCOW setting, maybe you have to seek another workaround workflow; e.g., put &lt;code&gt;inotify&lt;/code&gt; mechanism outside the container, and propagate the event explicitly into the containers if any.  This is exactly what &lt;a href=&#34;https://skaffold.dev/&#34;&gt;Skaffold&lt;/a&gt; is doing.&lt;/p&gt;
&lt;p&gt;Also note that &lt;code&gt;inotify&lt;/code&gt; works better when ConfigMap is mounted as directories, rather than as merely files.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  Series of Articles
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;❶ Inotify in Containers&lt;/p&gt;
&lt;p&gt;❷ &lt;a href=&#34;//william-yeh.net/post/2019/06/containers-and-env/&#34;&gt;Containers and Environment Variables&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;➌ &lt;a href=&#34;//william-yeh.net/post/2019/06/autoreload-from-configmap/&#34;&gt;Auto-Reload from ConfigMap&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Another analysis of ConfigMap hot-reload can be found in the article by Jimmy Song: “&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/configmap-hot-update.html&#34;&gt;ConfigMap 的热更新&lt;/a&gt;”. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/28769503/use-inotify-to-watch-a-file-with-multiple-symlinks&#34;&gt;Use INotify to watch a file with multiple symlinks&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
      
    </item>
    
    <item>
      <title>Kubernetes 的入門認知與導入策略</title>
      <link>//william-yeh.net/post/2019/05/k8s-lab/</link>
      <pubDate>Fri, 17 May 2019 12:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/05/k8s-lab/</guid>
      
        <description>&lt;p&gt;前天我在 &lt;a href=&#34;https://cloudsummit.ithome.com.tw/&#34;&gt;2019 台灣雲端大會&lt;/a&gt;帶了兩個場次，一個是現場實作場次，一個是經驗分享演講：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lab / &lt;a href=&#34;https://github.com/William-Yeh/workshop-cloud2019&#34;&gt;給 RD 的 Kubernetes 初體驗&lt;/a&gt; (90 minutes)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speech / &lt;a href=&#34;https://www.slideshare.net/williamyeh/when-dotnetmeetskubernetes-145557464&#34;&gt;當 .NET 遇到 Kubernetes&lt;/a&gt; (30 minutes)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;兩個場次，一言以蔽之，都圍繞在 Kubernetes 的入門認知與導入策略上。&lt;/p&gt;
&lt;h2 id=&#34;以問題解決角度看-kubernetes-導入&#34;&gt;以「問題解決」角度看 Kubernetes 導入&lt;/h2&gt;
&lt;p&gt;〈&lt;a href=&#34;https://www.slideshare.net/williamyeh/when-dotnetmeetskubernetes-145557464&#34;&gt;當 .NET 遇到 Kubernetes&lt;/a&gt;〉這場演講，是以「問題解決」的角度，探討導入 Kubernetes 的困難與策略，尤其是針對 .NET 族群。&lt;/p&gt;
&lt;iframe
  style=&#34;width: 100%; height: 500px;&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;
  src=&#34;https://www.slideshare.net/slideshow/embed_code/145557464&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;
&lt;p&gt;整場演講的脈絡如下：&lt;/p&gt;
&lt;p&gt;① 為什麼要導入 Kubernetes？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我們的現況是什麼？&lt;/li&gt;
&lt;li&gt;外面的世界已經是什麼樣子？&lt;/li&gt;
&lt;li&gt;不正視差距，會有什麼影響？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;② 為什麼還 &lt;strong&gt;不&lt;/strong&gt; 導入 Kubernetes？&lt;/p&gt;
&lt;p&gt;我嘗試用&lt;a href=&#34;https://www.behaviormodel.org/&#34;&gt;法格行為模型&lt;/a&gt; (B=MAP) 來歸類問題原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;M&lt;/strong&gt;otivation / 我們真的認識 Kubernetes 真實的利益是什麼嗎？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;bility / 正確認識技術核心、外在因素、內在因素，才能正確評估我們的技術能力是否已經提升到足以擁抱 Kubernetes 的地步。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P&lt;/strong&gt;rompt / 是否有臨門一腳的驅動力？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;③ 有什麼建議的導入選項？&lt;/p&gt;
&lt;p&gt;我發現 Prajakta Joshi 的演講 &amp;ldquo;&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=NET206&#34;&gt;Strategies for Bringing Kubernetes, Istio, Traffic Director, and Envoy to Brownfield with Walmart, Google, Tetrate&lt;/a&gt;&amp;rdquo; &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 已經給了很好的建議。因此，我引述她的論點，建議大家可以採用兩種路徑：(a) Container first and mesh next，(b) Mesh first and container next。&lt;/p&gt;
&lt;p&gt;我這場演講有開放錄影。等上線了，我會再補上連結。&lt;/p&gt;
&lt;h2 id=&#34;rd-也需要略懂-kubernetes&#34;&gt;RD 也需要略懂 Kubernetes&lt;/h2&gt;
&lt;p&gt;Kubernetes 是目前雲端環境的顯學。可是，傳統的程式，並不是原封不動搬上去，就能夠自動享受 Kubernetes 所宣稱的種種好處。新的環境，不僅需要新的 Ops 思維，也需要新的 Dev 思維。&lt;/p&gt;
&lt;p&gt;我設計〈&lt;a href=&#34;https://github.com/William-Yeh/workshop-cloud2019&#34;&gt;給 RD 的 Kubernetes 初體驗&lt;/a&gt;〉工作坊，嘗試以一個半小時的時間，從軟體研發者的角度，探討軟體的設計該做哪些最起碼的改變，並從實作中體驗 Kubernetes 引進的新觀念及新效益。&lt;/p&gt;
&lt;p&gt;我希望能夠讓學員從實例中體驗，傳統 web 應用程式在搬上 Kubernetes 時，可能會經歷哪些架構面的調整，才能享受新架構的效益。&lt;/p&gt;
&lt;p&gt;我試圖不只是 demo，也不只是讓大家能無腦照著做，還試圖進行一些觀念講解。短短一個半小時，野心太大，只好割捨原本已經準備好的 API Gateway 例子 &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，集中在以下課題：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器化&lt;/li&gt;
&lt;li&gt;微服務&lt;/li&gt;
&lt;li&gt;組態管理&lt;/li&gt;
&lt;li&gt;多重環境管理：本機端與雲端（以 GKE 為例）&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe
  style=&#34;width: 100%; height: 500px;&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;
  src=&#34;https://www.slideshare.net/slideshow/embed_code/145761572&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/William-Yeh/workshop-cloud2019&#34;&gt;範例程式&lt;/a&gt;也以迭代演進的形式，逐步添加 Kubernetes 功能，呼應〈&lt;a href=&#34;https://www.slideshare.net/williamyeh/when-dotnetmeetskubernetes-145557464&#34;&gt;當 .NET 遇到 Kubernetes&lt;/a&gt;〉演講所提出的 &amp;ldquo;Container first and mesh next&amp;rdquo; 導入策略。&lt;/p&gt;
&lt;p&gt;Container:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1.0: Extracted from Microsoft Docs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.0: Dockerize the app with simple Dockerfile and docker-compose.yml.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3.0: Separate frontend and backend into 2 distinct containers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;4.0: Support Kubernetes (locally).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4.1: Use Kubernetes dashboard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5.0: Support ConfigMap and naming convention.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cloud（感謝&lt;a href=&#34;https://tw.linkedin.com/in/ericsk&#34;&gt;上官林傑&lt;/a&gt;大力支援 Google Cloud 的 redeem coupon）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;6.0: Support Kubernetes on the cloud (GKE for example).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;7.0: Support canary release.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可惜，一個半小時的時間還是太短了，最後面 30 分鐘其實是在趕進度，跳過了一些原本應該仔細講解的環節（譬如：ConfigMap、label &amp;amp; selector、ephemeral vs static external IP 的區分⋯⋯）。我再考慮另外找個社群的場子，辦一次較完整的 workshop 吧。完整的，應該會需要 2.5～3 小時。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  2019-06-16 補充
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;一個月後，應 &lt;a href=&#34;https://www.meetup.com/GCPUG-Taipei/events/261797460/&#34;&gt;GCPUG Taipei&lt;/a&gt; 之邀，我辦了一場 3+1 小時的 Workshop，&lt;a href=&#34;https://www.slideshare.net/williamyeh/rd-kubernetes-gcpug-2019-06/&#34;&gt;投影片&lt;/a&gt;及&lt;a href=&#34;https://github.com/William-Yeh/workshop-gcpug201906/&#34;&gt;實作範例&lt;/a&gt;都有更新。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;希望這一場演講，一場實作工作坊，對大家有助益。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;我在〈&lt;a href=&#34;//william-yeh.net/post/2019/04/next19-istio/&#34;&gt;Next ’19 的 Istio 場次重點摘要&lt;/a&gt;〉一文中，有介紹 Prajakta Joshi 在 Google Cloud Next ’19 另一場精彩的演講。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;關於 Kubernetes 的 API gateway，請參考〈&lt;a href=&#34;//william-yeh.net/post/2019/03/ingress-vs-ambassador/&#34;&gt;Nginx Ingress 與 Ambassador 簡易性能比較&lt;/a&gt;〉一文。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
      
    </item>
    
    <item>
      <title>Next &#39;19 的 Istio 場次重點摘要</title>
      <link>//william-yeh.net/post/2019/04/next19-istio/</link>
      <pubDate>Fri, 19 Apr 2019 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/04/next19-istio/</guid>
      
        <description>&lt;p&gt;四月 9&amp;ndash;11 日去舊金山參加 Google Cloud 的 &lt;a href=&#34;https://cloud.withgoogle.com/next/sf/&#34;&gt;Next ’19&lt;/a&gt; 大會，收穫頗大。&lt;/p&gt;
&lt;p&gt;這場大會，同一時段就有近 30 場專題演講同時進行，議程滿滿，勢必得做取捨。基於工作需要及個人興趣，我主要選擇與容器相關的場次：service mesh、Windows containers、混合雲、資安實務。&lt;/p&gt;
&lt;p&gt;我發現，光是這些場次，就得花很大力氣去消化、實驗與應用。&lt;/p&gt;
&lt;p&gt;我們這些所謂的「台港團」會在 GCPUG Taipei 舉辦一場&lt;a href=&#34;https://www.meetup.com/GCPUG-Taipei/events/260555968/&#34;&gt;分享會&lt;/a&gt;。因為自己不克參加，便以這篇文章，針對我鎖定的核心議題：Istio，做一番重點摘要，以饗讀者。&lt;/p&gt;
&lt;p&gt;以下內容，不完全按照 Next ’19 的議程時間順序，而是依照我主觀的排列。&lt;/p&gt;
&lt;p&gt;看完後，對於 Istio 應該就有不錯的全面認知了。&lt;/p&gt;
&lt;h2 id=&#34;漸進式導入-istio&#34;&gt;漸進式導入 Istio&lt;/h2&gt;
&lt;p&gt;很有意思的演講，很適合作為 Istio 入門。&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/0cgTHQFXYPQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=HYB102&#34;&gt;Incrementally Adopting Istio&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
【重點摘要】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/0cgTHQFXYPQ?t=3m20s&#34;&gt;3:20&lt;/a&gt; - 微服務面臨的挑戰。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/0cgTHQFXYPQ?t=6m18s&#34;&gt;6:18&lt;/a&gt; - Istio 的 control plane 三大元件，就是設計來一一對應這些問題的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/0cgTHQFXYPQ?t=10m38s&#34;&gt;10:38&lt;/a&gt; - Istio 的 telemetry 機制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/0cgTHQFXYPQ?t=11m42s&#34;&gt;11:42&lt;/a&gt; - Istio 的 traffic 管理機制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/0cgTHQFXYPQ?t=15m10s&#34;&gt;15:10&lt;/a&gt; - Istio 的 security 機制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/0cgTHQFXYPQ?t=16m27s&#34;&gt;16:27&lt;/a&gt; - 在 GKE 安裝 Istio 的方法及使用建議。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/0cgTHQFXYPQ?t=19m11s&#34;&gt;19:11&lt;/a&gt; - 接下來就是一系列的漸進式示範。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;istio-的-traffic宏觀角度&#34;&gt;Istio 的 Traffic：宏觀角度&lt;/h2&gt;
&lt;p&gt;在 Istio + Envoy 體系中，是透過 control plane 的 Pilot 元件及 xDS 協定，去管理 data plane 的 Envoy 網路流量。&lt;/p&gt;
&lt;p&gt;以此為基礎，Google Cloud 推出 &lt;a href=&#34;https://cloud.google.com/traffic-director/&#34;&gt;Traffic Director&lt;/a&gt; 服務，用統一的 control plane、透過同樣的 xDSv2 API，去管理 GCP 能觸及的 GKE、GCE，甚至自建的 Kubernetes cluster；也藉此處理 GCP 之專屬特性。&lt;/p&gt;
&lt;p&gt;某種意義上，可以把 Traffic Director 視為將 Istio 的 Pilot 元件託管給 Google Cloud。&lt;/p&gt;
&lt;p&gt;這場演講，儘管旨在&lt;del&gt;廣告&lt;/del&gt;宣傳 Google 自家的 Traffic Director 服務，但講員之一 Prajakta Joshi 非常厲害，對於一般性的 service mesh 觀念也介紹得非常生動。&lt;/p&gt;
&lt;p&gt;這一場值得全程觀看。我僅摘錄部分重點。&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/FUITCYMCEhU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=NET207&#34;&gt;Traffic Director and Envoy-Based L7 ILB for Production-Grade Service Mesh and Istio&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
【重點摘要】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=1m21s&#34;&gt;1:21&lt;/a&gt; - 很中肯的觀點：將 service mesh 視為 “&lt;strong&gt;SDN for services&lt;/strong&gt;”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=4m45s&#34;&gt;4:45&lt;/a&gt; - Istio 簡介。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=5m48s&#34;&gt;5:48&lt;/a&gt; - 介紹 Istio 的 Pilot 流量管理議題。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=5m48s&#34;&gt;6:40&lt;/a&gt; - 正式介紹 Traffic Director。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=14m45s&#34;&gt;14:45&lt;/a&gt; - Live demo: global load balancing。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=23m45s&#34;&gt;23:45&lt;/a&gt; - 介紹 service mesh 流量控制的特色：“&lt;strong&gt;change traffic flow without changing code&lt;/strong&gt;”，以及 traffic splitting、traffic steering、fault injection、mirroring (shadowing)、load balancing、circuit breaking、outlier detection 等高檔特性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=29m39s&#34;&gt;29:39&lt;/a&gt; - Live demo: traffic splitting。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=35m37s&#34;&gt;35:37&lt;/a&gt; - 預告 Traffic Director 的產品路線圖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/FUITCYMCEhU?t=42m56s&#34;&gt;42:56&lt;/a&gt; - 某客戶的 monolith 階段性轉型經驗。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;講員 Prajakta Joshi 另一場演講 &amp;ldquo;&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=NET206&#34;&gt;Strategies for Bringing Kubernetes, Istio, Traffic Director, and Envoy to Brownfield with Walmart, Google, Tetrate&lt;/a&gt;&amp;rdquo; 也很棒，可惜並未釋出投影片及錄影。精彩內容，就留在我的手機相簿裡面啦。&lt;/p&gt;
&lt;h2 id=&#34;istio-的-traffic實踐角度&#34;&gt;Istio 的 Traffic：實踐角度&lt;/h2&gt;
&lt;p&gt;我聽了 Megan O&amp;rsquo;Keefe 兩場硬底子的演講。&lt;/p&gt;
&lt;p&gt;第一場演講，以大量實例現場展示 Istio 的 traffic rules。&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/7cINRP0BFY8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=HYB201&#34;&gt;Istio in Production: Day 2 Traffic Routing&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
【重點摘要】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=2m18s&#34;&gt;2:18&lt;/a&gt; - Istio 與 Envoy 簡介。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=9m13s&#34;&gt;9:13&lt;/a&gt; - Live demo: rollout。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=13m45s&#34;&gt;13:45&lt;/a&gt; - Live demo: content-based routing。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=16m48s&#34;&gt;16:48&lt;/a&gt; - Live demo: circuit breaking。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=20m46s&#34;&gt;20:46&lt;/a&gt; - Live demo: chaos testing。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=24m48s&#34;&gt;24:48&lt;/a&gt; - Live demo: ingress and egress。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=36m26s&#34;&gt;36:26&lt;/a&gt; - Istio 1.1 現況。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=37m18s&#34;&gt;37:18&lt;/a&gt; - Istio 導入建議：“&lt;strong&gt;start slow and incrementally&lt;/strong&gt;”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/7cINRP0BFY8?t=38m36s&#34;&gt;38:36&lt;/a&gt; - Istio 還能夠做什麼？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二場演講，就更硬碰硬的處理 Istio 每天都可能遇到的幾個實踐問題，以及如何查找問題、解決問題的過程。三段 live demo，涵蓋 Istio control plane 的三大元件：Pilot、Mixer、Citadel，非常扎實。&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/FbYBO7Pi2d8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=HYB303&#34;&gt;Debugging Istio: How to Fix a Broken Service Mesh&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
【重點摘要】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/FbYBO7Pi2d8?t=0m35s&#34;&gt;0:35&lt;/a&gt; - Service mesh 是要解決甚麼問題？Istio 的 control plane 就是設計來一一對應這些問題的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/FbYBO7Pi2d8?t=2m54s&#34;&gt;2:54&lt;/a&gt; - 可是，Istio 又會連帶引入哪些複雜度？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/FbYBO7Pi2d8?t=4m46s&#34;&gt;4:46&lt;/a&gt; - Live demo: traffic management.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/FbYBO7Pi2d8?t=20m47s&#34;&gt;20:47&lt;/a&gt; - Live demo: telemetry.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/FbYBO7Pi2d8?t=27m58s&#34;&gt;27:58&lt;/a&gt; - Live demo: security.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/FbYBO7Pi2d8?t=44m23s&#34;&gt;44:23&lt;/a&gt; - 除錯工具推薦清單。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這兩場 Megan O&amp;rsquo;Keefe 的演講，雖然硬底子，卻十分具體，可操作性高，值得全程觀看。&lt;/p&gt;
&lt;h2 id=&#34;從-sre-角度看-istio&#34;&gt;從 SRE 角度看 Istio&lt;/h2&gt;
&lt;p&gt;這一場，只能說，非常非常非常精彩。&lt;/p&gt;
&lt;p&gt;對於讀過 Google 的 &lt;a href=&#34;https://landing.google.com/sre/books/&#34;&gt;&lt;em&gt;SRE&lt;/em&gt;&lt;/a&gt; 一書的人來說，看到 SLO、error budget 之類的觀念，居然可以在 Istio 上面如此實現，真是大開眼界。&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/AKh8uuVCpFI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=HYB309&#34;&gt;Understanding SLOs and Error Budgets With Istio&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
【重點摘要】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/AKh8uuVCpFI?t=1m40s&#34;&gt;1:40&lt;/a&gt; - SLI/SLO/SLA 基本觀念。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/AKh8uuVCpFI?t=7m41s&#34;&gt;7:41&lt;/a&gt; - &amp;ldquo;uptime&amp;rdquo; 的新觀點。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/AKh8uuVCpFI?t=9m04s&#34;&gt;9:04&lt;/a&gt; - 將 error budget 視為 “&lt;strong&gt;amount of SLOs you can spend&lt;/strong&gt;”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/AKh8uuVCpFI?t=13m49s&#34;&gt;13:49&lt;/a&gt; - Live demo!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/AKh8uuVCpFI?t=28m02s&#34;&gt;28:02&lt;/a&gt; - 客戶證言：Schlumberger 公司。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;把-vm-也帶進-service-mesh&#34;&gt;把 VM 也帶進 Service Mesh&lt;/h2&gt;
&lt;p&gt;Service mesh 並不是容器的專利；古老的 VM 其實也可以納入治理體系。&lt;/p&gt;
&lt;p&gt;透過 Istio 的 &lt;a href=&#34;https://istio.io/docs/setup/kubernetes/additional-setup/mesh-expansion/&#34;&gt;&lt;strong&gt;mesh expansion&lt;/strong&gt;&lt;/a&gt; 機制，VM 只要安裝 node agent 及 Envoy proxy，即可登記為 Kubernetes/Istio cluster 的 &lt;a href=&#34;https://istio.io/docs/reference/config/networking/v1alpha3/service-entry/&#34;&gt;service entry&lt;/a&gt; 資源，進行 service discovery 等互動。&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/2czElo8a7FM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=HYB308&#34;&gt;Istio Service Mesh for VM Native&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
【重點摘要】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/2czElo8a7FM?t=8m0s&#34;&gt;8:00&lt;/a&gt; - 介紹 Istio 的 mesh expansion 機制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/2czElo8a7FM?t=11m04s&#34;&gt;11:04&lt;/a&gt; - 具體步驟。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/2czElo8a7FM?t=13m23s&#34;&gt;13:23&lt;/a&gt; - Live demo!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;windows-containers&#34;&gt;Windows Containers&lt;/h2&gt;
&lt;p&gt;自從 3 月底 Kubernetes 1.14 宣布正式支援 Windows 之後&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，我就很期待到 Next ’19 現場眼見為憑。&lt;/p&gt;
&lt;p&gt;這一場值得全程觀看。我僅摘錄部分重點。&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/C4kW9uLmefU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=HYB108&#34;&gt;Windows Containers in Google Kubernetes Engine&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
【重點摘要】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/C4kW9uLmefU?t=7m50s&#34;&gt;7:50&lt;/a&gt; - &amp;ldquo;I have a dream&amp;hellip;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/C4kW9uLmefU?t=12m15s&#34;&gt;12:15&lt;/a&gt; - Windows host OS and base image requirements&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/C4kW9uLmefU?t=17m23s&#34;&gt;17:23&lt;/a&gt; - Which to containerize?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/C4kW9uLmefU?t=22m14s&#34;&gt;22:14&lt;/a&gt; - Kubernetes 1.14 stable supports Windows containers and Windows Server 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/C4kW9uLmefU?t=25m44s&#34;&gt;25:44&lt;/a&gt; - Limitations for Windows containers (for now)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/C4kW9uLmefU?t=28m16s&#34;&gt;28:16&lt;/a&gt; - GKE &amp;ldquo;is working on supporting Windows containers&amp;rdquo; (preview now)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/C4kW9uLmefU?t=30m40s&#34;&gt;30:40&lt;/a&gt; - Live demo!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/C4kW9uLmefU?t=37m0s&#34;&gt;37:00&lt;/a&gt; - Early Access Program (EAP)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api-視角&#34;&gt;API 視角&lt;/h2&gt;
&lt;p&gt;不管你想在容器化、微服務、service mesh 路線走到多遠，「API 管理」一直都是需要持續關注的一環。&lt;/p&gt;
&lt;p&gt;針對這議題，Next ’19 是以 &lt;a href=&#34;https://cloud.google.com/apigee/&#34;&gt;Apigee&lt;/a&gt; 為主軸&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，分別介紹 Apigee 如何與 service mesh 和 serverless 技術搭配運用。&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/IblDMVwSSk4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=HYB319&#34;&gt;APIs, Microservices, and the Service Mesh&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
【重點摘要】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/IblDMVwSSk4?t=3m21s&#34;&gt;3:21&lt;/a&gt; - 介紹 mTLS。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/IblDMVwSSk4?t=7m06s&#34;&gt;7:06&lt;/a&gt; - 用 Istio 在 control plane 層次確保 mTLS 之類的 policy。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/IblDMVwSSk4?t=12m47s&#34;&gt;12:47&lt;/a&gt; - 介紹 service mesh 時代的 API 管理架構。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/IblDMVwSSk4?t=33m09s&#34;&gt;33:09&lt;/a&gt; - 什麼時候才需要 service mesh？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/7fcpwM-8qPo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;【演講】&lt;a href=&#34;https://cloud.withgoogle.com/next/sf/sessions?session=SVR102&#34;&gt;API Management for Serverless and Multi-Cloud&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
【重點摘要】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/7fcpwM-8qPo?t=13m35s&#34;&gt;13:35&lt;/a&gt; - 示範 Cloud Run 與 Apigee。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/7fcpwM-8qPo?t=24m15s&#34;&gt;24:15&lt;/a&gt; - 示範 Cloud Functions 與 Apigee。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;這麼多乾貨，值得花點力氣好好消化。&lt;/p&gt;
&lt;h2 id=&#34;投影片&#34;&gt;投影片&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;  2019-07-02 補充
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;兩個月後，應 GCPUG Taipei 之邀，我還是在 &lt;a href=&#34;https://www.meetup.com/GCPUG-Taipei/events/262584153/&#34;&gt;Meetup #48&lt;/a&gt; 給了一場分享。投影片在此：&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/blog/2019/03/25/kubernetes-1-14-release-announcement/&#34;&gt;Kubernetes 1.14: Production-level support for Windows Nodes, Kubectl Updates, Persistent Local Volumes GA&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Apigee 於 2016 年被 Google 併購。詳見〈&lt;a href=&#34;https://www.ithome.com.tw/news/108342&#34;&gt;Google 以 6.25 億美元收購 Apigee，強化 API 管理服務&lt;/a&gt;〉一文。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
      
    </item>
    
    <item>
      <title>在 WSL 裡使用 Ansible &#43; Vagrant</title>
      <link>//william-yeh.net/post/2019/04/wsl-ansible-vagrant/</link>
      <pubDate>Thu, 18 Apr 2019 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/04/wsl-ansible-vagrant/</guid>
      
        <description>&lt;p&gt;既然要開始在 Windows 上沿用 Mac 及 Unix 的命令列工具習慣&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，免不了要處理 &lt;a href=&#34;https://github.com/ansible/ansible&#34;&gt;Ansible&lt;/a&gt; 及 &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;雖然這兩個軟體都有對應的 Windows 版本，但據我以前的經驗，卡卡的，有許多小地雷；畢竟這些發跡自泛 Unix 家族的軟體，不是那麼容易無縫移植到對命令列不友善的 Windows 家族。&lt;/p&gt;
&lt;p&gt;如今 Windows 已經有 &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/&#34;&gt;WSL (Windows Subsystem for Linux)&lt;/a&gt; 機制，是否可以更無痛享用 Ansible 及 Vagrant 呢？&lt;/p&gt;
&lt;p&gt;可以的。&lt;/p&gt;
&lt;p&gt;大體而言，我們會兵分二路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 Windows 上，會安裝 &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 WSL 上，會安裝 &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; 及 &lt;a href=&#34;https://github.com/ansible/ansible&#34;&gt;Ansible&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;虛擬機選項一virtualbox&#34;&gt;虛擬機選項一：VirtualBox&lt;/h2&gt;
&lt;p&gt;用慣 Mac 或 Linux 的人，可能會想沿用 &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt; 虛擬機軟體。畢竟 VirtualBox 是同屬開源生態系的一員，和其他開源軟體的相容性最高。&lt;/p&gt;
&lt;p&gt;你可以直接去官方網站&lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;下載&lt;/a&gt;安裝檔（VirtualBox 本體，以及 VirtualBox Extension Pack），或是直接透過 Chocolatey 套件管理工具來&lt;a href=&#34;https://chocolatey.org/packages/virtualbox&#34;&gt;安裝&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;C:\&amp;gt; choco install virtualbox&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安裝完後，還有一關要克服。&lt;/p&gt;
&lt;p&gt;一般來說，在同一個 host OS 上，同一時間，只能有一個底層虛擬機制存在（除非有像「巢狀虛擬化」之類的黑魔法……吧？）。因此，VirtualBox 無法與 Windows 官方欽定的 Hyper-V 機制同時並存，一山不容二虎&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;如果決定要使用 VirtualBox，請用管理者權限執行以下命令，暫時關閉 Hyper-V 功能&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;C:&amp;gt; dism.exe /Online /Disable-Feature:Microsoft-Hyper-V

C:&amp;gt; bcdedit /set hypervisorlaunchtype off&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這麼做的缺點是：由於 Docker Desktop for Windows 會用到 Hyper-V 機制，所以，關閉了 Hyper-V，等於是關閉了 Docker Desktop 的使用權。如果稍後還想使用 Docker Desktop，就得手動恢復 Hyper-V 功能：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;C:&amp;gt; dism.exe /Online /Enable-Feature:Microsoft-Hyper-V-All

C:&amp;gt; bcdedit /set hypervisorlaunchtype auto&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你可能需要在 Hyper-V 與 VirtualBox 模式之間來回切換，也需要重新開機。&lt;/p&gt;
&lt;h2 id=&#34;虛擬機選項二hyper-v&#34;&gt;虛擬機選項二：Hyper-V&lt;/h2&gt;
&lt;p&gt;在 Windows 上面玩 VirtualBox 這麼麻煩，換成 Hyper-V 會不會比較省事？&lt;/p&gt;
&lt;p&gt;很可惜，我在 &amp;ldquo;Hyper-V Administrators&amp;rdquo; 這一關觸礁了。嘗試一些可能的解法&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，都無效。&lt;/p&gt;
&lt;p&gt;真的有需要時，再回來研究吧。&lt;/p&gt;
&lt;h2 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h2&gt;
&lt;p&gt;直接比照 Linux 安裝 Vagrant 的方法。&lt;/p&gt;
&lt;p&gt;請在 WSL 底下，直接去官方網站&lt;a href=&#34;https://www.vagrantup.com/downloads.html&#34;&gt;下載&lt;/a&gt;安裝檔，或是用 Apt 之類的套件管理系統來安裝。&lt;/p&gt;
&lt;p&gt;安裝完畢，請根據官方網站的&lt;a href=&#34;https://www.vagrantup.com/docs/other/wsl.html&#34;&gt;建議&lt;/a&gt;設定環境變數。尤其是 &lt;code&gt;VAGRANT_WSL_ENABLE_WINDOWS_ACCESS&lt;/code&gt; 這一項：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;export VAGRANT_WSL_ENABLE_WINDOWS_ACCESS=&amp;#34;1&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ansible&#34;&gt;Ansible&lt;/h2&gt;
&lt;p&gt;直接比照 Linux 安裝 Ansible 的方法。&lt;/p&gt;
&lt;p&gt;請在 WSL 底下，照著官方網站的&lt;a href=&#34;https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-the-control-machine&#34;&gt;安裝步驟&lt;/a&gt;來執行。譬如說，在 Debian/Ubuntu 系列下，可以用 Apt 套件管理系統來安裝。&lt;/p&gt;
&lt;h2 id=&#34;ansible--vagrant&#34;&gt;Ansible + Vagrant&lt;/h2&gt;
&lt;p&gt;現在，試試看把 Ansible 和 Vagrant 結合起來！&lt;/p&gt;
&lt;p&gt;先準備好 &lt;code&gt;Vagrantfile&lt;/code&gt; 檔案：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;no&#34;&gt;Vagrant&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;bento/ubuntu-18.04&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;network&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;forwarded_port&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;guest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;provision&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ansible&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ansible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;ansible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compatibility_mode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt;
     &lt;span class=&#34;c1&#34;&gt;#ansible.verbose = &amp;#34;vvv&amp;#34;&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;ansible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;playbook&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;playbook.yml&amp;#34;&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;ansible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;become&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;還有 Ansible 的 &lt;code&gt;playbook.yml&lt;/code&gt; 檔案：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;- &lt;span class=&#34;k&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;all&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;become&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;tasks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;install&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nginx&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;apt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name=nginx&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;state=present&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;update_cache=yes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;試著啟動看看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% vagrant up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果一切順利，你可以在 &lt;code&gt;http://localhost:8080/&lt;/code&gt; 看到 Nginx 歡迎畫面。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在 Docker + Kubernetes 時代，用到 Ansible 的機會愈來愈少了，Vagrant 更是如此；不過，保有這種工具，在處理還來不及跟上腳步的舊系統仍然很管用。因此，花一點功夫湊出堪用的組合，希望能有順手的 WSL 環境。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;這段故事，詳見〈&lt;a href=&#34;//william-yeh.net/post/2019/03/wsl-cmder-zsh/&#34;&gt;在 Windows 上復刻 Mac 使用習慣&lt;/a&gt;〉一文。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;技術上來說，Hyper-V 是屬於 type-1 hypervisor，VirtualBox 是屬於 type-2 hypervisor。詳見維基百科 &amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hypervisor&#34;&gt;Hypervisor&lt;/a&gt;&amp;rdquo; 條目。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;在 Windows 上關閉 Hyper-V 機制，請參考以下文章：“&lt;a href=&#34;https://www.sysprobs.com/solved-vt-x-is-not-available-verr-vmx-no-vmx-in-windows-10-virtualbox&#34;&gt;(Solved) VT-x is Not Available (verr_vmx_no_vmx) in Windows 10 – but Available for Oracle VirtualBox&lt;/a&gt;”、〈&lt;a href=&#34;https://blog.csdn.net/imilano/article/details/83038682&#34;&gt;Win10 10月更新 VirtualBox VT-x is not available (VERR_VMX_NO_VMX). 解决&lt;/a&gt;〉、“&lt;a href=&#34;https://forums.virtualbox.org/viewtopic.php?f=38&amp;amp;t=89791&#34;&gt;[Solved] VT-x is not available (VERR_VMX_NO_VMX)&lt;/a&gt;”。 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;當 Vagrant 在使用 Hyper-V 時，會出現 &amp;ldquo;Hyper-V Administrators&amp;rdquo; 權限問題。我嘗試以下幾篇文章，可惜仍未解決：“&lt;a href=&#34;https://github.com/hashicorp/vagrant/issues/4503&#34;&gt;Vagrant issue #378&lt;/a&gt;”、“&lt;a href=&#34;https://blogs.msdn.microsoft.com/virtual_pc_guy/2014/06/11/allowing-non-administrators-to-control-hyper-vupdated/&#34;&gt;Allowing non-Administrators to control Hyper-V–Updated&lt;/a&gt;”、“&lt;a href=&#34;https://dev.to/nicolus/getting-homestead-to-play-nice-with-hyper-v-4202&#34;&gt;Getting Homestead to play nice with Hyper-V&lt;/a&gt;”。 &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
      
    </item>
    
    <item>
      <title>WSLtty &#43; tmux 組合技</title>
      <link>//william-yeh.net/post/2019/04/wsltty-tmux/</link>
      <pubDate>Wed, 17 Apr 2019 22:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/04/wsltty-tmux/</guid>
      
        <description>&lt;p&gt;在 Windows 10 上面使用 WSL 已經一個月了&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。小狀況也就罷了，但 &lt;a href=&#34;https://cmder.net/&#34;&gt;Cmder&lt;/a&gt; 不夠穩定的顯示邏輯卻最讓我頭痛，在視窗尺寸變化時，無法正確處理字元位置。更令人費解的是，即使是其他狀似更華麗（也更耗資源）的替代方案，也仍然有這些問題&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;既然酷炫的終端機競品問題多多，乾脆回歸極簡的 WSLtty&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，並混搭 tmux&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; 來彌補。可惜，畢竟是組合技，無法完全複製 Mac 的 iTerm2 使用經驗。&lt;/p&gt;
&lt;p&gt;此事古難全。&lt;/p&gt;
&lt;h2 id=&#34;wsltty-剪貼簿&#34;&gt;WSLtty 剪貼簿&lt;/h2&gt;
&lt;p&gt;在 X Window 或 Mac 的終端機，只要按下滑鼠右鍵就能夠 paste 文字。如果在 WSLtty 上也想這麼玩，請在 &lt;code&gt;%APPDATA%\wsltty\config&lt;/code&gt; 設定檔加上這一行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;RightClickAction=paste&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;tmux-與-zsh&#34;&gt;Tmux 與 zsh&lt;/h2&gt;
&lt;p&gt;啟動 tmux 時，似乎並不會根據 &lt;code&gt;/etc/passwd&lt;/code&gt; 的資訊來喚起自訂的 shell，而是一律喚起 bash。&lt;/p&gt;
&lt;p&gt;解決方法是，在 &lt;code&gt;~/.tmux.conf&lt;/code&gt; 加上這一行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;set-option -g default-shell /bin/zsh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;tmux-的-pane&#34;&gt;Tmux 的 pane&lt;/h2&gt;
&lt;p&gt;用慣 iTerm2 的我，對 tmux 的 pane 功能不太習慣。&lt;/p&gt;
&lt;p&gt;譬如說，在 tmux 新增 pane 或 window 時，不會自動帶入目前的目錄 &lt;code&gt;$PWD&lt;/code&gt;，而是一律帶入 &lt;code&gt;$HOME&lt;/code&gt;，很不方便。Tmux 預設的組合鍵 &lt;code&gt;&amp;lt;prefix&amp;gt; %&lt;/code&gt; 及 &lt;code&gt;&amp;lt;prefix&amp;gt; &amp;quot;&lt;/code&gt; 難記又難按，也很令人頭痛。&lt;/p&gt;
&lt;p&gt;因此，我綜合多人的做法&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;，解決目錄問題，換成好記好按的組合鍵，更可用方向鍵來切換 pane：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;# Create new window (tab) with current path
unbind c
bind -n M-t new-window -c &amp;#39;#{pane_current_path}&amp;#39;  # mimic for iTerm2 habit

# Split panes with current path
# @see https://unix.stackexchange.com/a/247449
unbind &amp;#39;&amp;#34;&amp;#39;
unbind &amp;#39;%&amp;#39;
bind -n M-d split-window -h -c &amp;#39;#{pane_current_path}&amp;#39;  # Split panes horizontal
bind -n M-D split-window -v -c &amp;#39;#{pane_current_path}&amp;#39;  # Split panes vertically

# Switch panes using Alt-arrow without prefix
bind -n M-Left  select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up    select-pane -U
bind -n M-Down  select-pane -D&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;tmux-plugin-manager&#34;&gt;Tmux Plugin Manager&lt;/h2&gt;
&lt;p&gt;Tmux 設定太多了，就有人寫了外掛管理系統 &lt;a href=&#34;https://github.com/tmux-plugins/tpm&#34;&gt;Tmux Plugin Manager&lt;/a&gt;。雖然目前我還用不到，但還是先安裝，以備不時之需。&lt;/p&gt;
&lt;p&gt;首先，下載 TPM：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;將以下幾行加到 &lt;code&gt;.tmux.conf&lt;/code&gt; 最後面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;# List of plugins
set -g @plugin &amp;#39;tmux-plugins/tpm&amp;#39;
set -g @plugin &amp;#39;tmux-plugins/tmux-sensible&amp;#39;

# Initialize TMUX plugin manager
# (keep this line at the very bottom of tmux.conf)
run -b &amp;#39;~/.tmux/plugins/tpm/tpm&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Tmux 還有很多高段的功能，以後有需要再研究吧。&lt;/p&gt;
&lt;p&gt;如此這般拼湊起來，雖然還不能完全複刻 Mac 的 iTerm2 使用經驗，但也已經算是可以接受了。當然啦，私心還是希望 Cmder 或 Hyper 能夠好好解決顯示問題，就不必動用 tmux 了。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;這段故事，詳見〈&lt;a href=&#34;//william-yeh.net/post/2019/03/wsl-cmder-zsh/&#34;&gt;在 Windows 上復刻 Mac 使用習慣&lt;/a&gt;〉一文。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;關於其他更華麗，卻也更耗資源的 Windows 終端機方案，可參考這幾篇介紹文章：〈&lt;a href=&#34;https://github.com/spencerwooo/dowww&#34;&gt;在 Windows 上面用 WSL 优雅开发&lt;/a&gt;〉、“&lt;a href=&#34;https://nickjanetakis.com/blog/conemu-vs-hyper-vs-terminus-vs-mobaxterm-terminator-vs-ubuntu-wsl&#34;&gt;ConEmu vs Hyper vs Terminus vs MobaXTerm Terminator vs Ubuntu WSL&lt;/a&gt;”。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;關於 &lt;a href=&#34;https://github.com/mintty/wsltty&#34;&gt;WSLtty&lt;/a&gt;，可參考保哥的〈&lt;a href=&#34;https://blog.miniasp.com/post/2019/02/09/Useful-tool-WSLtty-Mintty-as-a-terminal-for-WSL&#34;&gt;介紹好用工具：WSLtty (Mintty as a terminal for WSL)&lt;/a&gt;〉一文。 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;關於 &lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;tmux&lt;/a&gt;，可參考這幾篇介紹文章：〈&lt;a href=&#34;https://5xruby.tw/posts/tmux/&#34;&gt;tmux ，不只是 terminal multiplexer&lt;/a&gt;〉、〈&lt;a href=&#34;https://andyyou.github.io/2017/11/27/tmux-notes/&#34;&gt;tmux 快速入門筆記&lt;/a&gt;〉、〈&lt;a href=&#34;https://larrylu.blog/tmux-33a24e595fbc&#34;&gt;終端機 session 管理神器 — tmux&lt;/a&gt;〉。 &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Shubham 提供的&lt;a href=&#34;https://unix.stackexchange.com/a/247449&#34;&gt;做法&lt;/a&gt;，可讓新開的 pane 及 window 保持在目前所在的目錄。Ham Vocke 的&lt;a href=&#34;https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/&#34;&gt;文章&lt;/a&gt;也介紹幾種有趣的 tmux 設定。 &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
      
    </item>
    
    <item>
      <title>給 RD 的 Kubernetes 初體驗</title>
      <link>//william-yeh.net/courses/cloudsummit2019/</link>
      <pubDate>Tue, 02 Apr 2019 16:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/courses/cloudsummit2019/</guid>
      
        <description>&lt;p&gt;&lt;strong&gt;活動名稱&lt;/strong&gt;：給 RD 的 Kubernetes 初體驗&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;時間&lt;/strong&gt;：2019-05-15 (三) / 11:00&amp;ndash;12:30&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;會議&lt;/strong&gt;：&lt;a href=&#34;https://cloudsummit.ithome.com.tw/&#34;&gt;台灣雲端大會 (Cloud Summit 2019)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;課程簡介&#34;&gt;課程簡介&lt;/h2&gt;
&lt;p&gt;Kubernetes 是目前雲端環境的顯學。可是，傳統的程式，並不是原封不動搬上去，就能夠自動享受 Kubernetes 所宣稱的種種好處。&lt;/p&gt;
&lt;p&gt;新的環境，不僅需要新的 Ops 思維，也需要新的 Dev 思維。我們將以一個半小時的時間，從軟體研發者的角度，探討軟體的設計該做哪些最起碼的改變，從實作中體驗 Kubernetes 引進的新觀念及新效益。&lt;/p&gt;
&lt;h2 id=&#34;課程目標&#34;&gt;課程目標&lt;/h2&gt;
&lt;p&gt;從實例中體驗，傳統 web 應用程式在搬上 Kubernetes 時，可能會經歷哪些架構面的調整，才能享受新架構的效益：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;容器化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微服務&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;組態管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API gateway&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多重環境管理：本機端與雲端（以 GKE 為例）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;課程架構&#34;&gt;課程架構&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主題&lt;/th&gt;
&lt;th&gt;內容簡介&lt;/th&gt;
&lt;th&gt;類型&lt;/th&gt;
&lt;th&gt;時間(分)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1. 基本觀念&lt;/td&gt;
&lt;td&gt;快速介紹 Kubernetes 基本觀念&lt;/td&gt;
&lt;td&gt;簡報介紹&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2. 本機端實作&lt;/td&gt;
&lt;td&gt;移植 web 軟體至本機端 Kubernetes&lt;/td&gt;
&lt;td&gt;實機操作&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3. 雲端實作&lt;/td&gt;
&lt;td&gt;將 Kubernetes 成果送上雲端&lt;/td&gt;
&lt;td&gt;實機操作&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4. 總結&lt;/td&gt;
&lt;td&gt;Kubernetes 微服務要點總結&lt;/td&gt;
&lt;td&gt;簡報介紹&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;注意事項&#34;&gt;注意事項&lt;/h2&gt;
&lt;h3 id=&#34;學員能力要求&#34;&gt;學員能力要求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;須具備簡單的 Web 前後端觀念。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;須具備 Docker、Docker Compose、git 基本操作能力。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;學員需知&#34;&gt;學員需知&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;請先在自備筆電中安裝 &lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker Desktop&lt;/a&gt;，並開啟其中的 Kubernetes 功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本課程有一部分實作活動會使用 Google Kubernetes Engine (GKE) 及 Container Registry (GCR) 服務。為了讓現場體驗活動順暢，請學員事先申請好 &lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Cloud Platform&lt;/a&gt; 帳號，並自主練習約 45 分鐘的 “&lt;a href=&#34;https://www.qwiklabs.com/focuses/2794?parent=catalog&#34;&gt;A Tour of Qwiklabs and the Google Cloud Platform&lt;/a&gt;” 免費活動，確保你在來到活動現場之前，就已熟悉 &lt;a href=&#34;https://cloud.google.com/shell/&#34;&gt;Google Cloud Shell&lt;/a&gt; 的操作環境。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本實機操作課程由【Google Developers 贊助】。如果你是第一次用 GCP account 或還在 Free Trial 期間內，請繼續用 Free Trial 來操作；如果你已經是正式的 account，活動現場將提供你足夠額度的 coupon 來使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Nginx Ingress 與 Ambassador 簡易性能比較</title>
      <link>//william-yeh.net/post/2019/03/ingress-vs-ambassador/</link>
      <pubDate>Fri, 29 Mar 2019 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/03/ingress-vs-ambassador/</guid>
      
        <description>&lt;p&gt;API gateway 是微服務環境，甚至 service mesh 的要角 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 上面，API gateway 選項眾多。有像 HAProxy 及 Nginx 這些石器時代老傢伙跨足過來，也有打從一開始就走 cloud native 路線的後起之秀。&lt;/p&gt;
&lt;p&gt;該如何選擇？&lt;/p&gt;
&lt;p&gt;根據 Steven Acreman 寫的 &lt;a href=&#34;https://kubedex.com/ingress/&#34;&gt;Ingress 評比文章&lt;/a&gt;的看法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The safest choice is &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/&#34;&gt;ingress-nginx&lt;/a&gt;&lt;/em&gt;. This is the one that most people use and it’s extremely reliable. Before you begin I’d recommend you read this blog to get ahead of some of the problems you may encounter.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;My vote for the coolest ingress definitely goes to &lt;a href=&#34;https://www.getambassador.io/&#34;&gt;Ambassador&lt;/a&gt;.&lt;/em&gt;  If you’re just running standard http based micro services and fancy living on the bleeding edge then you should definitely get Istio, Ambassador and Jaeger setup as a proof of concept.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;進一步研讀 Ambassador 相關資料 &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，發現他們鎖定的 service mesh 路線很合我的胃口，站在 &lt;a href=&#34;https://www.envoyproxy.io/&#34;&gt;Envoy&lt;/a&gt; 巨人肩膀上更是聰明。不過，理論歸理論，我想親自試試看現在的 Ambassador 是否堪當大任？&lt;/p&gt;
&lt;p&gt;初步，我只先拿 &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/&#34;&gt;ingress-nginx&lt;/a&gt; 這個所謂的 “the safest choice” 作簡單的性能比較。將來有機會再進行更徹底的 chaos monkey 測試。&lt;/p&gt;
&lt;h2 id=&#34;實驗環境&#34;&gt;實驗環境&lt;/h2&gt;
&lt;p&gt;為了簡化實驗步驟，我直接採用 Google Cloud Platform 的 &lt;a href=&#34;https://cloud.google.com/kubernetes-engine/&#34;&gt;GKE&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes 版本：1.11.7-gke.12&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Node：2 台 &lt;a href=&#34;https://cloud.google.com/compute/docs/machine-types#standard_machine_types&#34;&gt;n1-standard-1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我選用的標靶軟體是 &lt;a href=&#34;https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/tree/master/hello-app&#34;&gt;hello-app&lt;/a&gt;，分別用以下兩種 API gateway 來對外提供服務介面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nginx ingress 版本：0.23.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ambassador 版本：0.52.0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後，我利用 &lt;a href=&#34;https://github.com/William-Yeh/docker-boom&#34;&gt;boom&lt;/a&gt; 進行簡單的壓力測試。&lt;/p&gt;
&lt;h2 id=&#34;nginx-ingress&#34;&gt;Nginx ingress&lt;/h2&gt;
&lt;p&gt;為了簡單起見，我直接套用以下這份 Qwiklabs 的全部步驟：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qwiklabs.com/focuses/872?parent=catalog&#34;&gt;GSP181 - NGINX Ingress Controller on Google Kubernetes Engine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;照著做完後，Nginx ingress 會在 GKE 開放一個公開的 http 服務存取點。&lt;/p&gt;
&lt;p&gt;我們可以先用 &lt;code&gt;kubectl get services&lt;/code&gt; 查看 API gateway 的 public IP 位址。假設是 &lt;code&gt;35.222.12.84&lt;/code&gt; 的話，這個服務路徑則是 &lt;code&gt;http://35.222.12.84/hello/&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;ambassador&#34;&gt;Ambassador&lt;/h2&gt;
&lt;p&gt;首先，仿造前面的 Qwiklabs 步驟，在 GKE 上建立起相同規模的 k8s cluster。也執行一份 &lt;a href=&#34;https://gist.githubusercontent.com/William-Yeh/0aab709e450b4442614ef87b0250260b/raw/daba0ba7e6b5561ec9af51a3ea020c79e572e34e/hello-app-service.yaml&#34;&gt;hello-app service&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;為了安裝 Ambassador，我們需要開啟 GKE 權限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl create clusterrolebinding my-cluster-admin-binding  \
    --clusterrole=cluster-admin  \
    --user=$(gcloud info --format=&amp;#34;value(config.account)&amp;#34;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來，就是正常的 Ambassador 安裝步驟：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl create -f http://bit.ly/2UmsPuE&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此刻，我們終於可以透過 Ambassador，替 hello-app 設定 API gateway 規則：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% kubectl create -f https://bit.ly/2YyZzjO&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;照著做完後，Ambassador 會在 GKE 開放一個公開的 http 服務存取點。&lt;/p&gt;
&lt;p&gt;我們可以先用 &lt;code&gt;kubectl get services&lt;/code&gt; 查看 API gateway 的 public IP 位址。假設是 &lt;code&gt;35.224.99.169&lt;/code&gt; 的話，這個服務路徑則是 &lt;code&gt;http://35.224.99.169/hello2/&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;簡單的壓測&#34;&gt;簡單的壓測&lt;/h2&gt;
&lt;p&gt;為了簡單起見，我在 GCP 的 &lt;a href=&#34;https://cloud.google.com/shell/?hl=zh-tw&#34;&gt;Cloud Shell&lt;/a&gt; 進行壓測。我會對 Nginx ingress 及 Ambassador 兩種情況，各送出一萬個 API 存取要求。&lt;/p&gt;
&lt;p&gt;針對 Nginx ingress 的情況進行測試：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% docker run --rm  williamyeh/boom  \
    -n 10000 -c 100  http://35.222.12.84/hello/

Summary:
  Total:        16.2312 secs
  Slowest:      0.3252 secs
  Fastest:      0.1568 secs
  Average:      0.1616 secs
  Requests/sec: 616.0963
  Total data:   660000 bytes
  Size/request: 66 bytes

Status code distribution:
  [200] 10000 responses

Response time histogram:
  0.157 [1]     |
  0.174 [9803]  |∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
  0.190 [96]    |
  0.207 [0]     |
  0.224 [0]     |
  0.241 [0]     |
  0.258 [0]     |
  0.275 [0]     |
  0.292 [0]     |
  0.308 [0]     |
  0.325 [100]   |

Latency distribution:
  10% in 0.1576 secs
  25% in 0.1583 secs
  50% in 0.1593 secs
  75% in 0.1608 secs
  90% in 0.1632 secs
  95% in 0.1661 secs
  99% in 0.3152 secs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;針對 Ambassador 的情況進行測試：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;% docker run --rm  williamyeh/boom  \
    -n 10000 -c 100  http://35.224.99.169/hello2/

Summary:
  Total:        16.8132 secs
  Slowest:      0.3857 secs
  Fastest:      0.1571 secs
  Average:      0.1662 secs
  Requests/sec: 594.7715
  Total data:   660000 bytes
  Size/request: 66 bytes

Status code distribution:
  [200] 10000 responses

Response time histogram:
  0.157 [1]     |
  0.180 [9595]  |∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
  0.203 [304]   |∎
  0.226 [0]     |
  0.249 [0]     |
  0.271 [0]     |
  0.294 [0]     |
  0.317 [0]     |
  0.340 [0]     |
  0.363 [8]     |
  0.386 [92]    |

Latency distribution:
  10% in 0.1596 secs
  25% in 0.1607 secs
  50% in 0.1623 secs
  75% in 0.1656 secs
  90% in 0.1717 secs
  95% in 0.1786 secs
  99% in 0.3596 secs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;儘管不夠嚴謹，但仍可以約略看出 Ambassador 的性能已經逼近 Nginx ingress。以才兩歲半的 Envoy &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;、才滿兩歲的 Ambassador &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; 來說，已經很不容易了。&lt;/p&gt;
&lt;p&gt;這是一個值得開始嘗試的好物。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;對於 API gateway 來龍去脈感興趣的，可參考 Ricky 的文章〈&lt;a href=&#34;https://rickhw.github.io/2018/01/24/AWS/Study-Notes-Overview-API-Gateway/&#34;&gt;Overview API Gateway&lt;/a&gt;〉、Andrew 的文章〈&lt;a href=&#34;https://columns.chicken-house.net/2017/07/11/microservice8-case-study-p3/&#34;&gt;架構師觀點 - 轉移到微服務架構的經驗分享 (Part 3)&lt;/a&gt;〉。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;對於 Ambassador 早期發展歷程感興趣的，可參考他們寫的這兩篇文章：“&lt;a href=&#34;https://medium.com/@datawire/building-ambassador-an-open-source-api-gateway-on-kubernetes-and-envoy-33637a9fa6f8&#34;&gt;Building Ambassador, an Open Source API Gateway on Kubernetes and Envoy&lt;/a&gt;” 及 “&lt;a href=&#34;https://blog.getambassador.io/kubernetes-ingress-nodeport-load-balancers-and-ingress-controllers-6e29f1c44f2d&#34;&gt;Kubernetes Ingress 101: NodePort, Load Balancers, and Ingress Controllers&lt;/a&gt;”。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Envoy &lt;a href=&#34;https://github.com/envoyproxy/envoy/tree/v1.0.0&#34;&gt;1.0.0 版&lt;/a&gt;發布日期為 2016 年 9 月。 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Ambassador &lt;a href=&#34;https://github.com/datawire/ambassador/blob/master/CHANGELOG.md&#34;&gt;0.1.3 版&lt;/a&gt;發布日期為 2017 年 3 月。 &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
      
    </item>
    
  </channel>
</rss>
