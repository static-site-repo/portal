<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Potioneer&#39;s Essays</title>
    <link>//william-yeh.net/tags/docker/</link>
    <description>Recent content in docker on Potioneer&#39;s Essays</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 07 Feb 2023 22:00:00 +0800</lastBuildDate><atom:link href="//william-yeh.net/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用 Podman 執行 Laravel &#43; Sail</title>
      <link>//william-yeh.net/post/2023/02/podman-laravel-sail/</link>
      <pubDate>Tue, 07 Feb 2023 22:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2023/02/podman-laravel-sail/</guid>
      <description>&lt;p&gt;從 Docker Desktop 換到 Podman &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; ，開始需要處理某些相容性問題。有些問題不見得是 Podman 的錯，但既然遇到了，就順手記錄一下除雷經驗。&lt;/p&gt;
&lt;p&gt;此文記錄一下在 Podman 執行 Laravel 9 欽定開發環境 &lt;a href=&#34;https://laravel.com/docs/9.x/sail&#34;&gt;Sail&lt;/a&gt; 的步驟。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Podman Tips</title>
      <link>//william-yeh.net/post/2023/02/podman-tips/</link>
      <pubDate>Tue, 07 Feb 2023 20:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2023/02/podman-tips/</guid>
      <description>&lt;p&gt;從 Docker Desktop 換成 Podman，有些習慣必須做些小調整。此文記錄一些常用的小技巧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WSL2 &#43; Podman &#43; K3s 組合技</title>
      <link>//william-yeh.net/post/2023/02/wsl2-podman-k3s/</link>
      <pubDate>Mon, 06 Feb 2023 22:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2023/02/wsl2-podman-k3s/</guid>
      <description>&lt;p&gt;距離上次重度使用 WSL 已經快四年了。四年來 WSL 世界起了一些變化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WSL 已經演進到第二版。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以前還會為了要搭配 &lt;a href=&#34;//william-yeh.net/post/2019/03/wsl-cmder-zsh/&#34;&gt;Cmder&lt;/a&gt; 或者 &lt;a href=&#34;//william-yeh.net/post/2019/04/wsltty-tmux/&#34;&gt;WSLtty&lt;/a&gt; 而大費周章，現在則被 &lt;a href=&#34;https://learn.microsoft.com/zh-tw/windows/terminal/&#34;&gt;Windows Terminal&lt;/a&gt; 解決了大部分問題，使用體驗也開始接近 Mac 的 iTerm2。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器世界也起了很大的變化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Docker Desktop 新規定：只要公司超過 250 人，或是年營收超過美金千萬，就必須付費。&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; Docker Hub 也開始對未付費者施以較嚴格的限流措施。 &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes 從 1.24 起停止支援 dockershim。 &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RedHat 釋出的 &lt;a href=&#34;https://podman.io/&#34;&gt;Podman&lt;/a&gt;，挾其完全免費、daemonless、rootless、pod 的特性，開始吸引對 Docker 起異心的人。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，我也趁此機會更新這方面的資訊，以免費的組合技，在 Windows 上盡量復刻 Mac 的容器體驗：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以 WSL 2 與 IDE 的整合，兼顧命令列與 GUI 體驗。&lt;/li&gt;
&lt;li&gt;以 Podman 取代 Docker Desktop 的 container engine。&lt;/li&gt;
&lt;li&gt;以 K3s 取代 Docker Desktop 的 Kubernetes。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Docker File Permissions on Windows</title>
      <link>//william-yeh.net/post/2019/06/docker-file-permissions/</link>
      <pubDate>Mon, 24 Jun 2019 12:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/06/docker-file-permissions/</guid>
      <description>&lt;p&gt;Currently Linux containers are still more popular than Windows containers. And Windows users often need to use Linux containers even from their Windows computers.&lt;/p&gt;
&lt;p&gt;Recently I&amp;rsquo;ve found something very strange about Linux-style file permissions when the Docker images are built from Windows hosts.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; Therefore, I&amp;rsquo;ve conducted a suite of test cases to investigate whether file permissions are preserved with Docker &amp;amp; &lt;a href=&#34;https://skaffold.dev/&#34;&gt;Skaffold&lt;/a&gt; toolchains. All experiment materials are available in the &lt;a href=&#34;https://github.com/William-Yeh/container-chmod&#34;&gt;container-chmod&lt;/a&gt; repo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Auto-Reload from ConfigMap</title>
      <link>//william-yeh.net/post/2019/06/autoreload-from-configmap/</link>
      <pubDate>Mon, 17 Jun 2019 17:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/06/autoreload-from-configmap/</guid>
      <description>My previous article &amp;ldquo;Inotify in Containers&amp;rdquo; has demonstrated that when ConfigMap is mounted as directories, any changes in the ConfigMap will propagate to related pods, and can be detected with inotify-like APIs.
A follow-up question might be: what should a well-behaved application react to this trigger accordingly? What if it&amp;rsquo;s a ill-designed application?
To clarify this I&amp;rsquo;ve conducted a series of experiments for 3 possible configmap-reloading strategies:
Built-in auto-reloading apps External signals Pod rollout In this article I&amp;rsquo;m going to explain the experiments and preliminary findings.</description>
    </item>
    
    <item>
      <title>Containers and Environment Variables</title>
      <link>//william-yeh.net/post/2019/06/containers-and-env/</link>
      <pubDate>Mon, 17 Jun 2019 14:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/06/containers-and-env/</guid>
      <description>My previous article &amp;ldquo;Inotify in Containers&amp;rdquo; has demonstrated that when ConfigMap is mounted as directories, any changes in the ConfigMap will propagate to related pods. A follow-up question might be: what if the ConfigMap is mounted as environment variables? Some said that the answer is NO in Kubernetes1; even in the old Docker world2. Therefore, I&amp;rsquo;d like to begin with a simple experiment to try to answer the question: After</description>
    </item>
    
    <item>
      <title>Inotify in Containers</title>
      <link>//william-yeh.net/post/2019/06/inotify-in-containers/</link>
      <pubDate>Mon, 10 Jun 2019 18:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/06/inotify-in-containers/</guid>
      <description>It is usually necessary to watch for any changes in file systems, both in development and in production modes. For example, in the development mode Webpack can watch files and recompile whenever they change; in the production mode Consul Template can watch runtime configs and invoke specific applications whenever they change. These are well-known scenarios in traditional pre-container world. How about the container world? Do they behave the same in</description>
    </item>
    
    <item>
      <title>Kubernetes 的入門認知與導入策略</title>
      <link>//william-yeh.net/post/2019/05/k8s-lab/</link>
      <pubDate>Fri, 17 May 2019 12:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/05/k8s-lab/</guid>
      <description>&lt;p&gt;前天我在 &lt;a href=&#34;https://cloudsummit.ithome.com.tw/2019/lab.html#0001&#34;&gt;2019 台灣雲端大會&lt;/a&gt;帶了兩個場次，一個是現場實作場次，一個是經驗分享演講：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lab / &lt;a href=&#34;https://github.com/William-Yeh/workshop-cloud2019&#34;&gt;給 RD 的 Kubernetes 初體驗&lt;/a&gt; (90 minutes)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speech / &lt;a href=&#34;https://www.slideshare.net/williamyeh/when-dotnetmeetskubernetes-145557464&#34;&gt;當 .NET 遇到 Kubernetes&lt;/a&gt; (30 minutes)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;兩個場次，一言以蔽之，都圍繞在 Kubernetes 的入門認知與導入策略上。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Next &#39;19 的 Istio 場次重點摘要</title>
      <link>//william-yeh.net/post/2019/04/next19-istio/</link>
      <pubDate>Fri, 19 Apr 2019 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2019/04/next19-istio/</guid>
      <description>&lt;p&gt;四月 9&amp;ndash;11 日去舊金山參加 Google Cloud 的 &lt;a href=&#34;https://cloud.withgoogle.com/next/sf/&#34;&gt;Next ’19&lt;/a&gt; 大會，收穫頗大。&lt;/p&gt;
&lt;p&gt;這場大會，同一時段就有近 30 場專題演講同時進行，議程滿滿，勢必得做取捨。基於工作需要及個人興趣，我主要選擇與容器相關的場次：service mesh、Windows containers、混合雲、資安實務。&lt;/p&gt;
&lt;p&gt;我發現，光是這些場次，就得花很大力氣去消化、實驗與應用。&lt;/p&gt;
&lt;p&gt;我們這些所謂的「台港團」會在 GCPUG Taipei 舉辦一場&lt;a href=&#34;https://www.meetup.com/GCPUG-Taipei/events/260555968/&#34;&gt;分享會&lt;/a&gt;。因為自己不克參加，便以這篇文章，針對我鎖定的核心議題：Istio，做一番重點摘要，以饗讀者。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CI 怎樣帶你遠離平庸？</title>
      <link>//william-yeh.net/post/2015/12/ci-effect/</link>
      <pubDate>Tue, 22 Dec 2015 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2015/12/ci-effect/</guid>
      <description>前天我的文章〈CI 是條不歸路〉提到：「CI/CD/DevOps 既是條不歸路，更是大躍進之路：一旦踏出第一步，就注定你會不斷接觸**『遠離平庸</description>
    </item>
    
  </channel>
</rss>
