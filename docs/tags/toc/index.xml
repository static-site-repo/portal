<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>toc on Potioneer&#39;s Essays</title>
    <link>//william-yeh.net/tags/toc/</link>
    <description>Recent content in toc on Potioneer&#39;s Essays</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sun, 13 Sep 2020 22:00:00 +0800</lastBuildDate><atom:link href="//william-yeh.net/tags/toc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>從系統思考角度讀《目標》：第一～三章</title>
      <link>//william-yeh.net/post/2020/09/systhinking-goal-ch01-03/</link>
      <pubDate>Sun, 13 Sep 2020 22:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2020/09/systhinking-goal-ch01-03/</guid>
      <description>&lt;h2 id=&#34;緣起&#34;&gt;緣起&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Eliyahu_M._Goldratt&#34;&gt;高德拉特&lt;/a&gt;系列著作是我的管理啟蒙書，《&lt;a href=&#34;https://www.books.com.tw/products/0010898249&#34;&gt;目標&lt;/a&gt;》更是每隔一陣子就會重讀的經典。&lt;/p&gt;
&lt;p&gt;這次，我打算以系統思考 (systems thinking) 角度重讀。尤其是以我在【&lt;a href=&#34;//william-yeh.net/post/2018/06/sys-thinking-workshop/&#34;&gt;系統思考的四堂課&lt;/a&gt;】提出的「&lt;strong&gt;SLR·CPI 法&lt;/strong&gt;」來逐步分析。&lt;/p&gt;
&lt;p&gt;土井英司在《&lt;a href=&#34;http://www.books.com.tw/products/0010762830&#34;&gt;一流的人讀書，都在哪裡畫線？&lt;/a&gt;》點出箇中訣竅：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>改變／改革：流程與衡量指標</title>
      <link>//william-yeh.net/post/2018/12/process-and-metrics/</link>
      <pubDate>Fri, 07 Dec 2018 13:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/12/process-and-metrics/</guid>
      <description>改革，很不容易；摧毀改革，卻很簡單。知名的改革框架，莫不注重改革的整合與固化。 敏捷亦然。 敏捷三叔公 David Ko 在 Scrum 社群裡轉貼了一篇文章，一則可悲的故</description>
    </item>
    
    <item>
      <title>思維的重量訓練</title>
      <link>//william-yeh.net/post/2018/09/thinking-weight-training/</link>
      <pubDate>Tue, 04 Sep 2018 11:30:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/09/thinking-weight-training/</guid>
      <description>&lt;p&gt;上週五【&lt;a href=&#34;https://devopsdays.tw/2018/workshop.html&#34;&gt;系統思考的四堂課・DevOps 特別版&lt;/a&gt;】，表定 7 小時，延長賽到 7.5 小時，感謝首梯公開班同學的熱情參與，共度刺激的一天。&lt;/p&gt;
&lt;p&gt;課後仍持續收到提問，我挑選幾則統一回覆。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>系統思考的四堂課</title>
      <link>//william-yeh.net/post/2018/06/sys-thinking-workshop/</link>
      <pubDate>Thu, 21 Jun 2018 23:26:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2018/06/sys-thinking-workshop/</guid>
      <description>過去四週，我在公司內帶了一系列【系統思考的四堂課】。本文回顧整件事的來龍去脈，為自己做個紀錄及紀念。 緣起 其一 過去兩年，我分別以限制理論的 thinking p</description>
    </item>
    
    <item>
      <title>TOC 瓶頸處理九大原則</title>
      <link>//william-yeh.net/post/2016/11/toc-bottleneck-principles/</link>
      <pubDate>Mon, 14 Nov 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/11/toc-bottleneck-principles/</guid>
      <description>高德拉特初試啼聲之作《目標》，最為人津津樂道的，不外乎是「聚焦五步驟」（又稱 POOGI）及「鼓-緩衝-繩」(Drum-Buffer-Rope</description>
    </item>
    
    <item>
      <title>從限制理論看 DevOps</title>
      <link>//william-yeh.net/post/2016/08/devops-a-toc-perspective/</link>
      <pubDate>Wed, 17 Aug 2016 23:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/08/devops-a-toc-perspective/</guid>
      <description>自從寫了〈DevOps 核心元素的考古溯源〉一文，我就很想找個機會，好好闡釋 DevOps 的重要源頭：Lean Thinking。這個願望，在五月初那次兩個</description>
    </item>
    
    <item>
      <title>請循其本</title>
      <link>//william-yeh.net/post/2016/08/back-to-the-origin/</link>
      <pubDate>Mon, 01 Aug 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/08/back-to-the-origin/</guid>
      <description>老子曰：「五色令人目盲，五音令人耳聾。」 所以，最近我越來越喜歡從原始定義或目標下手。 原理通了，邏輯通了，再加一點點創意及想像力，很多東西都是</description>
    </item>
    
    <item>
      <title>改變的框架</title>
      <link>//william-yeh.net/post/2016/06/change-framework/</link>
      <pubDate>Tue, 28 Jun 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/06/change-framework/</guid>
      <description>&lt;p&gt;前幾天在 Twitter 寫道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下半年自我的課題，就是左腦高德拉特，右腦薩提爾，左右互搏。&lt;/p&gt;
&lt;p&gt;   &amp;mdash; Quote: &lt;a href=&#34;https://twitter.com/william_yeh/status/746245079375876101&#34;&gt;2016-06-24 Tweet #1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;為什麼會把兩者相提並論呢？&lt;/p&gt;
&lt;p&gt;對我來說，&lt;a href=&#34;https://en.wikipedia.org/wiki/Eliyahu_M._Goldratt&#34;&gt;高德拉特&lt;/a&gt;代表一種極度&lt;strong&gt;陽剛&lt;/strong&gt;的思維角度，&lt;a href=&#34;https://en.wikipedia.org/wiki/Virginia_Satir&#34;&gt;薩提爾&lt;/a&gt;代表一種極度&lt;strong&gt;柔軟&lt;/strong&gt;的治療角度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《鳳凰專案》私房標題</title>
      <link>//william-yeh.net/post/2016/06/phoenix-proj-titles/</link>
      <pubDate>Tue, 21 Jun 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/06/phoenix-proj-titles/</guid>
      <description>The Phoenix Project（中譯本《鳳凰專案》）作者如是說： Dr. Eliyahu Goldratt wrote his seminal book, The Goal: A Process of Ongoing Improvement, in 1984. [&amp;hellip;] My coauthors and I studied this book for nearly a decade, getting ready to write The Phoenix Project. In many ways, I view our book as an</description>
    </item>
    
    <item>
      <title>轉大人，Part 2</title>
      <link>//william-yeh.net/post/2016/06/upgrade-adult-thinking-part2/</link>
      <pubDate>Sat, 04 Jun 2016 09:54:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/06/upgrade-adult-thinking-part2/</guid>
      <description>在我所處的軟體研發圈中，最近也流行起「18+ Adult Manifesto」這種話題。 這就不得不佩服 J&amp;amp;B 取的「大人學」品牌名字，是多麼有遠見呀！ 小孩 vs 大</description>
    </item>
    
    <item>
      <title>向工廠管理致敬</title>
      <link>//william-yeh.net/post/2016/04/learn-from-plant-mgmt/</link>
      <pubDate>Fri, 22 Apr 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/04/learn-from-plant-mgmt/</guid>
      <description>&lt;p&gt;身為徹頭徹尾的軟體人，在軟體產業待久了，總會對「硬」一點的產業，尤其是製造業，有莫名的成見，以為他們是僵固的、反人性的。從 1972 年「&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_crisis&#34;&gt;軟體危機&lt;/a&gt;」引發的論述當中，更加深軟體人的印象：製造業的經驗，是無法直接套用到軟體界的；我們是截然不同的國度。&lt;/p&gt;
&lt;p&gt;不過，近十年來許多軟體界的流程改革，尤其是同屬 Agile 陣營的 Scrum 及 Kanban，居然有許多元素是從製造業&lt;del&gt;偷竊&lt;/del&gt;學習而來。譬如說&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
