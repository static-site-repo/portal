<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Potioneer&#39;s Essays</title>
    <link>//william-yeh.net/tags/programming/</link>
    <description>Recent content in programming on Potioneer&#39;s Essays</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 07 Feb 2023 22:00:00 +0800</lastBuildDate><atom:link href="//william-yeh.net/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用 Podman 執行 Laravel &#43; Sail</title>
      <link>//william-yeh.net/post/2023/02/podman-laravel-sail/</link>
      <pubDate>Tue, 07 Feb 2023 22:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2023/02/podman-laravel-sail/</guid>
      <description>從 Docker Desktop 換到 Podman 1 ，開始需要處理某些相容性問題。有些問題不見得是 Podman 的錯，但既然遇到了，就順手記錄一下除雷經驗。 此文記錄一下在 Podman 執行 Laravel 9 欽定開發環</description>
    </item>
    
    <item>
      <title>很簡單的東西，也要單元測試嗎？</title>
      <link>//william-yeh.net/post/2022/05/need-for-unit-testing/</link>
      <pubDate>Tue, 24 May 2022 12:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2022/05/need-for-unit-testing/</guid>
      <description>&lt;p&gt;（改寫自公司內部 memo）&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;   &lt;!-- raw HTML omitted --&gt;   &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Hi all engineers,&lt;/p&gt;
&lt;p&gt;上完一整天單元測試課程之後，有同事問我：「有沒有標準來決定要不要寫單元測試？」&lt;/p&gt;
&lt;p&gt;剛讀完劉潤《&lt;a href=&#34;https://www.books.com.tw/products/0010919211&#34;&gt;底層邏輯&lt;/a&gt;》的我，對於這類疑似「注射器」的問句格外敏感。雖然我可以瀟灑引述 &lt;a href=&#34;https://www.tenlong.com.tw/products/9789864344000&#34;&gt;&lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;&lt;/a&gt; 的說法「我毫無疑問地將『遺留程式碼』定義為『&lt;strong&gt;沒有編寫測試的程式碼&lt;/strong&gt;』」：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;沒有編寫測試的程式碼是糟糕的程式碼——不管我們多麼細心地編寫它們，不管它們有多漂亮、物件導向或封裝良好。有了測試，我們就能夠迅速、可驗證地修改程式碼的行為。沒有測試，我們就不知道修改後的程式碼，實際上是變得更好還是更糟。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但當下我還是決定先展開一場對話。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Best Practices</title>
      <link>//william-yeh.net/post/2020/07/golang-best-practices/</link>
      <pubDate>Fri, 10 Jul 2020 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2020/07/golang-best-practices/</guid>
      <description>&lt;p&gt;今年一月，換到一家以 Go 為主力語言的公司。&lt;/p&gt;
&lt;p&gt;習慣了 Java 紀律，一碰到 Go 的自由奔放，不禁想尋求一些 best practices 與 patterns。&lt;/p&gt;
&lt;p&gt;以前我曾蒐集過一份 Go Best Practices 清單。浸潤 Go 半年後，再回頭看這些內容，當初不甚明瞭之處，竟然也懂了許多。便想重新整理一次，並加上個人的短評。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>練字與程式設計</title>
      <link>//william-yeh.net/post/2016/08/on-handwriting/</link>
      <pubDate>Wed, 10 Aug 2016 08:00:00 +0800</pubDate>
      
      <guid>//william-yeh.net/post/2016/08/on-handwriting/</guid>
      <description>參考線 最近常常需要利用便利貼或紙筆思考。看了看筆跡，覺得⋯⋯呃，該開始重新練字了。 現在市面上看得到的範例及風格，比起只有張炳煌《硬筆書法》的</description>
    </item>
    
  </channel>
</rss>
